<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Liang-Bo Wang's Blog - blog</title><link href="https://blog.liang2.tw/" rel="alternate"></link><link href="https://blog.liang2.tw/feeds/tag_blog.atom.xml" rel="self"></link><id>https://blog.liang2.tw/</id><updated>2016-02-19T15:00:00-06:00</updated><entry><title>Add code block language name into CSS classes in Pelican Markdown</title><link href="https://blog.liang2.tw/posts/2016/02/markdown-codehilite-lang/" rel="alternate"></link><published>2016-02-19T15:00:00-06:00</published><updated>2016-02-19T15:00:00-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-02-19:/posts/2016/02/markdown-codehilite-lang/</id><summary type="html">&lt;p&gt;I used &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; and its &lt;a href="https://pythonhosted.org/Markdown/"&gt;Markdown&lt;/a&gt; plugin to render blog post. &lt;/p&gt;
&lt;p&gt;Recently I was playing with the &lt;a href="https://docs.python.org/"&gt;Python Official Documentation&lt;/a&gt;, which has a decent …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I used &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; and its &lt;a href="https://pythonhosted.org/Markdown/"&gt;Markdown&lt;/a&gt; plugin to render blog post. &lt;/p&gt;
&lt;p&gt;Recently I was playing with the &lt;a href="https://docs.python.org/"&gt;Python Official Documentation&lt;/a&gt;, which has a decent code syntax highlighter powered by &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s more, the output of code examples can be toggled. That is, a code example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be toggled to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is very convenient for code copy-pasting.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;However, the functionality is currently failed on the official Python doc (given by &lt;a href="https://docs.python.org/3/_static/copybutton.js"&gt;&lt;code&gt;copybutton.js&lt;/code&gt;&lt;/a&gt;) because the jQuery updates break previous API behavior. I&amp;rsquo;ve filed &lt;a href="http://bugs.python.org/issue26246"&gt;issue 26246&lt;/a&gt; on the Python issue tracker for this problem.&lt;/del&gt; (EDIT 2016-02-27: the patch has been merged.)&lt;/p&gt;
&lt;h3 id="code-output-toggle-in-pelican"&gt;Code output toggle in Pelican&lt;/h3&gt;
&lt;p&gt;After I fixed the copybutton.js, I wished to add this functionality to my blog. &lt;/p&gt;
&lt;p&gt;Code highlighting in Pelican markdown files is handled by its &lt;a href="https://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite&lt;/a&gt; extension. To my surprise, I found CodeHilite does not express the language name specified for each code block.&lt;/p&gt;
&lt;p&gt;What I expected was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight-python3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but the actual output was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So no way to find the language name the code block used, nor the lexer aliases Pygments guessed when no language name was specified.&lt;/p&gt;
&lt;p&gt;A quick dig into the &lt;a href="https://github.com/waylan/Python-Markdown/blob/master/markdown/extensions/codehilite.py#L106-L123"&gt;source code&lt;/a&gt; showed that it is relatively easy to fix. Here is the diff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/extensions/codehilite.py b/extensions/codehilite_updated.py&lt;/span&gt;
&lt;span class="gh"&gt;index 0657c37..4fad7c5 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/extensions/codehilite.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/extensions/codehilite_updated.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -75,7 +75,8 @@ class CodeHilite(object):&lt;/span&gt;

     def __init__(self, src=None, linenums=None, guess_lang=True,
                  css_class=&amp;quot;codehilite&amp;quot;, lang=None, style=&amp;#39;default&amp;#39;,
&lt;span class="gd"&gt;-                 noclasses=False, tab_length=4, hl_lines=None, use_pygments=True):&lt;/span&gt;
&lt;span class="gi"&gt;+                 noclasses=False, tab_length=4, hl_lines=None, use_pygments=True, &lt;/span&gt;
&lt;span class="gi"&gt;+                 wrap_by_lang=True):&lt;/span&gt;
         self.src = src
         self.lang = lang
         self.linenums = linenums
&lt;span class="gu"&gt;@@ -86,6 +87,7 @@ class CodeHilite(object):&lt;/span&gt;
         self.tab_length = tab_length
         self.hl_lines = hl_lines or []
         self.use_pygments = use_pygments
&lt;span class="gi"&gt;+        self.wrap_by_lang = wrap_by_lang&lt;/span&gt;

     def hilite(self):
         &amp;quot;&amp;quot;&amp;quot;
&lt;span class="gu"&gt;@@ -114,13 +116,22 @@ class CodeHilite(object):&lt;/span&gt;
                         lexer = get_lexer_by_name(&amp;#39;text&amp;#39;)
                 except ValueError:
                     lexer = get_lexer_by_name(&amp;#39;text&amp;#39;)
&lt;span class="gi"&gt;+            lang = lexer.aliases[0]&lt;/span&gt;
             formatter = get_formatter_by_name(&amp;#39;html&amp;#39;,
                                               linenos=self.linenums,
                                               cssclass=self.css_class,
                                               style=self.style,
                                               noclasses=self.noclasses,
                                               hl_lines=self.hl_lines)
&lt;span class="gd"&gt;-            return highlight(self.src, lexer, formatter)&lt;/span&gt;
&lt;span class="gi"&gt;+            hilited_html = highlight(self.src, lexer, formatter)&lt;/span&gt;
&lt;span class="gi"&gt;+            if self.wrap_by_lang and self.lang:&lt;/span&gt;
&lt;span class="gi"&gt;+                return &amp;#39;&amp;lt;div class=&amp;quot;%(class)s-%(lang)s&amp;quot;&amp;gt;%(html)s&amp;lt;/div&amp;gt;\n&amp;#39; % {&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;class&amp;#39;: self.css_class,&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;lang&amp;#39;: lang.replace(&amp;#39;+&amp;#39;, &amp;#39;-&amp;#39;),&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;html&amp;#39;: hilited_html,&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            else:&lt;/span&gt;
&lt;span class="gi"&gt;+                return hilited_html&lt;/span&gt;
         else:
             # just escape and build markup usable by JS highlighting libs
             txt = self.src.replace(&amp;#39;&amp;amp;&amp;#39;, &amp;#39;&amp;amp;amp;&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;rsquo;m happy with the patched codehilite output. I am now able to give code toggle function to specific code languages. &lt;/p&gt;
&lt;p&gt;However it&amp;rsquo;s quite busy these days, so it may take a while to submit a proper pull request (e.g. fix any broken unit tests, write new tests, and tune the API as well as the new behavior). Moerover, &lt;strong&gt;currently my site does not use jQuery&lt;/strong&gt; so I am missing a huge dependency. Rewriting it using vanilla JS seems to require considerable work, and the very thing I don&amp;rsquo;t have at hand is time :(&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve decided to leave this improvement in future development. But if your site use Pelican Markdown and imports jQuery, the diff will add the code language back. &lt;/p&gt;</content><category term="Coding"></category><category term="en"></category><category term="blog"></category><category term="pelican"></category><category term="codehilite"></category><category term="pygment"></category></entry><entry><title>Blog defaults to HTTPS</title><link href="https://blog.liang2.tw/posts/2016/01/blog-https/" rel="alternate"></link><published>2016-01-06T00:00:00-06:00</published><updated>2016-01-06T00:00:00-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-06:/posts/2016/01/blog-https/</id><summary type="html">&lt;p&gt;簡言之，現在 blog 使用 https。一般的 http 連線會被重新導向至 https。&lt;/p&gt;
&lt;p&gt;Blog 本來就是架在 &lt;a href="https://github.com/ccwang002/ccwang002.github.io"&gt;GitHub Pages&lt;/a&gt; 上，其實預設有 https，但在網址改成自訂 domain 之後 https 自然就失效了。在 GitHub 上有開 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;簡言之，現在 blog 使用 https。一般的 http 連線會被重新導向至 https。&lt;/p&gt;
&lt;p&gt;Blog 本來就是架在 &lt;a href="https://github.com/ccwang002/ccwang002.github.io"&gt;GitHub Pages&lt;/a&gt; 上，其實預設有 https，但在網址改成自訂 domain 之後 https 自然就失效了。在 GitHub 上有開 issue 請他們加入 &lt;a href="https://github.com/isaacs/github/issues/156"&gt;HTTPS support for custom domain&lt;/a&gt; 這功能，不過目前還是需要自己想辦法。隨著 &lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 這種服務的流行，GitHub 才會去積極尋找比較合適的解決方案吧。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cloudflare-ssl-and-cdn"&gt;CloudFlare SSL and CDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disqus"&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#justfont"&gt;justfont&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hinet"&gt;Hinet 轉址服務&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="cloudflare-ssl-and-cdn"&gt;CloudFlare SSL and CDN&lt;/h2&gt;
&lt;p&gt;在看那個 &lt;a href="https://github.com/isaacs/github/issues/156"&gt;issue&lt;/a&gt; 就可以找到其他人用 CloudFlare 的解法。概念上就再用一層 CloudFlare CDN，然後它的 CDN 有提供 https 簽章。直接看 CloudFlare 在 Crypto 頁的介紹比較快：&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/blog-https/pics/cloudflare_ssl.png"/&gt;
  &lt;p class="caption center"&gt;source: &lt;a href="https://www.cloudflare.com/ssl/"&gt; CloudFlare one-click SSL&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;所以 CloudFlare 去 cache GitHub 頁面時用的是 https，再到使用者時也是用 https。剩下就是你要不要相信 CloudFlare 了。&lt;/p&gt;
&lt;p&gt;CloudFlare 的設定可以參考 &lt;a href="https://blog.keanulee.com/2014/10/11/setting-up-ssl-on-github-pages.html"&gt;Keanu&amp;rsquo;s Blog&lt;/a&gt;。一些重點筆記：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;換成 CloudFlare 的 DNS Server&lt;/li&gt;
&lt;li&gt;Crypto SSL options 選 Full（不是 Strict 目前 GitHub 還不支援）&lt;/li&gt;
&lt;li&gt;在 Page Rules 強迫所有 http 連結重新使用 https（例如：&lt;code&gt;http://blog.liang2.tw/*&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS 以及 DNS 的設定都需要一段時間，過幾個小時或觀察個一天再把 http 關掉。&lt;/p&gt;
&lt;p&gt;Pelican 發佈設定 &lt;code&gt;publishconf.py&lt;/code&gt; 管網址的 &lt;code&gt;SITE_URL&lt;/code&gt; 能設成 &lt;code&gt;//blog.liang.tw&lt;/code&gt; 不用帶 protocol（這麼重要的資訊沒寫在文件裡啊），這樣就能同時 serve http(s)。&lt;/p&gt;
&lt;p&gt;這樣其實就完成了。但出乎意外還是有些小問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;網頁字型 &lt;a href="http://en.justfont.com/membership"&gt;justfont&lt;/a&gt; 要 Business Plan 才能支援 HTTPS。&lt;/li&gt;
&lt;li&gt;留言系統 &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; HTTP 和 HTTPS 竟然是當作&lt;a href="https://github.com/aspnet/Docs/issues/623"&gt;不同留言板&lt;/a&gt;來使用，而且要手動 merge。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="disqus"&gt;Disqus&lt;/h2&gt;
&lt;p&gt;似乎解法只有全部導向到 https。這還不能直接改 Disqus 設定，要用它的 &lt;a href="https://help.disqus.com/customer/portal/articles/912757-url-mapper"&gt;URL Mapper&lt;/a&gt; 下載所有留言版出現連結的 CSV 手動修改。 &lt;/p&gt;
&lt;p&gt;感覺很土砲。不過站上的留言不多，也不用改多少留言，很快就同步到新的位置上。&lt;/p&gt;
&lt;h2 id="justfont"&gt;justfont&lt;/h2&gt;
&lt;p&gt;之前有贊助金萱計畫，其實有拿到兩年的 Business Plan。寫信給客服一天就改好設定了。不過之後就要多付錢啦。&lt;/p&gt;
&lt;h2 id="hinet"&gt;Hinet 轉址服務&lt;/h2&gt;
&lt;p&gt;我沒有自己架任何 server，懶得維護。不過也很懶得打字。在其他 subdomain 都沒用的情況下，有透過 Hinet 設定 &lt;a href="http://liang2.tw"&gt;http://liang2.tw&lt;/a&gt; 會導向至 &lt;a href="http://blog.liang2.tw"&gt;http://blog.liang2.tw&lt;/a&gt; 再被導向到 https。&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/blog-https/pics/cloudflare_dns_setting.png"/&gt;
  &lt;p class="caption center"&gt;CloudFlare DNS setting&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;大概是這樣。希望能在不要自己架 server 的情況下繼續經營這個 blog。&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category><category term="blog"></category><category term="pelican"></category><category term="https"></category></entry><entry><title>設定部落格筆記</title><link href="https://blog.liang2.tw/posts/2015/09/blog-internals/" rel="alternate"></link><published>2015-09-21T00:00:00-05:00</published><updated>2015-09-21T00:00:00-05:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-09-21:/posts/2015/09/blog-internals/</id><summary type="html">&lt;p&gt;Blog 對我來說，最重要的就是書寫的舒適度。&lt;/p&gt;
&lt;p&gt;一開始在設定 github CNAME 的時候就訂為 &lt;code&gt;blog.liang2.tw&lt;/code&gt;，但一直以來都只是個一頁式的自我介紹&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;，用 &lt;a href="http://semantic-ui.com/"&gt;SemanticUI&lt;/a&gt; 手刻而成。不過部落格如果每篇文章都還要手刻的話，大概就不會有力氣再寫內容了。&lt;/p&gt;
&lt;p&gt;整理了一下有幾個目標：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只考慮用 static site 因為不想維護 server，而且 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Blog 對我來說，最重要的就是書寫的舒適度。&lt;/p&gt;
&lt;p&gt;一開始在設定 github CNAME 的時候就訂為 &lt;code&gt;blog.liang2.tw&lt;/code&gt;，但一直以來都只是個一頁式的自我介紹&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;，用 &lt;a href="http://semantic-ui.com/"&gt;SemanticUI&lt;/a&gt; 手刻而成。不過部落格如果每篇文章都還要手刻的話，大概就不會有力氣再寫內容了。&lt;/p&gt;
&lt;p&gt;整理了一下有幾個目標：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只考慮用 static site 因為不想維護 server，而且 blog 也沒什要炫的，現在光用前端就可以做到很多互動功能&lt;/li&gt;
&lt;li&gt;最好 site generator 是用 Python 實作，這樣想要調整它的功能時，比較懂怎麼改 &lt;/li&gt;
&lt;li&gt;能支援 markdown 和 reStructuredText 最好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;篩完之後選項也沒幾個：&lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;、&lt;a href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;，但 Sphinx 可能對 blog 開發的功能比較少，最多人用的大概就 Pelican，所以就決定用它了。&lt;/p&gt;
&lt;p&gt;整理起來也做了不少調整，就列點吧：&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pelican"&gt;Pelican 簡介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#all-is-about-the-theme"&gt;All is about the theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;字型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#webfont"&gt;中文 webfont&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;中文排版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#figure-caption"&gt;Figure caption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown-or-rst"&gt;Markdown or rst?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-do"&gt;To do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#edit-2015-09-22"&gt;EDIT (2015-09-22)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#edit-2015-09-23"&gt;EDIT (2015-09-23)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="pelican"&gt;Pelican 簡介&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; 結論來說不難理解，而且要自訂 blog theme 也不會很複雜。首先跟 Sphinx 一樣，用內建的 &lt;code&gt;pelican-quickstart&lt;/code&gt; 預設值就能架好一個可以動的。目錄大概長這樣&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;my_blog/
├── content/
│   ├── blog_post_1.md
│   └── blog_post_2.rst
├── output/
├── develop_server.sh*
├── Makefile
├── fabfile.py
├── pelicanconf.py
├── publishconf.py
└── requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Blog source 都放在 content 底下，設定檔分成 local 用的 &lt;code&gt;pelicanconf.py&lt;/code&gt; 以及 deploy 用的 &lt;code&gt;publishconf.py&lt;/code&gt;。並且提供了像 Fabric、Make、shell script 等自動化腳本把 source 用 theme template render 成一個靜態網站，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;預設會輸出到 &lt;code&gt;output/&lt;/code&gt;，到時候 deploy 就把這個資料夾的內容丟到 server 上。&lt;/p&gt;
&lt;p&gt;每篇文章可以用 markdown 或者 reStructuredText(rst) 來寫，概念上像這樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
Title: Hello World
Date: 2016-01-16 18:00
Tags: world, programming
Category: test
Slug: hello-world
---

Hello [World]

[World]: https://en.wikipedia.org/wiki/World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;Hello World&lt;/span&gt;
&lt;span class="gh"&gt;##############&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; 2016-01-16 18:00
&lt;span class="nc"&gt;:tags:&lt;/span&gt; world, programming
&lt;span class="nc"&gt;:category:&lt;/span&gt; test
&lt;span class="nc"&gt;:slug:&lt;/span&gt; hello-world

Hello World_

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_World:&lt;/span&gt; https://en.wikipedia.org/wiki/World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣已經設定好了標題、分類、標籤、發布日期還有 slug（有點像文章的 ID）算很完整了。最低要求至少有標題。&lt;/p&gt;
&lt;p&gt;最後調整了一下 static file 的路徑。我把文章按年月分開，每個子資料夾裡有當月的圖、檔案等等。URL 也是以年月為單位。其實最理想的應該是有個 hash 之類的東西 &lt;code&gt;/posts/2015/09/abcd/&lt;/code&gt; 等同於 &lt;code&gt;/posts/2015/09/abcd-my-post/&lt;/code&gt; 比較好分享。找了一下好像沒這功能，不過沒有它影響也不嚴重，暫且不理。&lt;/p&gt;
&lt;h3 id="all-is-about-the-theme"&gt;All is about the theme&lt;/h3&gt;
&lt;p&gt;一開始最花時間就是找個好主題了。內建的主題實用性不差，但初次看結構太複雜，再來我喜歡更簡潔的版面，也希望有寫好 responsive layout。&lt;/p&gt;
&lt;p&gt;Pelican 大部份的主題都集中在 &lt;a href="http://pelicanthemes.com/"&gt;http://pelicanthemes.com/&lt;/a&gt;，有縮圖很好挑選，而且 theme 跟內容是分開的，換 theme 只是改 config 裡 &lt;code&gt;THEME&lt;/code&gt; 這變數而已，不喜歡就換。選了一陣子挑到 &lt;a href="https://github.com/alexandrevicenzi/flex"&gt;Flex&lt;/a&gt;，他不是我最喜歡的版型，我比較喜歡單欄式置中，但意外只有少數主題滿足上述條件。&lt;/p&gt;
&lt;p&gt;Theme template 用 Jinja2，一開始只要調整 &lt;code&gt;base&lt;/code&gt;、&lt;code&gt;index&lt;/code&gt;、&lt;code&gt;article&lt;/code&gt;、&lt;code&gt;page&lt;/code&gt; 這幾頁跟 blog 最相關的就能改變主要的外觀。好在兩欄式的網頁 code 讀起來也很舒適。看了一下只要把 responsive 調整一下，讓手機內文寬度夠、很大的螢幕不要滿版整體看起來就差不多。大致上 theme 就這樣定下來了。&lt;/p&gt;
&lt;p&gt;細部的 CSS 修正，Flex 有用 &lt;a href="http://lesscss.org/"&gt;LESS&lt;/a&gt; 和 &lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt; 處理前端的設定。LESS 變數跟 nesting rules 不會讓 CSS 變得很髒；每次改完跑個 gulp 就有新的 &lt;code&gt;style.min.css&lt;/code&gt; 很方便。&lt;/p&gt;
&lt;p&gt;唯一討厭左側的大頭照，有夠煩的，而且還要增加 54KB 的流量。還再想該放什麼來關掉它，放初音好了。&lt;/p&gt;
&lt;h3 id="_1"&gt;字型&lt;/h3&gt;
&lt;p&gt;因為自用 OSX，有時候都會忘了在 Windows 上的字體有多悲哀。&lt;/p&gt;
&lt;p&gt;Flex 內建用 Google webfont 來處理英文字體，為了引言還有完整性多加了一組 serif 字體 &lt;a href="https://www.google.com/fonts/specimen/Crimson+Text"&gt;Crimson Text&lt;/a&gt;。我喜歡這種 Garamond 類的古典襯線字。剛剛發現它是&lt;a href="https://github.com/skosch/Crimson"&gt;開源的 (SIL 1.1)&lt;/a&gt;，nice。（大陸網友表示：……）&lt;/p&gt;
&lt;h4 id="webfont"&gt;中文 webfont&lt;/h4&gt;
&lt;p&gt;麻煩的就是中文字型。直接放棄系統內建，但最後有把 Noto Sans CJK 和 Source Hans Sans 加進來當備用。一直都有想嘗試 &lt;a href="http://justfont.com"&gt;justfont&lt;/a&gt; 推出的 webfont 功能。它運作時會嵌入一個 javascript，看這頁網頁用到哪些中文字，才去要這些中文字的字型來加速載入。使用上就跟 Google webfont 一樣，官網教學考慮了很多使用情況，其實沒做什麼設定就好了，我以為要調很多東西才看得到效果，最後只改了 &lt;code&gt;font-family&lt;/code&gt; 就完工。他的設定也能保留原本英文字的字型。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/blog-internals/pics/justfont_setting.png"/&gt;
  &lt;p class="caption center"&gt;&lt;span class="fig"&gt;Justfont 設定&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;免費的試用沒問題之後就刷下去了。說真的免費只能綁兩個字型，設定好內文以及內文粗體 quota 就用完了，現在 100,000 page views/year 大約 NTD 350/year 也不貴。既然付費了當然要試試信黑體，電腦版的到現在還買不起啊。設了兩個字重，一樣加了一套楷體當引言用。楷體也選了比較秀氣的 cwTeX 楷。&lt;/p&gt;
&lt;p&gt;也許未來會試試看仿宋體，但我有點擔心螢幕顯示的效果（用 Retina 表示解析度無感），而且 justfont 提供的（仿）宋體也沒有比信黑體更喜歡，這實驗暫且擱置。&lt;/p&gt;
&lt;h4 id="_2"&gt;中文排版&lt;/h4&gt;
&lt;p&gt;受到 COSCUP 2015 Bobby Tung 給的演講&lt;a href="http://www.slideshare.net/bobby3302/w3c-51661297"&gt;《中文排版需求以及我在W3C看到的事情》&lt;/a&gt;所感召，覺得如果自己不一開始好好做網頁中文排版，之後肯定更懶得改。&lt;/p&gt;
&lt;p&gt;但最後還是有所妥協啦（跪）。&lt;/p&gt;
&lt;p&gt;首先段落前後還是有留白，這主要是兼顧英文排版，因為不知道怎麼在不同語言套不同的版型，英文段落是前後留大間距。再來我在純文字的時候也很習慣段落前後空一行，感覺視覺上這樣比較舒適（也許是行高不夠……）。 &lt;del&gt;&lt;code&gt;margin&lt;/code&gt; 也是設為 &lt;code&gt;1em&lt;/code&gt;。&lt;/del&gt;（EDIT: 見文末）&lt;/p&gt;
&lt;p&gt;段落首行縮排最後也沒有放，主因是文句都蠻短的，有點怪；再來 markdown parser 會把我的全形空白吃掉，難以理解（但 rst 不會），真要加只能用&lt;code&gt;&amp;amp;#x3000;&lt;/code&gt;硬加。中英交雜的段落中文字會無法對齊，不過就暫時算了，現在中英文的字重能一樣已經很感動了。&lt;/p&gt;
&lt;p&gt;300 的中文字的確有點細，我把字調大了成 18px，還特別拿給我爸媽看，確定他們看得到這些字 XD &lt;/p&gt;
&lt;p&gt;做到這裡其實還蠻滿意了，長得像這樣：&lt;/p&gt;
&lt;div class="figure align-center" style="width: 250px"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/blog-internals/pics/blog_mobile.png"/&gt;
  &lt;p class="caption center"&gt;&lt;span class="fig"&gt;手機上的樣子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/blog-internals/pics/blog_desktop.png"/&gt;
  &lt;p class="caption center"&gt;&lt;span class="fig"&gt;電腦螢幕的樣子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id="figure-caption"&gt;Figure caption&lt;/h3&gt;
&lt;p&gt;圖的下面還蠻常會放一些圖說、reference 之類。範例上面就有。在 markdown 不容易達成這效果，因為它的語法沒這麼複雜；但 rst 本來就有支援這樣的語法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; fig

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; {filename}pics.jpg
    &lt;span class="nc"&gt;:align:&lt;/span&gt; center

    &lt;span class="na"&gt;:fig:&lt;/span&gt;&lt;span class="nv"&gt;`Figure 1:`&lt;/span&gt; The figure caption.

    The legend consists of all elements after the caption.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就會變成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;figure align-center&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{filename}pics.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;caption&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Figure 1:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; The figure caption&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;legend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The legend consists of all elements after the caption.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 markdown 基本上就手打上面那一串 HTML，其實也還好，只是醜了一點。真的寫得很煩時再想寫 plugin 來做這件事。&lt;/p&gt;
&lt;h3 id="markdown-or-rst"&gt;Markdown or rst?&lt;/h3&gt;
&lt;p&gt;日常的編輯應該還是以 markdown 為主，看看精美的 &lt;a href="http://macdown.uranusjr.com/"&gt;Macdown&lt;/a&gt; 編輯器如此好用。但如果是很複雜的檔案（分析有公式有圖表什麼的）可能就會考慮 rst；rst 缺點就是語法有點複雜，而且很多語法仰賴句中空白，使得不適用中文，然後我的 vim linter 會一直抱怨它有很多沒看過的 directives。&lt;/p&gt;
&lt;p&gt;不過很高興 Pelican 把兩者整合的很好，兩個都能用就能視情況轉換，但 template 也不用寫兩份。&lt;/p&gt;
&lt;h3 id="to-do"&gt;To do&lt;/h3&gt;
&lt;p&gt;這之外還加上了 LaTeX MathJax、Smartypants 等小細節，不過整體來說 blog 客製化就完成了。也許未來用到什麼再加吧。&lt;/p&gt;
&lt;p&gt;目前想到的一些問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;標題字重：本來是跟內文同字重，但感覺長文會抓不到段落，先改成粗體，希望短文不要因為這樣變得很混亂。&lt;/li&gt;
&lt;li&gt;Jupyter notebook include：還沒有試直接嵌入 nb 的功能，我想應該也是調整 CSS 那類的工（前端好累好難啊…）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="(https://github.com/getpelican/pelican-plugins)"&gt;Pelican plugin&lt;/a&gt; 裡面包含了很多樣的套件，我猜很多遇到的問題，前人都解掉了吧？……吧 xdd&lt;/p&gt;
&lt;h3 id="edit-2015-09-22"&gt;EDIT (2015-09-22)&lt;/h3&gt;
&lt;p&gt;看來看去，又調整了很多東西。&lt;/p&gt;
&lt;p&gt;首先，字體大小調小成 16px 又調回 18px。會選擇 16px 是因為我發現在 13&amp;#34; 筆電上閱讀會變得很擠。調回來是因為在大螢幕上看真的太小了，自己都需要放大來看。而且發現本來 13&amp;#34; 上很擠的問題並不是字體，而是一行文字的字數。&lt;/p&gt;
&lt;p&gt;一行文字太多會影響到閱讀的效率。PTT 一行最多 39 個中文字，但應該很少文章是打滿的，大約都打個五到八成寬，也就是在 20-32 個中文字。英文的話大約在 12-15 個字。我自己調了很多版本也差不多是這個數字。&lt;/p&gt;
&lt;p&gt;所以理想的文章寬度要滿足中、英文的字數。中文字寬度是固定的，所以在決定一行有多少個中文字之後，就要想辦法調整英文字體讓一行英文字數剛好。原本使用的 Source Pro Sans 稍微窄了一點，會讓純英文的頁面看起來有點擠，字重 400 的時候就好多了，但中文就變得不適合內文。最後換成 Lato，也是很普及的字體，不過其實沒寬多少。如果還是覺得很擠就只好換成 Open Sans 了，但我覺得它就有點鬆散。&lt;/p&gt;
&lt;p&gt;最後內文寬 738px (41em) 或 828px (46em)，實際一行最大為 612px (34em)。一行最多 34 個中文字、大約 14 個英文字（80 個字元）；程式碼一行最多只能放 74 個字元，短了一點點但還可以接受。&lt;/p&gt;
&lt;p&gt;意外的小發現，在內文變窄之後，還可以加上右側的 sidenote，像是 &lt;a href="http://www.daveliepmann.com/tufte-css/"&gt;Tufte CSS&lt;/a&gt; 這樣，有時會比 footnote 好用，但可能又變回內容太擠的狀態。&lt;/p&gt;
&lt;p&gt;最後是在段落前後距離調整，把標題接內文的間距變小了，但段落間的間距調大。學到了一些以前不會的 CSS 語法，像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代表選取相鄰的 p 元素，這樣可以避免直接改 p 的 margin 讓 p 與 h&lt;em&gt;、ul、pre 等間距太寬的狀況。&lt;/em&gt;&lt;em&gt;前端真的太神妙了。&lt;/em&gt;*&lt;/p&gt;
&lt;h3 id="edit-2015-09-23"&gt;EDIT (2015-09-23)&lt;/h3&gt;
&lt;p&gt;另外 smartypants 有時候有點煩，像是表達 13 吋時&lt;/p&gt;
&lt;p class="center"&gt;&lt;span style="font-size: 4em; line-height: 1em;"&gt;13" vs 13&amp;#34;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;不把 &lt;code&gt;"&lt;/code&gt;（QUOTATION MARK &lt;code&gt;\u0022&lt;/code&gt;）直接寫成 &lt;code&gt;&amp;amp;#34;&lt;/code&gt; 就會被轉換成左邊那樣 &lt;code&gt;”&lt;/code&gt;（RIGHT DOUBLE QUOTATION MARK &lt;code&gt;\u201D&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;也把表格的格式加上，仿造 bootstrap 表格 overflow 時會變成 block 可以滑動著看。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;以前部落格的長相：
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/blog-internals/pics/oldsite.png"/&gt;
&lt;/div&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="pelican"></category><category term="blog"></category><category term="python"></category></entry></feed>