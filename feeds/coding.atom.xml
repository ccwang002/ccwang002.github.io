<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Liang-Bo Wang's Blog - Coding</title><link href="https://blog.liang2.tw/" rel="alternate"></link><link href="https://blog.liang2.tw/feeds/coding.atom.xml" rel="self"></link><id>https://blog.liang2.tw/</id><updated>2022-02-18T19:58:57-06:00</updated><entry><title>Make Firefox fullscreen borderless on macOS</title><link href="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/" rel="alternate"></link><published>2018-12-13T00:00:00-06:00</published><updated>2021-06-09T10:01:15-05:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2018-12-13:/posts/2018/12/firefox-borderless-fullscreen-macos/</id><summary type="html">&lt;p&gt;EDIT 2021-06-01: In Firefox 89+, there&amp;rsquo;s a default option &amp;ldquo;Hide Toolbar&amp;rdquo; in the fullscreen mode that automatically hides the toolbar. So the customization is no longer needed.&lt;/p&gt;
&lt;p&gt;Firefox fullscreen on macOS by default contains the address bar and the tab bar. I usually don&amp;rsquo;t really need the full …&lt;/p&gt;</summary><content type="html">&lt;p&gt;EDIT 2021-06-01: In Firefox 89+, there&amp;rsquo;s a default option &amp;ldquo;Hide Toolbar&amp;rdquo; in the fullscreen mode that automatically hides the toolbar. So the customization is no longer needed.&lt;/p&gt;
&lt;p&gt;Firefox fullscreen on macOS by default contains the address bar and the tab bar. I usually don&amp;rsquo;t really need the full vertical space for web page, so those bars aren&amp;rsquo;t a problem. But when I access a RStudio Server on Firefox, I always want to have more vertical space. As shown in the screenshot below, the address bar and the tab bar of Firefox are unnecessary, and they may be quite distracting. If those bars are hidden and only show up upon request when Firefox enters fullscreen, the vertical space can be saved and the interface will remain clean.&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/rstudio_fullscreen.png"&gt;
  &lt;p class="caption"&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;It turns out that Firefox controls its user interface styling using CSS. So we can set the shape of the window tabs, the height of the address bar, and more by adding a CSS file at &lt;code&gt;~/Library/Application Support/Firefox/Profiles/&amp;lt;profile&amp;gt;/chrome/userChrome.css&lt;/code&gt;. In Firefox 69+, we need to set &lt;code&gt;toolkit.legacyUserProfileCustomizations.stylesheets=true&lt;/code&gt; in &lt;code&gt;about:config&lt;/code&gt; to enable the CSS styling (&lt;a href="https://www.userchrome.org/how-create-userchrome-css.html"&gt;more details here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My modification was based on &lt;a href="https://apple.stackexchange.com/a/313241"&gt;this answer on Stack Exchange&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;navigator-toolbox&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;inFullscreen&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;-0.5&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;navigator-toolbox&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;inFullscreen&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;navigator-toolbox&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;inFullscreen&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;focus-within&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/*&lt;/span&gt;
&lt;span class="c"&gt;     * Add some padding between the navbar and the top screen edge&lt;/span&gt;
&lt;span class="c"&gt;     * to be more visible while the macOS hidden menu bar shows up.&lt;/span&gt;
&lt;span class="c"&gt;     * The macOS menubar will hide after a few seconds.&lt;/span&gt;
&lt;span class="c"&gt;     */&lt;/span&gt;
    &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the Firefox needs to be restarted to get the styling in effect. Here is how the Firefox fullscreen looks like after applying the &lt;code&gt;userChrome.css&lt;/code&gt; above.&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/rstudio_fullscreen.modified.png"&gt;
&lt;/div&gt;

&lt;p&gt;Now the RStudio Server web page feels like a native app, similar to what RStudio Desktop offers. Both address and tab bars are hidden by default, and when the mouse hovers to the top, they get visible again.&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;video auto autoplay loop&gt;
    &lt;source src="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_switch_tabs.webm" type="video/webm"&gt;
    &lt;source src="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_switch_tabs.mp4" type="video/mp4"&gt;
    Your browser doesn't support HTML5 video. You can still download the &lt;a href="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_switch_tabs.mp4"&gt;screencast&lt;/a&gt; and view it locally.
  &lt;/video&gt;
  &lt;p class="caption"&gt;Switch tabs in the borderless fullscreen of Firefox.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Those top bars will show up as well when they are in focus by shortkeys. For example, ⌘ + L will get focus on the address bar. It is useful when I want to launch a quick search in a new tab.&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;video controls&gt;
    &lt;source src="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_focus.webm" type="video/webm"&gt;
    &lt;source src="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_focus.mp4" type="video/mp4"&gt;
    Your browser doesn't support HTML5 video. You can still download the &lt;a href="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_focus.mp4"&gt;screencast&lt;/a&gt; and view it locally.
  &lt;/video&gt;
  &lt;p class="caption"&gt;Address bar is shown automatically when it is focused using shortkey.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In &lt;code&gt;userChrome.css&lt;/code&gt;, I added a small padding between the bars and the top border to make them more accessible by mouse. When the mouse moves to the top, macOS&amp;rsquo;s menu bar will pop up as well, and both Firefox and macOS will overlap. The macOS one will go away first, but the mouse has to stay on the Firefox bars so they don&amp;rsquo;t disappear either.&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;video controls&gt;
    &lt;source src="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_hover_for_menubar.webm" type="video/webm"&gt;
    &lt;source src="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_hover_for_menubar.mp4" type="video/mp4"&gt;
    Your browser doesn't support HTML5 video. You can still download the &lt;a href="https://blog.liang2.tw/posts/2018/12/firefox-borderless-fullscreen-macos/pics/fullscreen_hover_for_menubar.mp4"&gt;screencast&lt;/a&gt; and view it locally.
  &lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;The overlapping of Firefox bars and macOS menubar is still a bit annoying, which will require some practice to navigate between them by mouse. I will probably rely more on the shortkeys instead. Anyway, I now have more vertical space and the modification of &lt;code&gt;userChrome.css&lt;/code&gt; works fine for now.&lt;/p&gt;
&lt;p&gt;For more information about modifying the Firefox user interface, there is &lt;a href="https://www.userchrome.org/"&gt;a website&lt;/a&gt; that introduces &lt;code&gt;userChrome.css&lt;/code&gt; in depth.&lt;/p&gt;
&lt;h3 id="notes-for-screencast-encoding"&gt;Notes for screencast encoding&lt;/h3&gt;
&lt;p&gt;I modified the command from my &lt;a href="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/"&gt;previous post&lt;/a&gt; to shrink the file size of the original QuickTime screencasts using FFmpeg. More encoding parameters can be found at FFmpeg&amp;rsquo;s wiki (&lt;a href="https://trac.ffmpeg.org/wiki/Encode/VP9"&gt;VP9&lt;/a&gt; and &lt;a href="https://trac.ffmpeg.org/wiki/Encode/H.264"&gt;H.264&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# VP9 (WEBM)&lt;/span&gt;
ffmpeg -i fullscreen_switch_tabs.mov &lt;span class="se"&gt;\&lt;/span&gt;
    -vcodec libvpx-vp9 -b:v 200K &lt;span class="se"&gt;\&lt;/span&gt;
    -pass &lt;span class="m"&gt;1&lt;/span&gt; -an -r &lt;span class="m"&gt;24&lt;/span&gt; -f webm /dev/null
ffmpeg -i fullscreen_switch_tabs.mov &lt;span class="se"&gt;\&lt;/span&gt;
    -vcodec libvpx-vp9 -b:v 200K &lt;span class="se"&gt;\&lt;/span&gt;
    -pass &lt;span class="m"&gt;2&lt;/span&gt; -an -r &lt;span class="m"&gt;24&lt;/span&gt; fullscreen_switch_tabs.webm

&lt;span class="c1"&gt;# H.264 (MP4)&lt;/span&gt;
ffmpeg -i fullscreen_switch_tabs.mov &lt;span class="se"&gt;\&lt;/span&gt;
    -vcodec h264 &lt;span class="se"&gt;\&lt;/span&gt;
    -strict -2 -crf &lt;span class="m"&gt;40&lt;/span&gt; -preset slow -r &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    fullscreen_switch_tabs.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;EDIT 2020-06-13: Added extra &lt;code&gt;about:config&lt;/code&gt; settings in Firefox 69+ and fixed the styling. I also increased the top margin since the new address bar is taller.&lt;/p&gt;</content><category term="Coding"></category><category term="en"></category></entry><entry><title>GPG Key Transition</title><link href="https://blog.liang2.tw/posts/2018/10/gpg-key-transition-2018/" rel="alternate"></link><published>2018-10-20T00:00:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2018-10-20:/posts/2018/10/gpg-key-transition-2018/</id><summary type="html">&lt;p&gt;I am transiting my GPG key again.  However, for this time, I expect to use the new GPG master key longer and will start building this identity unless there is a concern about the key strength or I accidentally lose the key. &lt;/p&gt;
&lt;p&gt;Back in &lt;a href="https://blog.liang2.tw/posts/2016/12/gpg-key-transition-2016/"&gt;my GPG key transition in 2016 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am transiting my GPG key again.  However, for this time, I expect to use the new GPG master key longer and will start building this identity unless there is a concern about the key strength or I accidentally lose the key. &lt;/p&gt;
&lt;p&gt;Back in &lt;a href="https://blog.liang2.tw/posts/2016/12/gpg-key-transition-2016/"&gt;my GPG key transition in 2016&lt;/a&gt;, I&amp;rsquo;ve created the subkeys for daily usage and isolated the master key into a secret offline place. I learned more about PGP throughout the years, sadly though, I still seldom have a chance to use it extensively in my daily life. &lt;/p&gt;
&lt;p&gt;This time, I am moving the subkeys to a YubiKey. I found &lt;a href="https://github.com/drduh/YubiKey-Guide"&gt;drduh&amp;rsquo;s guide&lt;/a&gt; on GitHub very informative to set up both the GPG key and the yubikey, as well as get my hands on the various possible applications. Another notable change is that I no longer set an expiration date on my master key.&lt;/p&gt;
&lt;p&gt;I will revoke my old keys once the transition is done.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

I am transitioning GPG keys from an old 4096-bit RSA key to a new
4096-bit RSA key.  The old key will continue to be valid for some
time, but I prefer all new correspondance to be encrypted in the new
key, and will be making all signatures going forward with the new key.

This transition document is signed with both keys to validate the
transition.

The old key, which I am transitioning away from, is:

  pub   rsa4096/0x44D10E44730992C4 2016-12-04 [SC] [expires: 2018-12-04]
        Key fingerprint = 85DF A3EB 72CD DE7D 3F2A  127C 44D1 0E44 7309 92C4

The new key, to which I am transitioning to, is:

  pub   rsa4096/0x69BAE333BC4DC4BA 2018-10-17 [SC]
        Key fingerprint = 978B 49B8 EFB7 02F3 3B3F  F2E5 69BA E333 BC4D C4BA

To fetch the full new key from a public key server using GnuPG, run:

  gpg --recv-key 0x69BAE333BC4DC4BA

If you have already validated my old key, you can then validate that
the new key is signed by my old key:

  gpg --check-sigs 0x69BAE333BC4DC4BA

Please contact me via e-mail at &amp;lt;me@liang2.tw&amp;gt; if you have any
questions about this document or this transition.

                                            Liang-Bo Wang
                                            (liang2, ccwang002)
                                            me@liang2.tw
                                            Oct 20, 2018
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEExQ3ldlbp0O+Zc1vXBS+kcT+kX08FAlvLdGkACgkQBS+kcT+k
X092fw/8DFGIIMHtf3JAt8nGth8Y94oyTgrorqzu7TXCxvUiGk6Qd/WBLiMvh//9
7mVounqtPSGuYHiWm6gtDlT+YRoFoJH3IZ9aboMzd8e/p4TspKhXAsF5bhp6U9ED
HCds+VRoVBGPtO3Ogizl5wpynYp7OzwqgwTteFlJ167mmqL05n/xLHnsvii3UFO4
MWwWMxVmwvEpJINsYOJ+mFxOXeD23ckKt3GQh2NF2Dpa+apEvq5l9vjmk4Vnqau2
WKXygbz1Rm0b629dblV8vU9iwgIsSlXz8oopkETadpkaGk9s/p8AYPupmqfCiwHx
/gYlAgIV0DmePfOjYGZ0RJTVHFnG5ong3kUyoeuAwCMWLC/QQ6pCIL+pRnXOT1/q
oXCTK7HUUZjWpRyHf/ptHpQOeYH+AuYAYJNwQA3xjzv57kkGT/gR3Q4APmA6l5lN
swHVL63QYjcKCNm+fR7pr2ka50WSrerFyLWinAT9G9w+h/31Zcl0cBqEM45nlaye
B5fYaU/G6ehFxWgVEjS7z7FSLQVNJu7aAXVZy9QlKcduNXBUZsDkcDI1iyKVhvl4
41SNhLXMO2Jk69kHtuE803/aVgw8N3Y/E5zjlBNXWSpPMPFeKZl9W6eqnl50kQcd
fKbZGV8bxFl40iBi4mfIrdOXrBQ9Oohp7UVWTHG1qYMruVRmW3aJAjMEAQEKAB0W
IQS66Rw2AWA1VmCbiTP4R473V2p7VwUCW8t0bgAKCRD4R473V2p7V8DqD/9YpnFP
usbOW9p3GwUgbvqPdefLszFZZb5LNsgL9eTSKwMUTn5AGldFquDM3hbjiZ+e/nbD
TwFKbKRt//48R5UTYsYJVxcNVW3CXxMtl+8B5PJORfUbz0/HSEsnKTMlHP1M4ybw
gZCI45sP4wT1prU3ngkZGHJJY9ojNOCrzHA+DVEp+vROn/zyg6AbLcr0+/yjCHO0
pxDbGUgEOV93GFKXl85u7qCXUTrIt2fkeFeEQoh248oBJQHPjD9WyOV/O3QNdT7d
6g7lJcSSpwevtTsWFaWCxRM2IwHlXJiWU/9bA2Jrb8E07mJGlmil7xCe4rPFD69F
/y9MBfMG0KVjAFgs6vAR5zHnN865d18JCunQ4OhY0tDnhi4q3O0OdehGqyX92pwL
hMKtHRHLuhYoDud2kdxizmtov1bHghO0kKSTlDGhZvs9Fpod4MKQHaZx4VbpA8np
OpmPBkX7+34AmnLnJP2GOA4UhsRpX1iyqTaGePjhtA0gqz5285bL02JGx/m7HDtX
MYI4yoc3rdZz37axnRinWmW7Lu5JmQGeVLJZ7Z2b83BEHVnapXPW2kFp8PcqbNnA
Lbb9XLkbHNOaiC4EFm07uFmMVkV6aKW3xV1YIlDeovRfNC0cyZDnUNFqaDGtZAeO
UifqHyDqNjBJX0a8miUMZDOXsZFD2jzm3pjS/Q==
=JRPp
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Coding"></category><category term="en"></category><category term="gpg"></category></entry><entry><title>Changing login shell without chsh</title><link href="https://blog.liang2.tw/posts/2017/01/without-chsh/" rel="alternate"></link><published>2017-01-23T00:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2017-01-23:/posts/2017/01/without-chsh/</id><summary type="html">&lt;p&gt;For my daily terminal life, I use &lt;a href="https://fishshell.com/"&gt;fish shell&lt;/a&gt;. Fish shell can be largely described by the headline on its official website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Finally, a command line shell for the 90s&lt;/strong&gt;&lt;br&gt;
fish is a smart and user-friendly command line
shell for macOS, Linux, and the rest of the family.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Among all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For my daily terminal life, I use &lt;a href="https://fishshell.com/"&gt;fish shell&lt;/a&gt;. Fish shell can be largely described by the headline on its official website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Finally, a command line shell for the 90s&lt;/strong&gt;&lt;br&gt;
fish is a smart and user-friendly command line
shell for macOS, Linux, and the rest of the family.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Among all of its features, I particularly enjoy how the autocompletions are widely available and easy to use for generally all common commands and operations. I think I&amp;rsquo;ve got spoiled by the autocompletion so much that sometimes I get lazy at typing the full commands. Undoubtedly, fish is my login shell, replacing the ubiquitous Bash shell.&lt;/p&gt;
&lt;p&gt;Most of the time, one can change the login shell by the command &lt;code&gt;chsh&lt;/code&gt;. In order to let &lt;code&gt;chsh&lt;/code&gt; accept the new fish shell, it must be added into the list of all accepted shells which requires root permission. However, in many occasions including working on a large shared server, one may not has the permission to add new shell and thus the options for the login shell are often limited.  &lt;/p&gt;
&lt;h4 id="replacing-login-shell-by-exec"&gt;Replacing login shell by &lt;code&gt;exec&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Alternative solution will be calling the new shell upon the execution of current shell.  A POSIX-compliant shell&lt;sup id="fnref:posix"&gt;&lt;a class="footnote-ref" href="#fn:posix"&gt;1&lt;/a&gt;&lt;/sup&gt; should always read the &lt;code&gt;.profile&lt;/code&gt; configuration file upon login, the following command execute fish and sweep the process with the current running shell (usually, bash). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;exec&lt;/span&gt; -l &lt;span class="nv"&gt;$SHELL&lt;/span&gt; -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;-l&lt;/code&gt; tells shell to act like a login shell. For more explanation about login and non-login (as well as (non-)interactive) shells can be found at &lt;a href="http://unix.stackexchange.com/a/46856"&gt;this StackOverflow answer&lt;/a&gt;. By pointing &lt;code&gt;$SHELL&lt;/code&gt; to the desired shell binary, one can achieve the similar behavior to &lt;code&gt;chsh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However putting &lt;code&gt;exec&lt;/code&gt; in the login profile comes with a risk that if the new shell executable crashes (e.g. failed symlink, erroneous compilation and failed dynamic library linking), one cannot establish proper shell connections. I&amp;rsquo;ve experienced these catastrophic failures for a couple of times. Since the new shell crashes when the original shell is replacing its process, one cannot set up the proper terminal session, or simply put, one will fail to login. It was not fun at all to recover.&lt;/p&gt;
&lt;h4 id="fail-safe-shell-changing"&gt;Fail-safe shell changing&lt;/h4&gt;
&lt;p&gt;To provide a fail-safe mechanism, I use the following code in my &lt;code&gt;~/.profile&lt;/code&gt; to change the shell. Only login shells will read this file so it won&amp;rsquo;t be executed when one runs a bash script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;FISH_BIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.linuxbrew/bin/fish&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# The replacement is only done in non-fish login interactive shell in&lt;/span&gt;
&lt;span class="c1"&gt;# SSH connection and fish executable exists.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;                                                            &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FISH_BIN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -a -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$SSH_TTY&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -a -x &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FISH_BIN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c1"&gt;# we first check whether fish can be executed, otherwise the&lt;/span&gt;
    &lt;span class="c1"&gt;# replacement will cause immediate crash at login (not fun)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FISH_BIN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -c &lt;span class="s1"&gt;&amp;#39;echo &amp;quot;Test fish running&amp;quot; &amp;gt;/dev/null&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;SHELL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$FISH_BIN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;One can launch the fish shell by &amp;#39;exec -l \$SHELL -l&amp;#39;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# exec -l $SHELL -l   # launch the fish login shell&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Failed to launch fish shell. Go check its installation!&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fall back to default shell &lt;/span&gt;&lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="s2"&gt; ...&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically we ensure whether fish executable work by running &lt;code&gt;echo '...'&lt;/code&gt; before we change the shell. By uncommenting the &lt;code&gt;exec ..&lt;/code&gt; line one will get automatically directed to fish shell. But the safest option is to run the shell change oneself. This kind of &amp;ldquo;shell swapping&amp;rdquo; will only happen when we log in the server by ssh&lt;/p&gt;
&lt;p&gt;The actual setting is quite straight-forward. While the backstory here is that I messed up a few times and I was lucky enough to keep another session alive. At first I only checked &lt;code&gt;fish --version&lt;/code&gt; but it was not sufficient, since it didn&amp;rsquo;t actually execute fish&amp;rsquo;s main code instructions. I got a illegal instruction after changing to fish even though printing its version was fine.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:posix"&gt;
&lt;p&gt;Interestingly, fish is not a POSIX-compliant shell so it won&amp;rsquo;t read &lt;code&gt;~/.profile&lt;/code&gt; configuration file.&amp;#160;&lt;a class="footnote-backref" href="#fnref:posix" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="en"></category><category term="fish"></category><category term="shell"></category></entry><entry><title>GPG Key Transition</title><link href="https://blog.liang2.tw/posts/2016/12/gpg-key-transition-2016/" rel="alternate"></link><published>2016-12-06T00:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-12-06:/posts/2016/12/gpg-key-transition-2016/</id><summary type="html">&lt;p&gt;I started using GPG key as one of my small experiments in March, 2015. Throughout the setup, I made some mistakes, which I revoked later, and explored several usage scenarios. Although like what was said in the post &lt;a href="https://blog.filippo.io/giving-up-on-long-term-pgp/"&gt;&lt;em&gt;I&amp;rsquo;m giving up on PGP&lt;/em&gt;&lt;/a&gt;, I don&amp;rsquo;t really use the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I started using GPG key as one of my small experiments in March, 2015. Throughout the setup, I made some mistakes, which I revoked later, and explored several usage scenarios. Although like what was said in the post &lt;a href="https://blog.filippo.io/giving-up-on-long-term-pgp/"&gt;&lt;em&gt;I&amp;rsquo;m giving up on PGP&lt;/em&gt;&lt;/a&gt;, I don&amp;rsquo;t really use the encryption in daily email communication, it is still good to have an online identity.&lt;/p&gt;
&lt;p&gt;A year later, which is 3 months before my &lt;em&gt;experimental&lt;/em&gt; key expires, I think now is a good time to roll out a new one. I followed Alex&amp;rsquo;s post &lt;a href="https://alexcabal.com/creating-the-perfect-gpg-keypair/"&gt;&lt;em&gt;Creating the Perfect GPG Keypair&lt;/em&gt;&lt;/a&gt; to create a signing subkey for daily usage and keep my master key sperately in a safe place. The following is my transition statement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

I am transitioning GPG keys from an old 4192-bit RSA key to a new
4096-bit RSA key.  The old key will continue to be valid for some
time, but I prefer all new correspondance to be encrypted in the new
key, and will be making all signatures going forward with the new key.

This transition document is signed with both keys to validate the
transition.

If you have signed my old key, I would appreciate signatures on my new
key as well, provided that your signing policy permits that without
reauthenticating me.

The old key, which I am transitioning away from, is:

  pub   4096R/30A45011B233544E 2015-03-21 [expires: 2017-03-22]
      Key fingerprint = 6ECD C5B8 235C D44D 2471  866E 30A4 5011 B233 544E

The new key, to which I am transitioning to, is:

  pub   4096R/44D10E44730992C4 2016-12-04 [expires: 2018-12-04]
      Key fingerprint = 85DF A3EB 72CD DE7D 3F2A  127C 44D1 0E44 7309 92C4

To fetch the full new key from a public key server using GnuPG, run:

  gpg --keyserver hkps://hkps.pool.sks-keyservers.net --recv-key 44D10E44730992C4

If you have already validated my old key, you can then validate that
the new key is signed by my old key:

  gpg --check-sigs 44D10E44730992C4

If you then want to sign my new key, a simple and safe way to do that
is by using caff (shipped in Debian as part of the &amp;quot;signing-party&amp;quot;
package) as follows:

  caff 44D10E44730992C4

Please contact me via e-mail at &amp;lt;me@liang2.tw&amp;gt; if you have any
questions about this document or this transition.

                                            Liang-Bo Wang
                                            (liang2, ccwang002)
                                            me@liang2.tw
                                            Dec 06, 2016

-----BEGIN PGP SIGNATURE-----

iQIcBAEBCgAGBQJYR5q3AAoJEPhHjvdXantXlzEP/iEgSd2NcfcBThmrY84U+MXR
UOLED3Ax6YvDUv/nInkMAH74SyqujeF7E7+ZuZmDEWRCVS6pQtpuLTvKBviDPyWx
W/hS03AU5nV9llSYZ4I/FzQdVtdY5PBBNCHxK34LoqJQVr3LPdAQOO2m9g8M11z0
+7FjmyNOjvZIxqhU+PK7VNEcZQ9X30ndjgkwCZQFE/8Wz9FnPt5QdwZoxNRBfx7Q
tMtHpMxKNTHV1t3lCcOubf5zQLFQ07SZv2f2rmfDPlsrvzp4bzq8QWEEo/XvClRc
hyFpbM55FqlJE+5lg/Dj/XC5AN0LS8HNd9x7UBWZnNQhg00elc+CXxgNc+wMVj+N
uPXYP2n1oZ4T4Fr45eFg9nJagBpIUsu+M5hoNGXtCdLcYPzJeERPebt/VZJQybse
T60hO8K15A5WCkZYnw1mXu/JangNGY8Bxq3xm7VzXHLJktf33gIIMUQC2ZCn/I0N
MQIjkMrARFpsGfb1DEglyWk/QdK4A8Cy3eKsNaKvz4A+PMr4Eskn8zhO05yJQlux
3IkXt1lnn2YTF5fjInYQPo22bNCuub4qoJhthOoySy2Zv04NHnOtmYPBZMv14aZe
MPcv4Kvn8szNeBRDT/zKqCWoHmxIbxIs7ZvSIfvj/NpugtkSkJVtvr7gpXmqObcc
L7kJSEXjkLiqvFrq6MkxiQIcBAEBCgAGBQJYR5q3AAoJEDCkUBGyM1ROlzEQAJ3i
gpH6z/rHrAVCNxru7ATLmVZYGF0uxLvth0hUnOvmhWb7a60v4KwRgTBFJ9vdUB24
MW0T0BdxN8zJPrN6hGj9RxML5UpzH///oeL1gINM8IEhZWaG1/th7bx5f/ip8xN+
dbkA8Hp3LW/LAB09uJOITLbLaPa+N2Umcsu6stPXL+Z/06JSUYIliDRDkzzpb/qw
/OZD6sj1oI25A7KYEUPiNn+FxtBmNiFetDqwhCJSglEF3SBl8ZlrbgMDxIudZX/5
+ihTn2Za5q59c7u2ESMmInP1n8/lFxYxi/DWE2n8vrw84PwQ5lG5zdiiYQf78QeB
j77giQzYibzvRHZlslJEM0lSeNLQ72svT5SIFB+45wqtfVIAfZCxTppv35MkpyDw
gtYW/zL6U+Qx+chPgVpBLkpC7LbBvrJozIU0oHw8V837IByaeqBPu9rm+F3M++Mo
taLmkzNvhX6wozw9Tj0gnW6e8ytH7Xi8K8IYO7xSSOGih/oKF2PrWPd8gufMiIML
lOtcuwZOCQqAB2yAQ2BHliwrm78XELARZXM1sbWJTpXBJPAZ+ZbvnNFK6fUwnclK
H35TsvRJK7hH+4d10EdURleyRj7d0EcXlHqki4urKlwSzRebLzq365vADzXEjFYp
DmfC2ISS64uLqHgJ3HHxhSmTLdc8KSJqzFi90ZUu
=JS7v
-----END PGP SIGNATURE-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Coding"></category><category term="en"></category><category term="gpg"></category></entry><entry><title>使用 conda env 部署 Django</title><link href="https://blog.liang2.tw/posts/2016/05/django-deploy-conda/" rel="alternate"></link><published>2016-05-24T00:00:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-05-24:/posts/2016/05/django-deploy-conda/</id><summary type="html">&lt;p&gt;沒幾天前剛部署一次 Django，記錄在&lt;a href="https://blog.liang2.tw/posts/2016/05/django-deploy-uwsgi-nginx-systemd/"&gt;《使用 uWSGI、nginx、systemd 部署 Django》&lt;/a&gt;。今天又部署了另一個專案。部署的設定跟上次一樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nginx -- unix socket -- uWSGI -- Django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一樣寫 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;沒幾天前剛部署一次 Django，記錄在&lt;a href="https://blog.liang2.tw/posts/2016/05/django-deploy-uwsgi-nginx-systemd/"&gt;《使用 uWSGI、nginx、systemd 部署 Django》&lt;/a&gt;。今天又部署了另一個專案。部署的設定跟上次一樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nginx -- unix socket -- uWSGI -- Django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一樣寫一個 &lt;code&gt;PROJ.service&lt;/code&gt; 的 systemd unit 來管理網站的啟動 (uWSGI)。之後提到 &lt;code&gt;PROJ&lt;/code&gt; 時就換成自己的專案名稱；&lt;code&gt;USER&lt;/code&gt; 就換成執行網站的帳號。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#conda"&gt;conda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uwsgi-path"&gt;uWSGI 和 $PATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sysmted-unit"&gt;在 sysmted unit 使用環境變數&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;結論&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="conda"&gt;conda&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://conda.pydata.org/"&gt;conda&lt;/a&gt; 是一個 Python 套件的管理系統，他的好處是，遇到要使用外部 library 時，會這些套件相依的 library 都一併安裝管理，也可以管理不同 Python 版本。可以想像是加強版的 pip + venv。conda 跟 pip 是相容的。&lt;/p&gt;
&lt;p&gt;這個 Django 專案就用到很多像 numpy、pandas 的套件。為了維護方便，我考慮用 conda 來安裝。我使用的是 &lt;a href="http://conda.pydata.org/miniconda.html"&gt;miniconda3&lt;/a&gt;，預設會安裝在 &lt;code&gt;~/miniconda3&lt;/code&gt; 底下，虛擬環境會出現在 &lt;code&gt;~/miniconda3/envs/&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ conda create -n VENV &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.5 numpy pandas django
$ &lt;span class="nb"&gt;source&lt;/span&gt; activate VENV
&lt;span class="o"&gt;(&lt;/span&gt;VENV&lt;span class="o"&gt;)&lt;/span&gt; $ pip install uwsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;uWSGI 沒有在 conda 裡面，所以就用 pip 裝。從&lt;a href="https://blog.liang2.tw/posts/2016/05/django-deploy-uwsgi-nginx-systemd/"&gt;上次的文章&lt;/a&gt;知道系統並不用安裝。&lt;/p&gt;
&lt;h3 id="uwsgi-path"&gt;uWSGI 和 $PATH&lt;/h3&gt;
&lt;p&gt;理論上，之後就照著上次操作就好，但在 uWSGI 就碰到問題：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;$ sudo /home/USER/miniconda3/envs/VENV/bin/uwsgi --ini PROJ.ini&lt;/span&gt;
&lt;span class="go"&gt;[uWSGI] getting INI configuration from PROJ.ini&lt;/span&gt;
&lt;span class="go"&gt;*** Starting uWSGI 2.0.13.1 (64bit) on [Wed May 25 08:04:23 2016] ***&lt;/span&gt;
&lt;span class="go"&gt;compiled with version: 5.3.1 20160413 on 25 May 2016 01:35:28&lt;/span&gt;
&lt;span class="go"&gt;os: Linux-4.4.0-22-generic #40-Ubuntu SMP Thu May 12 22:03:46 UTC 2016&lt;/span&gt;
&lt;span class="go"&gt;nodename: s66&lt;/span&gt;
&lt;span class="go"&gt;machine: x86_64&lt;/span&gt;
&lt;span class="go"&gt;clock source: unix&lt;/span&gt;
&lt;span class="go"&gt;detected number of CPU cores: 24&lt;/span&gt;
&lt;span class="go"&gt;current working directory: /etc/uwsgi/vassals&lt;/span&gt;
&lt;span class="go"&gt;detected binary path: /home/USER/miniconda3/envs/VENV/bin/uwsgi&lt;/span&gt;
&lt;span class="go"&gt;……&lt;/span&gt;
&lt;span class="go"&gt;chdir() to /path/to/PROJ/&lt;/span&gt;
&lt;span class="go"&gt;your processes number limit is 514650&lt;/span&gt;
&lt;span class="go"&gt;your memory page size is 4096 bytes&lt;/span&gt;
&lt;span class="go"&gt;detected max file descriptor number: 1024&lt;/span&gt;
&lt;span class="go"&gt;lock engine: pthread robust mutexes&lt;/span&gt;
&lt;span class="go"&gt;thunder lock: disabled (you can enable it with --thunder-lock)&lt;/span&gt;
&lt;span class="go"&gt;uwsgi socket 0 bound to UNIX address /run/PROJ/django.sock fd 3&lt;/span&gt;
&lt;span class="go"&gt;Python version: 3.5.1 |Continuum Analytics, Inc.| (default, Dec  7 2015, 11:16:01)  [GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]&lt;/span&gt;
&lt;span class="go"&gt;Set PythonHome to /home/USER/miniconda3/envs/VENV&lt;/span&gt;
&lt;span class="go"&gt;Failed to import the site module&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span class="nb"&gt;&amp;quot;/usr/lib/python3.5/site.py&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;580&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gr"&gt;  …… &lt;/span&gt;
&lt;span class="gr"&gt;  File &amp;quot;/usr/lib/python3.5/_sysconfigdata.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="gr"&gt;    from _sysconfigdata_m import *&lt;/span&gt;
&lt;span class="gr"&gt;ImportError&lt;/span&gt;: &lt;span class="n"&gt;No module named &amp;#39;_sysconfigdata_m&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但因為步驟實在太簡單，想不出來哪裡有錯，查網路也沒什麼相關的結果。在這邊卡了很久。&lt;/p&gt;
&lt;p&gt;結果後來才發現，Traceback 那邊 uWSGi 跑去讀到 &lt;code&gt;/usr/lib/python3.5/site.py&lt;/code&gt;，這表示一定有環境設錯才讓它找到這個不是我們要的 python 環境，理論上應該是找到 &lt;code&gt;/home/USER/miniconda3/envs/VENV/lib/python3.5/site.py&lt;/code&gt; 才對。&lt;/p&gt;
&lt;p&gt;經過一陣嘗試，發現只要修改 &lt;code&gt;$PATH&lt;/code&gt; 環境變數就能運作了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo -i
&lt;span class="gp"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="go"&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/USER/miniconda3/envs/VENV/bin:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;/home/USER/miniconda3/envs/VENV/bin/uwsgi --ini PROJ.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="sysmted-unit"&gt;在 sysmted unit 使用環境變數&lt;/h3&gt;
&lt;p&gt;根據 &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#%24PATH"&gt;systemd.exec(5)&lt;/a&gt; 關於 &lt;code&gt;$PATH&lt;/code&gt; 環境變數的使用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Colon-separated list of directories to use when launching executables. Systemd uses a fixed value of /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;預設只有以上提到的路徑，如果要修改環境變數的話，就透過 &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Environment="&gt;&lt;code&gt;Environment=&lt;/code&gt;&lt;/a&gt;，因此多加了一行在 systemd unit 裡。其餘的設定都是相同的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[Unit]
Description=PROJ Django server by uWSGI
After=syslog.target

[Service]
Environment=&amp;quot;PATH=/home/USER/miniconda3/envs/VENV/bin:$PATH&amp;quot;
ExecStart=/home/USER/miniconda3/envs/VENV/bin/uwsgi --ini /etc/uwsgi/vassals/PROJ.ini
Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;結論&lt;/h3&gt;
&lt;p&gt;如果要改用 conda 管理套件的話，只要在 systemd unit 那邊多加一行修改 $PATH，加入虛擬環境放執行檔的路徑，其餘的設定都與一般 Python 虛擬環境相同。這樣就搞定了。但這個問題花了我 1 個多小時……&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category><category term="python"></category><category term="django"></category><category term="postgresql"></category><category term="deploy"></category><category term="debian"></category><category term="systemd"></category><category term="nginx"></category><category term="uwsgi"></category><category term="conda"></category></entry><entry><title>使用 uWSGI、nginx、systemd 部署 Django</title><link href="https://blog.liang2.tw/posts/2016/05/django-deploy-uwsgi-nginx-systemd/" rel="alternate"></link><published>2016-05-19T00:00:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-05-19:/posts/2016/05/django-deploy-uwsgi-nginx-systemd/</id><summary type="html">&lt;p&gt;上一次很認真的 Django 部署記錄在&lt;a href="https://blog.liang2.tw/posts/2016/02/pydoctw-server/"&gt;《設定 Python 官方文件中文化自動更新 Server》&lt;/a&gt;一文。很巧地自己畢業的題目也要架個 Django 網站，所以就 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;上一次很認真的 Django 部署記錄在&lt;a href="https://blog.liang2.tw/posts/2016/02/pydoctw-server/"&gt;《設定 Python 官方文件中文化自動更新 Server》&lt;/a&gt;一文。很巧地自己畢業的題目也要架個 Django 網站，所以就再跑了一次部署設定。舊文還提了有的沒的，這篇僅針對 Django 的部署。&lt;/p&gt;
&lt;p&gt;這邊的部署設定都儘量不使用 root 權限，整個連線的流程圖如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nginx -- unix socket -- uWSGI -- Django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;寫一個名為 &lt;code&gt;PROJ.service&lt;/code&gt; 的 systemd unit 來管理這網站的啟動與否。之後 &lt;code&gt;PROJ&lt;/code&gt; 就換成自己的專案名稱；&lt;code&gt;USER&lt;/code&gt; 就換成執行網站的帳號。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;作業系統&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#postgresql"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#django-proj"&gt;Django PROJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tmpfilesd"&gt;tmpfiles.d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uwsgi"&gt;uWSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#systemd"&gt;systemd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;確認、總結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_1"&gt;作業系統&lt;/h3&gt;
&lt;p&gt;使用 Ubuntu 16.04 LTS。我對 Ubuntu 其實沒愛，但因為很多人用，畢業之後應該還找得到人維護。他跟 Debian 差不多，所以跟舊文沒什麼差別。Ubuntu 16 內建就有 Python 3.5，不用再裝；PostgreSQL 也來到 9.5 版。&lt;/p&gt;
&lt;p&gt;使用 &lt;a href="https://wiki.debian.org/UnattendedUpgrades"&gt;unattended-upgrades&lt;/a&gt; 定期更新與 security 相關的套件，它預設一天檢查一次，更新的記錄會在 &lt;code&gt;/var/log/unattended-upgrades&lt;/code&gt; 目錄中。&lt;/p&gt;
&lt;h3 id="postgresql"&gt;PostgreSQL&lt;/h3&gt;
&lt;p&gt;參考&lt;a href="https://blog.liang2.tw/posts/2016/01/postgresql-install/"&gt;《安裝 PostgreSQL 9 於 Debian Jessie / OSX》&lt;/a&gt;一文設定。建立跟 OS user 同名的 PostgreSQL 帳號，給了建立 database 的權限，這樣開發比較方便。不用設定密碼。&lt;/p&gt;
&lt;h3 id="django-proj"&gt;Django PROJ&lt;/h3&gt;
&lt;p&gt;使用內建 &lt;a href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; 在自己家目錄下某處，建立名為 &lt;code&gt;VENV&lt;/code&gt; 的虛擬環境：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3.5 -m venv VENV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有關部署的設定（即 &lt;code&gt;settings.py&lt;/code&gt;），利用 &lt;a href="https://github.com/joke2k/django-environ"&gt;django-environ&lt;/a&gt; 把 secret key、database 連線資訊、寄信 SMTP server 等設定寫在獨立的檔案，就可以讓 local 和 production 環境讀到各自的設定。具體的做法可以參考 &lt;a href="https://github.com/pycontw/pycontw2016/blob/master/src/pycontw2016/settings/production.py"&gt;PyCon Taiwan 2016 網站管理設定&lt;/a&gt; 的寫法。&lt;/p&gt;
&lt;p&gt;在連 PostgreSQL 時使用 local connection (Unix-domain socket)，即使用者同名的身份。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;postgres:///TABLE_NAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="tmpfilesd"&gt;tmpfiles.d&lt;/h3&gt;
&lt;p&gt;把 nginx 與 uwsgi 溝通用的 socket 放在 &lt;code&gt;/run/PROJ&lt;/code&gt; 底下，但這也表示重開機之後，&lt;code&gt;/run/PROJ&lt;/code&gt; 資料夾就會消失不見，所以使用 &lt;a href="https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html"&gt;tmpfiles.d&lt;/a&gt;&lt;sup id="fnref:systemd-runtimedir"&gt;&lt;a class="footnote-ref" href="#fn:systemd-runtimedir"&gt;1&lt;/a&gt;&lt;/sup&gt;。除了資料夾的命名改成用專案名稱，設定都跟&lt;a href="https://blog.liang2.tw/posts/2016/02/pydoctw-server/"&gt;舊文&lt;/a&gt;一樣。&lt;/p&gt;
&lt;h3 id="nginx"&gt;nginx&lt;/h3&gt;
&lt;p&gt;nginx 設定跟&lt;a href="https://blog.liang2.tw/posts/2016/02/pydoctw-server/"&gt;舊文&lt;/a&gt;一樣。放在 &lt;code&gt;/etc/nginx/sites-available/PROJ.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Upstream Django setting; the socket nginx connects to&lt;/span&gt;
&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;django&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;unix:///run/PROJ/django.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;      &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;      &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="s"&gt;.123.123.123&lt;/span&gt;
                &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;charset&lt;/span&gt;     &lt;span class="s"&gt;utf-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="s"&gt;10M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# max upload size&lt;/span&gt;
    &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/path/to/PROJ/assets&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Finally, send all non-media requests to the Django server.&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt;  &lt;span class="s"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;include&lt;/span&gt;     &lt;span class="s"&gt;/etc/nginx/uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;/path/to/PROJ/assets&lt;/code&gt; 是 Django &lt;a href="https://docs.djangoproject.com/en/1.9/ref/settings/#std:setting-STATIC_ROOT"&gt;STATIC_ROOT&lt;/a&gt; 的路徑。只要執行 &lt;code&gt;python manage.py collectstatic&lt;/code&gt; 後，即使 uWSGI 還沒設定就可以測試 /static/&amp;hellip;/ 有沒有被 nginx 抓到。 &lt;/p&gt;
&lt;p&gt;啟動時，先把檔案連結到 &lt;code&gt;/etc/nginx/site-enabled/&lt;/code&gt;，重載 nginx 設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/nginx/sites-enabled/
sudo ln -s ../sites-available/PROJ.conf .
sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="uwsgi"&gt;uWSGI&lt;/h3&gt;
&lt;p&gt;跟舊文最大的差別，只要裝在 VENV 裡面就好了；然後也不使用 emperor mode。寫一個 &lt;code&gt;/etc/uwsgi/vassals/PROJ.ini&lt;/code&gt; 放設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/PROJ&lt;/span&gt;
&lt;span class="c1"&gt;# Django&amp;#39;s wsgi file&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;PROJ.wsgi:application&lt;/span&gt;
&lt;span class="na"&gt;env&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;DJANGO_SETTINGS_MODULE=PROJ.settings.production&lt;/span&gt;
&lt;span class="c1"&gt;# the virtualenv (full path)&lt;/span&gt;
&lt;span class="na"&gt;home&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/VENV&lt;/span&gt;

&lt;span class="c1"&gt;# process-related settings&lt;/span&gt;
&lt;span class="c1"&gt;# master&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="c1"&gt;# maximum number of worker processes&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="c1"&gt;# the socket (use the full path to be safe&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/run/PROJ/django.sock&lt;/span&gt;
&lt;span class="c1"&gt;# ... with appropriate permissions - may be needed&lt;/span&gt;
&lt;span class="na"&gt;chmod-socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;664&lt;/span&gt;
&lt;span class="na"&gt;uid&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;USER&lt;/span&gt;
&lt;span class="na"&gt;gid&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;span class="c1"&gt;# clear environment on exit&lt;/span&gt;
&lt;span class="na"&gt;vacuum&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定好後執行以下指令，就應該能看到網站能動了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo /path/to/VENV/bin/uwsgi --ini /etc/uwsgi/vassals/PROJ.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="systemd"&gt;systemd&lt;/h3&gt;
&lt;p&gt;這邊除了執行 uWSGI 的指令不同外，都跟&lt;a href="https://blog.liang2.tw/posts/2016/02/pydoctw-server/"&gt;舊文&lt;/a&gt;相同。Debian 系 systemd system unit 設定檔放在 &lt;code&gt;/etc/systemd/system/PROJ.service&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[Unit]
Description=PROJ&amp;#39;s Django server by uWSGI
After=syslog.target

[Service]
ExecStart=/path/to/VENV/bin/uwsgi --ini /etc/uwsgi/vassals/PROJ.ini
Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊設定它會（有錯誤時）自動重新起動，並把 stderr 導到 syslog。接著，就要啟動這個 &lt;code&gt;PROJ.service&lt;/code&gt; 服務：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; PROJ
sudo systemctl status PROJ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以透過 &lt;code&gt;sudo journalctl -xe -u PROJ&lt;/code&gt; 來查看 uWSGI 執行、連線 log。&lt;/p&gt;
&lt;h3 id="_2"&gt;確認、總結&lt;/h3&gt;
&lt;p&gt;重啟系統一次，如果網站還活著，就表示一切設定都沒問題。整體上不太複雜，但權限不符的錯誤可能會讓你鬼打牆，要有耐心。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:systemd-runtimedir"&gt;
&lt;p&gt;也可以用 &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html"&gt;systemd.exec(5)&lt;/a&gt; 提到的 &lt;code&gt;RuntimeDirectory=PROJ&lt;/code&gt; 來建立執行用目錄。但因為 &lt;code&gt;PROJ.service&lt;/code&gt; 的 USER 必須是 root，這種情況 man page 就建議改用 tmpfiles.d。我覺得應該能解決使用 root 權限的問題，但太懶了就先這樣……&amp;#160;&lt;a class="footnote-backref" href="#fnref:systemd-runtimedir" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="python"></category><category term="django"></category><category term="postgresql"></category><category term="deploy"></category><category term="debian"></category><category term="systemd"></category><category term="nginx"></category><category term="uwsgi"></category></entry><entry><title>Jupyter Notebook Progress Bar</title><link href="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/" rel="alternate"></link><published>2016-03-23T02:00:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-03-23:/posts/2016/03/notebook-progress-bar/</id><summary type="html">&lt;p&gt;相信很多人都已經在使用 &lt;a href="https://jupyter.org/"&gt;Jupyter (IPython) Notebook&lt;/a&gt; 跑分析。隨著分析的資料越跑越多，有時候刷下去就是幾十分鐘甚至數小時。此時沒有個 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;相信很多人都已經在使用 &lt;a href="https://jupyter.org/"&gt;Jupyter (IPython) Notebook&lt;/a&gt; 跑分析。隨著分析的資料越跑越多，有時候刷下去就是幾十分鐘甚至數小時。此時沒有個進度條還蠻無聊的，而且能讓自己感覺&lt;strong&gt;很有進度&lt;/strong&gt;，何樂不為呢？&lt;/p&gt;
&lt;p&gt;例如我&lt;a href="https://blog.liang2.tw/play_aiohttp/?full#asyncio-progressbar-cover"&gt;去年介紹 aiohttp&lt;/a&gt; 時就有用到 notebook 和 console 底下的進度條 (progress bar)。不過，這幾個月 Jupyter Notebook 4+ 架構上的調整，可能 code 都不能用了。剛好昨天的 Taipei.py 有人提到這事，就來整理一下吧。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#ipywidgets"&gt;IPywidgets 介紹&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;安裝&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;使用進度條&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#progress-bar-example-in-action"&gt;Progress bar example in action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc"&gt;Misc. 螢幕截圖&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#ffmpeg"&gt;FFmpeg 轉檔&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="ipywidgets"&gt;IPywidgets 介紹&lt;/h3&gt;
&lt;p&gt;Notebook 進度條使用 &lt;a href="https://github.com/ipython/ipywidgets"&gt;ipywidgets&lt;/a&gt; 中的元件實作。這件元件規範了 notebook client &amp;lt;-&amp;gt; server 間雙向的溝通，並且能把相關的 CSS / JS 包裝在一起。在 ipywidgets 範例的 &lt;a href="http://nbviewer.jupyter.org/github/ipython/ipywidgets/blob/master/examples/Widget%20Basics.ipynb"&gt;&lt;em&gt;Widgets Basics&lt;/em&gt;&lt;/a&gt; 中就有提到可能的用途：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can use widgets to &lt;strong&gt;build interactive GUIs&lt;/strong&gt; for your notebooks. &lt;br&gt; 
You can also use widgets to &lt;strong&gt;synchronize stateful and stateless information&lt;/strong&gt; between Python and JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以除了像進度條這樣單向的從 python code 傳訊息到 notebook (HTML) front-end 之外，也可以做一些介面把 front-end 的值傳回 python code。&lt;/p&gt;
&lt;p&gt;……只是要用個進度條而已，哪來這麼多背景知識。更多介紹可以參考 &lt;a href="http://nbviewer.jupyter.org/github/ipython/ipywidgets/blob/master/examples/Index.ipynb"&gt;ipywidgets 官方範例&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id="_1"&gt;安裝&lt;/h4&gt;
&lt;p&gt;使用 Python 3.5 示範。安裝除了 notebook 本身外，還要額外裝上 ipywidgets 這套件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install notebook ipywidgets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再用 &lt;code&gt;jupyter notebook&lt;/code&gt; 即可啟用 notebook。&lt;/p&gt;
&lt;h3 id="_2"&gt;使用進度條&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ipywidgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IntProgress&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;IntProgress&lt;/code&gt; 就是進度條，&lt;code&gt;display&lt;/code&gt; 則是 IPython 顯示各種 Python 物件的函數，在這邊用它才能把 widget 以 HTML 顯示並與 python code 聯動。&lt;/p&gt;
&lt;p&gt;建立一個進度條的方式很簡單。建立 &lt;code&gt;IntProgress&lt;/code&gt; widget object，然後顯示它：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntProgress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/pics/progressbar_default.png"&gt;
&lt;/div&gt;

&lt;p&gt;預設是進度條有 100 個單位，初始值為 0。進度條的值與最大值的狀態分別存在 &lt;code&gt;.value&lt;/code&gt;、&lt;code&gt;.max&lt;/code&gt; 屬性裡：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;
&lt;span class="go"&gt;(0, 100)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只要修改 &lt;code&gt;p.value&lt;/code&gt; 前面的進度條的狀態就會自動更新（不用重跑 &lt;code&gt;display(p)&lt;/code&gt;）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/pics/progressbar_50.png"&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/pics/progressbar_100.png"&gt;
&lt;/div&gt;

&lt;p&gt;當然，最大值調整也會即時更新。此外，還可以透過 &lt;code&gt;.description&lt;/code&gt; 給進度條一個 label。重新做一個完整的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Running&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/pics/progressbar_full.png"&gt;
&lt;/div&gt;

&lt;p&gt;完整的 code 就這樣，用起來非常方便。&lt;/p&gt;
&lt;h3 id="progress-bar-example-in-action"&gt;Progress bar example in action&lt;/h3&gt;
&lt;p&gt;模擬一下真實情況，我們通常有一堆待做的 task，在這邊叫 &lt;code&gt;todo_tasks&lt;/code&gt; 好了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="n"&gt;todo_tasks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;task &lt;/span&gt;&lt;span class="si"&gt;%02d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;只是個字串，但用 &lt;code&gt;time.sleep(sec)&lt;/code&gt; 來模擬有在做事。&lt;/p&gt;
&lt;p&gt;搭配進度條的時候，把實際動態做成底下的動畫。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Initialize a progess bar&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntProgress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;todo_tasks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(Init)&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Simulating task execution&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;todo_tasks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;
&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(Done)&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
  &lt;video loop auto autoplay&gt;
    &lt;source src="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/pics/progressbar_demo.webm" type="video/webm"&gt;
    &lt;source src="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/pics/progressbar_demo.mp4" type="video/mp4"&gt;
    Your browser doesn't support HTML5 video in WebM with VP8 or MP4 with H.264. You can still download the &lt;a href="https://blog.liang2.tw/posts/2016/03/notebook-progress-bar/pics/progressbar_demo.mp4"&gt;screencast&lt;/a&gt; and view it locally.
  &lt;/video&gt;
  &lt;p class="caption center"&gt;Progressbar in action&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;非常方便吧！&lt;/p&gt;
&lt;h3 id="misc"&gt;Misc. 螢幕截圖&lt;/h3&gt;
&lt;p&gt;寫這篇文章花最多的時間是在截圖跟做動畫 XD&lt;/p&gt;
&lt;p&gt;瀏覽器的截圖，現在 Firefox (45) 已經可以只選擇截某個 DOM，十分方便。&lt;/p&gt;
&lt;p&gt;在最後動態的錄製花了不少時間。一開始想說是不是要用 GIF，但&lt;a href="http://blog.imgur.com/2014/10/09/introducing-gifv/"&gt;都 2016 年了還用什麼 GIF 啊！&lt;/a&gt;，雖然螢幕可以試著改 GIF palette 讓畫面不會很醜體積又小，但覺得用個 H.264 / VP9 簡單多了。&lt;/p&gt;
&lt;p&gt;使用 QuickTime Screen Capture，開始錄的時候能只選擇螢幕一部份區域。以我 13&amp;rdquo; retina 螢幕為例，會得到 1636x736 H.264 .mov 檔。但我覺得解析度不用這麼高，所以最後輸出成 480p (1148x480)  就好，順便裁了一點白邊。&lt;/p&gt;
&lt;p&gt;透過 HTML5 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video"&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; 能把 MP4 / WebM 當成動畫來使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="na"&gt;loop&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vid.webm&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/webm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vid.mp4&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    Your browser doesn&amp;#39;t support HTML5 video in WebM with VP8
    or MP4 with H.264. You can still download the 
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vid.mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;screencast&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; and view it locally.
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;video&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;各家 web browser 的支援度可參考 caniuse.com：&lt;a href="http://caniuse.com/#feat=webm"&gt;WebM&lt;/a&gt;、&lt;a href="http://caniuse.com/#feat=mpeg4"&gt;MP4&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="ffmpeg"&gt;FFmpeg 轉檔&lt;/h4&gt;
&lt;p&gt;筆記而已，沒有認真調參數讓輸出檔案最小。VP9 的部份參考 &lt;a href="https://trac.ffmpeg.org/wiki/Encode/VP9"&gt;FFmepg&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# H.264 MP4&lt;/span&gt;
ffmpeg -i Untitled.mov &lt;span class="se"&gt;\&lt;/span&gt;
    -vcodec h264 &lt;span class="se"&gt;\&lt;/span&gt;
    -strict -2 -crf &lt;span class="m"&gt;22&lt;/span&gt; -preset slow -r &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -vf &lt;span class="s2"&gt;&amp;quot;crop=iw:ih-52:0:10, scale=-1:480&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    out.mp4

&lt;span class="c1"&gt;# VP9 WebM&lt;/span&gt;
ffmpeg -i Untitled.mov &lt;span class="se"&gt;\&lt;/span&gt;
    -vcodec libvpx-vp9 &lt;span class="se"&gt;\&lt;/span&gt;
    -b:v 150K -r &lt;span class="m"&gt;24&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -vf &lt;span class="s2"&gt;&amp;quot;crop=iw:ih-52:0:10, scale=-1:480&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    out.webm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4s 的檔案最後大約 60KB，相當不錯。我很多 PNG 截圖都大多了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;du -sh ./* &lt;span class="p"&gt;|&lt;/span&gt; gsort -rh
&lt;span class="go"&gt;744K    ./Untitled.mov&lt;/span&gt;
&lt;span class="go"&gt; 60K    ./out.mp4&lt;/span&gt;
&lt;span class="go"&gt; 52K    ./out.webm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;需要額外安裝 libvpx，例如：&lt;code&gt;brew install ffmepg --with-libvpx&lt;/code&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="jupyter"></category><category term="notebook"></category></entry><entry><title>Python 官方文件中文化 Server HTTPS 使用 Let's Encrypt</title><link href="https://blog.liang2.tw/posts/2016/02/pydoctw-https/" rel="alternate"></link><published>2016-02-21T14:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-02-21:/posts/2016/02/pydoctw-https/</id><summary type="html">&lt;p&gt;整理了 server 從 HTTP 到 HTTPS 相關設定的調整。&lt;/p&gt;</summary><content type="html">&lt;p&gt;現在可以透過 &lt;a href="https://docs.python.org.tw"&gt;https://docs.python.org.tw&lt;/a&gt; 訪問 Python 官方文件中文化網站。&lt;/p&gt;
&lt;p&gt;Server 本身的設定可以參考&lt;a href="https://blog.liang2.tw/posts/2016/02/pydoctw-server/"&gt;之前的文章&lt;/a&gt;。加入 HTTPS 就要設定相關的憑証，我選擇 &lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 做為憑証的簽署者。&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s Encrypt (LE) 使用 AMCE (Automated Certificate Management Environment) protocol 去驗証你是否擁有你欲簽証的 domain。官網上有&lt;a href="https://letsencrypt.org/howitworks/technology/"&gt;圖文說明&lt;/a&gt;，簡單來說，LE 會要求你的 server 在特定的 path 加入特定的檔案，如果你做得到，就代表你擁有這個 domain。這樣的簽証第一次要在 LE server 上註冊，之後最長每 90 天認証一次。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;參考資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lets-encrypt-certificate"&gt;Let&amp;rsquo;s Encrypt Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#systemd-timer-certificate"&gt;設定 systemd timer 定時更新 certificate&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#systemd-service"&gt;Systemd service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#systemd-timer"&gt;Systemd Timer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#nginx-http-redirect-to-https"&gt;nginx HTTP redirect to HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#https"&gt;測試 HTTPS 設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc"&gt;Misc.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_1"&gt;參考資料&lt;/h3&gt;
&lt;p&gt;我不是網路安全相關的專家，設定都是參考網路上的說明整理而成。LE certificate 的設定參考 &lt;a href="https://robmclarty.com/blog/how-to-secure-your-web-app-using-https-with-letsencrypt"&gt;&lt;em&gt;How to Secure Your Web App Using HTTPS With Letsencrypt&lt;/em&gt;&lt;/a&gt; by Rob McLarty 這篇文章。&lt;/p&gt;
&lt;h3 id="lets-encrypt-certificate"&gt;Let&amp;rsquo;s Encrypt Certificate&lt;/h3&gt;
&lt;p&gt;沒有使用 LE 官方的 client，而是用 &lt;a href="https://daylightpirates.org/"&gt;Daniel Roesler&lt;/a&gt; 所寫的 &lt;a href="https://github.com/diafygi/acme-tiny/"&gt;acme-tiny&lt;/a&gt;。這是一個不到 200 行的 Python script，可以自行檢查它有沒有做任何奇怪的事。&lt;a href="https://github.com/diafygi/acme-tiny/"&gt;acme-tiny&lt;/a&gt; 的 README 也有個設定教學，應該是大同小異。&lt;/p&gt;
&lt;p&gt;基本上都是照著 &lt;a href="https://robmclarty.com/blog/how-to-secure-your-web-app-using-https-with-letsencrypt"&gt;&lt;em&gt;How to Secure Your Web App Using HTTPS With Letsencrypt&lt;/em&gt;&lt;/a&gt; 該篇文章做，不過有調整了以下的東西：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立 letsencrypt 帳號時，禁止使用 password login。&lt;br&gt;
   即： &lt;code&gt;adduser --disabled-password ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 git 管理 &lt;a href="https://github.com/diafygi/acme-tiny/"&gt;acme-tiny&lt;/a&gt; script。&lt;/li&gt;
&lt;li&gt;改用 systemd 控制 nginx，而不是透過 service。&lt;br&gt;
   即： &lt;code&gt;systemctl reload nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;沒有用 crontab 而是使用 &lt;a href="https://wiki.archlinux.org/index.php/Systemd/Timers"&gt;systemd Timers&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;重新導引 http 連線至 https。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第 4、5 點設定比較多，整理到後面。&lt;/p&gt;
&lt;h3 id="systemd-timer-certificate"&gt;設定 systemd timer 定時更新 certificate&lt;/h3&gt;
&lt;p&gt;這邊參考 &lt;a href="http://www.certdepot.net/rhel7-use-systemd-timers/"&gt;&lt;em&gt;RHEL7: How to use Systemd timers.&lt;/em&gt;&lt;/a&gt; 一文。&lt;/p&gt;
&lt;p&gt;Systemd Timer 概念如同 crontab，但差別是使用 timer 即與 systemd 整合。&lt;code&gt;&amp;lt;unit&amp;gt;.timer&lt;/code&gt; 可以定期執行 &lt;code&gt;&amp;lt;unit&amp;gt;.service&lt;/code&gt;，所以 &lt;unit&gt; 執行的結果與狀態都能顯示在 systemd 中，也帶入了 journald 有的 logging 功能。&lt;/p&gt;
&lt;p&gt;更新 certificate 的指令寫在 &lt;code&gt;/etc/letsencrypt/renew_cert.sh&lt;/code&gt;。Shell script 的內容與參考文章一樣。&lt;/p&gt;
&lt;h4 id="systemd-service"&gt;Systemd service&lt;/h4&gt;
&lt;p&gt;首先建立一個 renew_cert，以 Debian 為例放在 &lt;code&gt;/etc/systemd/system/renew_cert.service&lt;/code&gt;，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Renew Let&amp;#39;s Encrypt cert&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;syslog.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;letsencrypt&lt;/span&gt;
&lt;span class="na"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;letsencrypt&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/etc/letsencrypt/renew_cert.sh&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;simple&lt;/span&gt;
&lt;span class="na"&gt;StandardError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;syslog&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要手動更新 certificate 的時候執行這個 service 即可，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl start renew_cert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我們不需要 enable 它，不然每次開機都會執行一次。看結果或記錄，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl status renew_cert
journalctl -e -u renew_cert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="systemd-timer"&gt;Systemd Timer&lt;/h4&gt;
&lt;p&gt;建立一個 &lt;code&gt;/etc/systemd/system/renew_cert.timer&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;Update Let&amp;#39;s Encrypt certificate every two months&lt;/span&gt;

&lt;span class="k"&gt;[Timer]&lt;/span&gt;
&lt;span class="na"&gt;OnCalendar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;*-1/2-1 16:00:00&lt;/span&gt;
&lt;span class="na"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;renew_cert.service&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;重點只有 &lt;code&gt;[Timer]&lt;/code&gt; 這 directive。&lt;code&gt;Unit=&lt;/code&gt; 表示要啟動的 service。&lt;code&gt;OnCalendar=&lt;/code&gt;&lt;sup id="fnref:calendar"&gt;&lt;a class="footnote-ref" href="#fn:calendar"&gt;1&lt;/a&gt;&lt;/sup&gt; 則是設定這 timer 根據指定的時間點 (UTC 時間&lt;sup id="fnref:utc"&gt;&lt;a class="footnote-ref" href="#fn:utc"&gt;2&lt;/a&gt;&lt;/sup&gt;) 啟動。&lt;/p&gt;
&lt;p&gt;以這邊寫的時間 &lt;code&gt;*-1/2-1 16:00:00&lt;/code&gt; 為例，代表每年的 1+2n 月 1 日 16:00 UTC 更新 certificate，即臺灣時間 1、3、5、……月 2 日凌晨更新。&lt;/p&gt;
&lt;p&gt;啟用 timer，它需要被 enable 確保重開機時被執行。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl enable renew_cert.timer
systemctl start renew_cert.timer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以用 &lt;code&gt;systemctl list-timers&lt;/code&gt; 檢查它下次執行的時間：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo systemctl list-timers renew_cert.timer
&lt;span class="go"&gt;NEXT                         LEFT                LAST PASSED UNIT             ACTIVATES&lt;/span&gt;
&lt;span class="go"&gt;Tue 2016-03-01 16:00:00 UTC  1 weeks 2 days left n/a  n/a    renew_cert.timer renew_cert.service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="nginx-http-redirect-to-https"&gt;nginx HTTP redirect to HTTPS&lt;/h3&gt;
&lt;p&gt;（這邊設定我沒信心，有更好的設定方法歡迎告訴我 &amp;gt; &amp;lt;）&lt;/p&gt;
&lt;p&gt;要解決的問題為，ACME challenge 是透過 HTTP，其餘的連線都轉到 HTTPS。&lt;/p&gt;
&lt;p&gt;在 nginx 中把主要的設定檔中拿掉 &lt;code&gt;listen 80;&lt;/code&gt; 與 ACM challenge 的部份。把它們移成新的 server block： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;docs.python.org.tw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# For Let&amp;#39;s Encrypt ACME challenge files&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/.well-known/acme-challenge/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/var/www/challenges/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt; &lt;span class="s"&gt;https://&lt;/span&gt;&lt;span class="nv"&gt;$host$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="https"&gt;測試 HTTPS 設定&lt;/h3&gt;
&lt;p&gt;用了 &lt;a href="https://securityheaders.io/"&gt;securityheaders.io&lt;/a&gt; 和 &lt;a href="https://www.ssllabs.com/index.html"&gt;SSL Labs&lt;/a&gt; 測試了一下，應該還可以：&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/02/pydoctw-https/pics/pydoctw_securityheaders_report.png"/&gt;
  &lt;p class="caption center"&gt;Report from securityheaders.io (&lt;a href="https://securityheaders.io/?q=https%3A%2F%2Fdocs.python.org.tw%2F3%2F"&gt;Live Report&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/02/pydoctw-https/pics/pydoctw_ssllabs_report.png"/&gt;
  &lt;p class="caption center"&gt;Report from SSL Labs (&lt;a href="https://www.ssllabs.com/ssltest/analyze.html?d=docs.python.org.tw"&gt;Live Report&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id="_2"&gt;心得&lt;/h3&gt;
&lt;p&gt;總結來說，使用 &lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 不難，但也沒到非常簡單。&lt;/p&gt;
&lt;p&gt;如果你願意把 root 和 private key 權限給它的話，用官方 client 提供的 &lt;code&gt;letsencrypt-auto&lt;/code&gt; 步驟能更少，用 Apache 它聲稱能全自動設定。覺得 &lt;a href="https://github.com/diafygi/acme-tiny/"&gt;acme-tiny&lt;/a&gt; 指令太複雜的話，原作者也寫了一個 &lt;a href="https://gethttpsforfree.com/"&gt;Get HTTPS for free!&lt;/a&gt; 服務，用網頁的方式協助整個註冊流程。&lt;/p&gt;
&lt;p&gt;要注意目前 public beta 階段，相同 domain 在 7 天只能被簽署 5 次，測試的時候不要太衝動不然就要等一週了。&lt;/p&gt;
&lt;h3 id="misc"&gt;Misc.&lt;/h3&gt;
&lt;p&gt;建立 CSR (Certificate Signing Request) 檔時，可以加入自己的 email 地址，不然預設是 &lt;code&gt;webmaster@&amp;lt;domain&amp;gt;&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;openssl req -new -sha256 &lt;span class="se"&gt;\&lt;/span&gt;
    -key /etc/letsencrypt/private/domain.key &lt;span class="se"&gt;\&lt;/span&gt;
    -subj &lt;span class="s2"&gt;&amp;quot;/CN=docs.python.org.tw/emailAddress=me+pydoctw@liang2.tw&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &amp;gt; /etc/letsencrypt/private/domain.csr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:calendar"&gt;
&lt;p&gt;除了 &lt;code&gt;OnCalendar&lt;/code&gt; 還有很多設定 timer 的方式，如 &lt;code&gt;OnUnitActiveSec&lt;/code&gt;。不過其他的時間算法，都會受有沒有開機，影響時間的計算。&amp;#160;&lt;a class="footnote-backref" href="#fnref:calendar" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:utc"&gt;
&lt;p&gt;Debian Jessie 的 &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.time.html#Calendar%20Events"&gt;systemd.time (7)&lt;/a&gt; Calendar Events 裡並沒有指定時區的方式，所以加上時區會有 parse error。但新版的 systemd 似乎支援時區。總之應該用 &lt;code&gt;systemctl list-timers&lt;/code&gt; 確定執行的時間。&amp;#160;&lt;a class="footnote-backref" href="#fnref:utc" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="pydoctw"></category><category term="https"></category><category term="letsencrypt"></category></entry><entry><title>Add code block language name into CSS classes in Pelican Markdown</title><link href="https://blog.liang2.tw/posts/2016/02/markdown-codehilite-lang/" rel="alternate"></link><published>2016-02-19T15:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-02-19:/posts/2016/02/markdown-codehilite-lang/</id><summary type="html">&lt;p&gt;I used &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; and its &lt;a href="https://pythonhosted.org/Markdown/"&gt;Markdown&lt;/a&gt; plugin to render blog post. &lt;/p&gt;
&lt;p&gt;Recently I was playing with the &lt;a href="https://docs.python.org/"&gt;Python Official Documentation&lt;/a&gt;, which has a decent code syntax highlighter powered by &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s more, the output of code examples can be toggled. That is, a code example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Hello …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I used &lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; and its &lt;a href="https://pythonhosted.org/Markdown/"&gt;Markdown&lt;/a&gt; plugin to render blog post. &lt;/p&gt;
&lt;p&gt;Recently I was playing with the &lt;a href="https://docs.python.org/"&gt;Python Official Documentation&lt;/a&gt;, which has a decent code syntax highlighter powered by &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s more, the output of code examples can be toggled. That is, a code example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be toggled to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is very convenient for code copy-pasting.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;However, the functionality is currently failed on the official Python doc (given by &lt;a href="https://docs.python.org/3/_static/copybutton.js"&gt;&lt;code&gt;copybutton.js&lt;/code&gt;&lt;/a&gt;) because the jQuery updates break previous API behavior. I&amp;rsquo;ve filed &lt;a href="http://bugs.python.org/issue26246"&gt;issue 26246&lt;/a&gt; on the Python issue tracker for this problem.&lt;/del&gt; (EDIT 2016-02-27: the patch has been merged.)&lt;/p&gt;
&lt;h3 id="code-output-toggle-in-pelican"&gt;Code output toggle in Pelican&lt;/h3&gt;
&lt;p&gt;After I fixed the copybutton.js, I wished to add this functionality to my blog. &lt;/p&gt;
&lt;p&gt;Code highlighting in Pelican markdown files is handled by its &lt;a href="https://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite&lt;/a&gt; extension. To my surprise, I found CodeHilite does not express the language name specified for each code block.&lt;/p&gt;
&lt;p&gt;What I expected was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight-python3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but the actual output was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So no way to find the language name the code block used, nor the lexer aliases Pygments guessed when no language name was specified.&lt;/p&gt;
&lt;p&gt;A quick dig into the &lt;a href="https://github.com/waylan/Python-Markdown/blob/master/markdown/extensions/codehilite.py#L106-L123"&gt;source code&lt;/a&gt; showed that it is relatively easy to fix. Here is the diff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/extensions/codehilite.py b/extensions/codehilite_updated.py&lt;/span&gt;
&lt;span class="gh"&gt;index 0657c37..4fad7c5 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- a/extensions/codehilite.py&lt;/span&gt;
&lt;span class="gi"&gt;+++ b/extensions/codehilite_updated.py&lt;/span&gt;
&lt;span class="gu"&gt;@@ -75,7 +75,8 @@ class CodeHilite(object):&lt;/span&gt;

     def __init__(self, src=None, linenums=None, guess_lang=True,
                  css_class=&amp;quot;codehilite&amp;quot;, lang=None, style=&amp;#39;default&amp;#39;,
&lt;span class="gd"&gt;-                 noclasses=False, tab_length=4, hl_lines=None, use_pygments=True):&lt;/span&gt;
&lt;span class="gi"&gt;+                 noclasses=False, tab_length=4, hl_lines=None, use_pygments=True, &lt;/span&gt;
&lt;span class="gi"&gt;+                 wrap_by_lang=True):&lt;/span&gt;
         self.src = src
         self.lang = lang
         self.linenums = linenums
&lt;span class="gu"&gt;@@ -86,6 +87,7 @@ class CodeHilite(object):&lt;/span&gt;
         self.tab_length = tab_length
         self.hl_lines = hl_lines or []
         self.use_pygments = use_pygments
&lt;span class="gi"&gt;+        self.wrap_by_lang = wrap_by_lang&lt;/span&gt;

     def hilite(self):
         &amp;quot;&amp;quot;&amp;quot;
&lt;span class="gu"&gt;@@ -114,13 +116,22 @@ class CodeHilite(object):&lt;/span&gt;
                         lexer = get_lexer_by_name(&amp;#39;text&amp;#39;)
                 except ValueError:
                     lexer = get_lexer_by_name(&amp;#39;text&amp;#39;)
&lt;span class="gi"&gt;+            lang = lexer.aliases[0]&lt;/span&gt;
             formatter = get_formatter_by_name(&amp;#39;html&amp;#39;,
                                               linenos=self.linenums,
                                               cssclass=self.css_class,
                                               style=self.style,
                                               noclasses=self.noclasses,
                                               hl_lines=self.hl_lines)
&lt;span class="gd"&gt;-            return highlight(self.src, lexer, formatter)&lt;/span&gt;
&lt;span class="gi"&gt;+            hilited_html = highlight(self.src, lexer, formatter)&lt;/span&gt;
&lt;span class="gi"&gt;+            if self.wrap_by_lang and self.lang:&lt;/span&gt;
&lt;span class="gi"&gt;+                return &amp;#39;&amp;lt;div class=&amp;quot;%(class)s-%(lang)s&amp;quot;&amp;gt;%(html)s&amp;lt;/div&amp;gt;\n&amp;#39; % {&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;class&amp;#39;: self.css_class,&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;lang&amp;#39;: lang.replace(&amp;#39;+&amp;#39;, &amp;#39;-&amp;#39;),&lt;/span&gt;
&lt;span class="gi"&gt;+                    &amp;#39;html&amp;#39;: hilited_html,&lt;/span&gt;
&lt;span class="gi"&gt;+                }&lt;/span&gt;
&lt;span class="gi"&gt;+            else:&lt;/span&gt;
&lt;span class="gi"&gt;+                return hilited_html&lt;/span&gt;
         else:
             # just escape and build markup usable by JS highlighting libs
             txt = self.src.replace(&amp;#39;&amp;amp;&amp;#39;, &amp;#39;&amp;amp;amp;&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;rsquo;m happy with the patched codehilite output. I am now able to give code toggle function to specific code languages. &lt;/p&gt;
&lt;p&gt;However it&amp;rsquo;s quite busy these days, so it may take a while to submit a proper pull request (e.g. fix any broken unit tests, write new tests, and tune the API as well as the new behavior). Moerover, &lt;strong&gt;currently my site does not use jQuery&lt;/strong&gt; so I am missing a huge dependency. Rewriting it using vanilla JS seems to require considerable work, and the very thing I don&amp;rsquo;t have at hand is time :(&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve decided to leave this improvement in future development. But if your site use Pelican Markdown and imports jQuery, the diff will add the code language back. &lt;/p&gt;</content><category term="Coding"></category><category term="en"></category><category term="blog"></category><category term="pelican"></category><category term="codehilite"></category><category term="pygment"></category></entry><entry><title>設定 Python 官方文件中文化自動更新 Server</title><link href="https://blog.liang2.tw/posts/2016/02/pydoctw-server/" rel="alternate"></link><published>2016-02-14T21:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-02-14:/posts/2016/02/pydoctw-server/</id><summary type="html">&lt;p&gt;設定一個自動更新 Python 說明文件中文翻譯並且 host 中文化網頁版文件的 server。使用 Django 作 web server、Django-Q 做為 task queue，deploy stack 用 nginx、uWSGI，host 於 Amazon EC2 (Debian Jessie)，資料庫用 PostgreSQL，並用 systemd 管理相關的 process。&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt; 可至 &lt;a href="http://docs.python.org.tw"&gt;http://docs.python.org.tw&lt;/a&gt; 看線上自動更新的&lt;a href="http://docs.python.org.tw/3/"&gt;中文化的文件&lt;/a&gt;和 &lt;a href="http://docs.python.org.tw/_build/"&gt;build server&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;EDIT 2016-02-16: 加上 language code、git sshconfig、swap 的設定；文句潤飾。&lt;br&gt;
EDIT 2016-02-20: 加上 tmpfiles.d 的設定。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python 說明文件中文翻譯計畫&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sphinx"&gt;Sphinx 文件多國語言架構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#transifex-po"&gt;Transifex 線上服務讓多人共同翻譯 po 檔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;翻譯體驗改善&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pydoc-autobuild-server"&gt;PyDoc Autobuild Server&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;實作&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sphinx_1"&gt;Sphinx 文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#autobuild-django-server"&gt;Autobuild Django server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#autobuild-server"&gt;Autobuild server 部署&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;作業系統&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-35-and-apt-pinning"&gt;Python 3.5 and APT-pinning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#postgresql"&gt;資料庫 PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#swap"&gt;Swap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-repo-ssh-config"&gt;Git repo ssh config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tmpfilesd"&gt;tmpfiles.d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#django-stack-nginx-uwsgi"&gt;Django Stack &amp;ndash; nginx + uWSGI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#nginx"&gt;nginx 設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#uwsgi"&gt;uWSGI 設定&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#systemd-services"&gt;Systemd services&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;總結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="python"&gt;Python 說明文件中文翻譯計畫&lt;/h2&gt;
&lt;p&gt;最近一段時間都在準備 &lt;a href="https://github.com/python-doc-tw/python-doc-tw"&gt;Python 說明文件中文翻譯計畫&lt;/a&gt;。翻譯本身雖然還沒很積極地進行，但經過&lt;a href="http://www.meetup.com/Taipei-py/events/226558484/"&gt;前&lt;/a&gt;&lt;a href="http://www.meetup.com/Taipei-py/events/227001232/"&gt;幾次&lt;/a&gt; Taipei.py Projects On 的 sprint 活動，已經有蠻多人加入翻譯的行列。大家都有各自翻譯的主題，像我自己是從 &lt;a href="http://docs.python.org.tw/3/tutorial/index.html"&gt;Tutorial&lt;/a&gt; 的部份開始翻譯。&lt;/p&gt;
&lt;h3 id="sphinx"&gt;Sphinx 文件多國語言架構&lt;/h3&gt;
&lt;p&gt;先簡介一下 &lt;a href="https://docs.python.org/3/"&gt;CPython Documentation&lt;/a&gt;（下稱 pydoc）的架構和翻譯方式。pydoc 是標準的 &lt;a href="http://www.sphinx-doc.org/en/stable/"&gt;Sphinx&lt;/a&gt; 文件，因此翻譯使用 Sphinx 自帶的 &lt;a href="http://www.sphinx-doc.org/en/stable/intl.html"&gt;internationalization&lt;/a&gt; (i18n or intl) 功能把文件的內容轉換到別的語言上。&lt;/p&gt;
&lt;p&gt;如同 Django 等專案，i18n 都是透過 gettext，Sphinx 會按照 rst 檔案輸出同檔名的 po 檔。rst 檔案中的每個文字段落會對應到 po 檔一個 entry，不相干的程式碼範例等段落會被跳過。輸出的 po 檔放在對應的路徑例如 &lt;code&gt;locale/&amp;lt;lang&amp;gt;/LC_MESSAGES/xxx.po&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Gettext"&gt;po 檔的格式&lt;/a&gt;很簡單，跳過有的沒的 header，實質內容長這樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kd"&gt;#: ../../tutorial/appetite.rst:50&lt;/span&gt;
&lt;span class="nv"&gt;msgid&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Python enables programs to be written compactly and readably.  Programs &amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;written in Python are typically much shorter than equivalent C,  C++, or &amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Java programs, for several reasons:&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;msgstr&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;Python 讓程式寫得精簡並易讀。用 Python 實作的程式長度往往遠比用 &amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;C、C++、Java 實作的短。這有以下幾個原因：&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;實際上 Sphinx 會先輸出一份乾淨的 po 檔範本（稱為 pot 檔）到 &lt;code&gt;locale/pot/&lt;/code&gt;，基本上就是只有原文的 po 檔。每增加一個新語言就會從 pot 檔製作一份 po 檔到各自的 &lt;code&gt;locale/&amp;lt;lang&amp;gt;/&lt;/code&gt; 目錄下，翻譯時就修改那份 po 檔就可以。&lt;/p&gt;
&lt;p&gt;翻譯完成後，首先 Sphinx 會先呼叫 gettext 把 po 檔編譯成 mo 檔加速搜尋翻譯字串速度。輸出翻譯後的文件只要設定不同語言，Sphinx 就會去找該語言的 mo 檔，並把原文字串換成 mo 檔裡的內容，就可以看到中文的文件。&lt;/p&gt;
&lt;h3 id="transifex-po"&gt;Transifex 線上服務讓多人共同翻譯 po 檔&lt;/h3&gt;
&lt;p&gt;整個 Sphinx 文件翻譯流程就這樣，所以翻譯只要編輯中文 (lang code: zh-Hant&lt;sup id="fnref:zh-Hant"&gt;&lt;a class="footnote-ref" href="#fn:zh-Hant"&gt;1&lt;/a&gt;&lt;/sup&gt;) 的 po 檔就好了。不過要直接寫 po 檔格式門檻還是太高，於是就有像 &lt;a href="https://www.transifex.com/"&gt;Transifex&lt;/a&gt; 這樣的網站。上傳 po/pot 檔就能線上修改翻譯，然後再把翻完的結果用 po 檔格式下載下來。我認為這是現在參加以 gettext-based PO 檔翻譯門檻最低的方式，至少日本也是這麼做。於是想要參考 pydoc 翻譯的人，只要登入 Transifex 就可以開始編輯。&lt;/p&gt;
&lt;p&gt;用 Transifex 還有額外的好處。例如他有 POS tagging 可以標注專有名詞，定義統一的譯名，這些譯名會整理在 glossary terms 裡，翻譯時出現這些詞就會自動提示。類似的原文文句也會放在 suggestion 裡，讓翻譯完的用語文法也能一致。此外也有修改歷史、防呆提示（如該有的格式沒在譯文出現）、加註解 (comment)、評論 (issue) 等功能。&lt;/p&gt;
&lt;h3 id="_1"&gt;翻譯體驗改善&lt;/h3&gt;
&lt;p&gt;這段時間翻譯的用詞、流程等規範都有個雛型了，相關的內容都可以在&lt;a href="https://github.com/python-doc-tw/python-doc-tw/wiki"&gt;專案的 wiki&lt;/a&gt; 裡找到。所以開始想要怎麼讓大家更好參與翻譯和看到翻譯的結果。&lt;/p&gt;
&lt;p&gt;我發現參加翻譯本身已經不困難，大家沒什麼疑問。維護整體的用詞、翻譯討論用 Transifex issue 和 comment 效果不錯。整體上能保持極度分散式的工作形式。&lt;/p&gt;
&lt;p&gt;平常遇到最多問題是出現 rst 格式錯誤、缺少必要的空白、前後文加上程式碼範例之後不通順、譯文曲解或誤會原文的意思。這些問題，我覺得只要自己讀過翻完的 pydoc 該頁、看一下輸出的 log 就能明白，也不需要我多作解釋。&lt;/p&gt;
&lt;p&gt;再來，看不到自己翻譯的成果&lt;strong&gt;很沒有成就感&lt;/strong&gt;，過一段時間我怕會失去動力。&lt;/p&gt;
&lt;p&gt;於是變成需要一份保持更新的翻譯成果。當然自己輸出 doc 的方法都有寫在 &lt;a href="https://github.com/python-doc-tw/python-doc-tw/wiki/How-to-build-the-doc-locally"&gt;wiki&lt;/a&gt; 裡，但步驟很多，說簡單也沒多簡單，而且有錯或有問題可能都要來找我，就失去分散式分工的特性了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不如做個 autobuild server。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;於是有了這想法。但實在是個大坑，一直只能用想的。在過年的時候總算找到時間把 prototype 做出來了，其實蠻有成就感的。&lt;/p&gt;
&lt;h2 id="pydoc-autobuild-server"&gt;PyDoc Autobuild Server&lt;/h2&gt;
&lt;p&gt;簡單整理幾個需求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PyDoc 結果網址對應本家 &lt;a href="https://docs.python.org/"&gt;https://docs.python.org/&lt;/a&gt;。例如 /3/ 就是 Python 3.x 版最新的，而現在 /3.5/ 就會自動轉址到 /3/&lt;sup id="fnref:pydoc-url"&gt;&lt;a class="footnote-ref" href="#fn:pydoc-url"&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
&lt;li&gt;每一頁都有個更新翻譯連結，點一下就會從 Transifex 上抓新的翻譯，並更新輸出。&lt;/li&gt;
&lt;li&gt;更新每頁翻譯的指令輸出都要保留，方便檢查 rst 語法等錯誤。&lt;/li&gt;
&lt;li&gt;更新翻譯要有個 queue，才可以多人合作時不炸掉 autobuild server。&lt;/li&gt;
&lt;li&gt;每日更新全部的文件，並且把更新加到 CPython-tw 的 git repo 中。更新的過程一樣要有記錄。&lt;/li&gt;
&lt;li&gt;上述的所有功能都能在本機輕鬆地設定。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;實作&lt;/h3&gt;
&lt;p&gt;目標就是完成上述的需求。pydoc 基本上就是個 static site，交給 nginx 設好路徑 host static files 就可以。Pydoc Sphinx 用 &lt;a href="http://jinja.pocoo.org/docs/dev/"&gt;Jinja2&lt;/a&gt; 作 HTML template，所以只要多加一些變數就能控制頁面的輸出，在 autobuild server 上時就可以加上額外的連結。而 Autobuild server 本身是個 task queue，其實功能很簡單，但為了維護方便，並考慮到 local、production 環境都要能動的話，選擇 &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; 為基礎。真的給 Django 管理的就顯示 task queue、task result、接受 rebuild doc request 這幾個 view。&lt;/p&gt;
&lt;h4 id="sphinx_1"&gt;Sphinx 文件&lt;/h4&gt;
&lt;p&gt;在 Sphinx 文件部份不想搞太複雜，就在每一頁加上一個自己的專屬連結，打這個網址就會加入一個更新該頁面的 task 到 autobuild server&lt;sup id="fnref:build-link"&gt;&lt;a class="footnote-ref" href="#fn:build-link"&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;在 autobuild 時加入專屬連結只要修改 Sphinx doc template 即可。Sphinx 在 build doc 時可以透過 &lt;a href="http://www.sphinx-doc.org/en/stable/man/sphinx-build.html#options"&gt;&lt;code&gt;-A &amp;lt;name=value&amp;gt;&lt;/code&gt;&lt;/a&gt; 增加 Jinja2 template 的變數，就可控制 template render 行為：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# &amp;lt;cpython-src&amp;gt;/Doc/tools/templates/layout.html #}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;autobuildi18n&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/_build/update/?source_path=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pagename&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Update Translation&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;- &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sphinx-build -A autobuildi18n=1&lt;/code&gt; 時就會包含這個 Jinja2 block，多這個 Update Translation 連結。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sphinx-doc.org/en/stable/templating.html#pagename"&gt;&lt;code&gt;{{ pagename }}&lt;/code&gt;&lt;/a&gt; 是每頁文件的 rst 路徑。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="autobuild-django-server"&gt;Autobuild Django server&lt;/h4&gt;
&lt;p&gt;Django server 目標就是接受 task request 和顯示 task result。一個標準的 task queue 就有這些功能。&lt;/p&gt;
&lt;p&gt;Django 上的 task queue 選擇很多，從 &lt;a href="https://www.djangopackages.com/"&gt;Django Packages&lt;/a&gt; 上的 &lt;a href="https://www.djangopackages.com/grids/g/workers-queues-tasks/"&gt;Workers, Queues, and Tasks&lt;/a&gt; 相關的套件可以看到有幾個有在更新而且 up 數多的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://celery.github.io/django-celery/"&gt;django-celery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://huey.readthedocs.org/en/latest/"&gt;huey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ui/django-rq"&gt;django-RQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://policystat.github.io/jobtastic/"&gt;jobtastic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://django-q.readthedocs.org/"&gt;django-Q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;扣掉不支援 Python 3 的套件&lt;sup id="fnref:python3"&gt;&lt;a class="footnote-ref" href="#fn:python3"&gt;4&lt;/a&gt;&lt;/sup&gt;後，就剩 django-celery、django-RQ、django-Q 可以選。這裡面最紅也最老牌的是 django-celery ，它與 &lt;a href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt; 整合，功能完整且穩定，我用過也覺得十分不錯，缺點是功能太多有點複雜，加上不同 message queue 時會有很多設定要調整，需要一段時間上手。一般 Celery 常見的搭配使用 &lt;a href="https://www.rabbitmq.com/"&gt;Rabbit-MQ&lt;/a&gt; 和 &lt;a href="http://redis.io/"&gt;Redis&lt;/a&gt;，的確在 task 很多時有必要，但我們這個 build doc 一天可能才十幾次，在不隔離 build doc 環境的情況同時間的 worker 只能有一個，不會有效能上的問題。因此我傾向只要使用與 Django 同一個 database 就好，不要再有額外非 Python 的 dependency，讓 local 開發簡單一點。&lt;/p&gt;
&lt;p&gt;最後選擇 &lt;a href="https://django-q.readthedocs.org/"&gt;django-Q&lt;/a&gt;。雖然很新但作者維護得很勤，worker 可以只用 Python 內建的 multiprocessing 完成。功能簡單卻完整，包含 monitor，跟 django-admin 整合，還可以排程。所以要啟動 django-Q 的 cluster，只要多一個 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py qcluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即可，十分方便。&lt;/p&gt;
&lt;p&gt;怎麼使用 django-Q 就不在這篇 blog 討論範圍內了。我想我應該會投稿 PyCon TW 或 Taipei.py，到時候再整理成另一篇。Django-Q 的說明文件寫得很清楚，讀一讀應該就會了。&lt;/p&gt;
&lt;h2 id="autobuild-server"&gt;Autobuild server 部署&lt;/h2&gt;
&lt;p&gt;（這篇文的重點其實是部署，誰曉得背景介紹可以這麼長）&lt;/p&gt;
&lt;p&gt;部署 (deploy) 方法百百種，有好有壞。但至少要會一種嘛，所以這邊就用其中一種：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx &amp;lt;-&amp;gt; uwsgi &amp;lt;-&amp;gt; Django&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也算很流行的組合。更完整地來說，整個處理 request 的流程經過：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;web client &amp;lt;-&amp;gt; nginx web server &amp;lt;-&amp;gt; socket &amp;lt;-&amp;gt; uwsgi &amp;lt;-&amp;gt; Django server&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本的設定與教學來自 &lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/index.html"&gt;uWSGI&lt;/a&gt; 官網的 &lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html"&gt;&lt;em&gt;Setting up Django and your web server with uWSGI and nginx&lt;/em&gt;&lt;/a&gt; 一文，搭配 &lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/Systemd.html"&gt;&lt;em&gt;uWGSI and Systemd&lt;/em&gt;&lt;/a&gt; 與 &lt;a href="https://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; 整合。&lt;/p&gt;
&lt;p&gt;這也是目前 Pydoc production 的設定，記錄一下方便未來的維護。&lt;/p&gt;
&lt;h3 id="_3"&gt;作業系統&lt;/h3&gt;
&lt;p&gt;作業系統用 Debian Jessie，架設於 Amazon EC2 上，使用 t2.nano&lt;sup id="fnref:ec2-nano"&gt;&lt;a class="footnote-ref" href="#fn:ec2-nano"&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;Python web deploy 都會把套件裝在虛擬環境中，避免不同專案間互衝或與系統衝突。在 Debian 上可以用 &lt;code&gt;apt buid-dep python3-&amp;lt;pkg&amp;gt;&lt;/code&gt; 把 Python &lt;pkg&gt; 套件所需的 header 或 library 安裝好，十分簡單。&lt;/p&gt;
&lt;h4 id="python-35-and-apt-pinning"&gt;Python 3.5 and APT-pinning&lt;/h4&gt;
&lt;p&gt;我的 code 裡用到了 &lt;a href="https://docs.python.org/3/library/subprocess.html#subprocess.run"&gt;&lt;code&gt;subprocess.run&lt;/code&gt;&lt;/a&gt;，這是 Python 3.5+ 才有的 API。但 Jessie 只有 Python 3.4，但我覺得很好用一點都不想改寫成相容舊版的 code。&lt;/p&gt;
&lt;p&gt;因此需要安裝 Debian testing channel 上最新的 Python 3.5。這樣其實有安全上的疑慮，因為只有 stable channel 才有 security support，但自己編譯的問題更大，所以像 &lt;a href="https://github.com/yyuu/pyenv"&gt;pyenv&lt;/a&gt; 這種多 Python 版本的工具不在考慮內。&lt;/p&gt;
&lt;p&gt;於是用 &lt;a href="https://wiki.debian.org/AptPreferences"&gt;Apt-Pinning&lt;/a&gt; 只讓 Python 3.5 相關的套件安裝 testing 的版本。首先把 testing channel 加到 &lt;code&gt;/etc/apt/source.list&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;deb http://cloudfront.debian.net/debian testing main
deb-src http://cloudfront.debian.net/debian testing main
deb http://security.debian.org/ testing/updates main
deb-src http://security.debian.org/ testing/updates main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然後修改 &lt;code&gt;/etc/apt/preferences&lt;/code&gt; 確定我們不會不小心裝到 testing 相關的套件，並把 Python 3.5 相關的套件設定權限 &amp;gt;= 990 讓它們能被自動安裝。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Specify * rules first so later package-specfic rules can override them
Package: *
Pin: release a=testing
Pin-Priority: -10

Package: python3.5* libpython3.5*
Pin: release a=testing
Pin-Priority: 990
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以用 &lt;code&gt;sudo apt-cache policy &amp;lt;pkg-name&amp;gt;&lt;/code&gt; 檢查目前的規則會裝到哪個版本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo apt-get update 
$ sudo apt-get install python3.5 python3.5-venv python3.5-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣只有 Python 3.5 相關的套件才會裝到 testing。&lt;/p&gt;
&lt;h4 id="postgresql"&gt;資料庫 PostgreSQL&lt;/h4&gt;
&lt;p&gt;資料庫用 PostgreSQL 9.4。參照之前 blog&lt;a href="https://blog.liang2.tw/posts/2016/01/postgresql-install/"&gt;《安裝 PostgreSQL 9 於 Debian Jessie / OSX》&lt;/a&gt;一文設定。&lt;/p&gt;
&lt;h4 id="swap"&gt;Swap&lt;/h4&gt;
&lt;p&gt;其實是上線不久才注意到 EC2 預設沒有 swap 空間。我很窮所以 production server 的 RAM 只有 512 MB，觀察一下有時候 build doc RAM 就全滿了，所以還是加個 swap 安心一點。&lt;/p&gt;
&lt;p&gt;因為 Amazon EBS SSD I/O 數不會另外收錢（應該吧？），就建 swap file 在主硬碟裡。&lt;/p&gt;
&lt;p&gt;Swap 設定的教學很多，這邊就參考 &lt;a href="https://wiki.archlinux.org/index.php/swap"&gt;Arch Wiki&lt;/a&gt; 上的做法，我選擇放在 &lt;code&gt;/var/swap.1&lt;/code&gt;。大小設定為 RAM 的 2 倍，即 1GB。&lt;/p&gt;
&lt;p&gt;首先把這個檔案建出來，權限改為 600。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo /bin/dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/swap.1 &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt;
&lt;span class="c1"&gt;# or faster with fallocate&lt;/span&gt;
sudo fallocate -l 1G /var/swap.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo chmod &lt;span class="m"&gt;600&lt;/span&gt; /var/swap.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來把這個檔案改成 swap 格式並啟用它，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo /sbin/mkswap /var/swap.1
sudo /sbin/swapon /var/swap.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改 fstab 讓每次開機都有這個 swap 設定，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# /etc/fstab
/var/swap.1 none swap defaults 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 &lt;code&gt;free -h&lt;/code&gt;、&lt;code&gt;cat /proc/meminfo&lt;/code&gt; 檢查此時應該有個 1GB swap 了。&lt;/p&gt;
&lt;h4 id="git-repo-ssh-config"&gt;Git repo ssh config&lt;/h4&gt;
&lt;p&gt;再來是 code 的同步與更新。autobuild server 只要更新 source code，但 cpython-tw source 需要定時 commit 新的翻譯，因此 deploy server 會有修改 git repo 的權限。&lt;/p&gt;
&lt;p&gt;不應該使用自己的 SSH key，deploy server 上應該有專屬的 deploy key，其中 cpython-tw 的 deploy key 有寫入權限（即可以 commit）。&lt;/p&gt;
&lt;p&gt;查了一下，要讓不同 git repo 使用不同的 SSH key 也不複雜。以這邊的例子，先修改 &lt;code&gt;~/.ssh/config&lt;/code&gt; 加入兩個新的 host，使用不同的 SSH key：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Host github-pydoc_autobuild
  HostName github.com
  User git
  IdentityFile /home/pydoc/.ssh/id_rsa.pydoc_autobuild

Host github-cpython_tw
  HostName github.com
  User git
  IdentityFile /home/pydoc/.ssh/id_rsa.cpython_tw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立對應的 SSH keypair，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-keygen -t rsa -f ~/.ssh/id_rsa.pydoc_autobuild
ssh-keygen -t rsa -f ~/.ssh/id_rsa.cpython_tw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把兩個 repo 的 URL host 換掉，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git remote set-url origin git@github-pydoc_autobuild:python-doc-tw/pydoc_autobuild.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣兩個 repo 會透過給定的 ssh key 連線。GitHub 會顯示每個 key 最近使用的時間，檢查時間就能確認設定正確與否（而且改 host 沒設定對應該直接連不上）。&lt;/p&gt;
&lt;h4 id="tmpfilesd"&gt;tmpfiles.d&lt;/h4&gt;
&lt;p&gt;之後 nginx 和 uwsgi 溝通用的 socket 打算放在 &lt;code&gt;/run/django/xxxx.sock&lt;/code&gt; &lt;sup id="fnref:/run"&gt;&lt;a class="footnote-ref" href="#fn:/run"&gt;6&lt;/a&gt;&lt;/sup&gt;。因為只需要非 root 的權限，修改 &lt;a href="https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html"&gt;tmpfiles.d&lt;/a&gt; 的設定，讓這個資料夾能在開機時自動建立。增加設定檔 &lt;code&gt;/etc/tmpfiles.d/pydoc_autobuild.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;d /run/django 0755 pydoc www-data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="django-stack-nginx-uwsgi"&gt;Django Stack &amp;ndash; nginx + uWSGI&lt;/h3&gt;
&lt;p&gt;在本地開發都用 &lt;code&gt;python manage.py runserver&lt;/code&gt; 啟動 Django。但上線時內建的 runserver 就無法同時間服務太多人。因此需要像 nginx、uWSGI 等工具來協助。&lt;/p&gt;
&lt;p&gt;參照 uWSGI &lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/tutorials/Django_and_nginx.html"&gt;&lt;em&gt;Setting up Django and your web server with uWSGI and nginx&lt;/em&gt;&lt;/a&gt; 一文以及 TP 寫的 《為程式人寫的 Django Tutorial》系列文中 &lt;a href="https://github.com/uranusjr/django-tutorial-for-programmers/blob/master/25-deploy-to-ubuntu-server.md"&gt;&lt;em&gt;Day 27 - Deploy to Ubuntu server&lt;/em&gt;&lt;/a&gt; 關於部署的文章。&lt;/p&gt;
&lt;p&gt;Autobuild server 有特別為 production 寫一份設定檔，切換時只要設定成 &lt;code&gt;settings.production&lt;/code&gt; 即可。在 Django 設定部份，建議把所有路徑都設成絕對路徑（包含執行檔）。不然後續在設定 systemd 要調整很多環境變數，systemd 也不會帶入使用者的 PATH 變數，不用絕對路徑其實蠻麻煩的也容易錯。&lt;/p&gt;
&lt;h4 id="nginx"&gt;nginx 設定&lt;/h4&gt;
&lt;p&gt;nginx 會接受 incoming HTTP request，需要跟 Django server 聯絡時，就會會連到 uWSGI 開的 UNIX socket。&lt;/p&gt;
&lt;p&gt;我們先假設 uWSGI 這段沒問題，首先設定 nginx 本身。由於 static files 在 nginx 就直接導到對應的檔案，不會經過 uWSGI ，所以設定好 nginx 之後 pydoc 文件本身就上線了。用這個來測試設定的正確性。&lt;/p&gt;
&lt;p&gt;對本網站而言，/static 導到 Django staticfiles；/3/、/3.5/ 導到 pydoc build HTML 的路徑；其餘路徑再交給 Django 處理。其中，/3.5/* 的連結將重新導向到 /3/* 上。&lt;/p&gt;
&lt;p&gt;整理上述的需求，寫個 nginx 設定檔在 &lt;code&gt;/etc/nginx/sites-available/pydoc_autobuild.conf&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Upstream Django setting; the socket nginx connects to&lt;/span&gt;
&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;django&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;unix:///run/django/pydoc_autobuild.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;      &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;      &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;default&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;docs.python.org.tw&lt;/span&gt;
                &lt;span class="mi"&gt;52&lt;/span&gt;&lt;span class="s"&gt;.69.170.26&lt;/span&gt;
                &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;charset&lt;/span&gt;     &lt;span class="s"&gt;utf-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="s"&gt;10M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;# max upload size&lt;/span&gt;
    &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/path/to/code/pydoc_autobuild/assets&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/path/to/code/cpython-tw/Doc/build/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;/3\.5/(.*)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt; &lt;span class="s"&gt;/3/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Finally, send all non-media requests to the Django server.&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt;  &lt;span class="s"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;include&lt;/span&gt;     &lt;span class="s"&gt;/etc/nginx/uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再把檔案 soft link 到 &lt;code&gt;/etc/nginx/sites-enabled/&lt;/code&gt;，更新 nginx 設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/nginx/sites-available/
sudo ln -s pydoc_autobuild.conf ../sites-enabled/
sudo systemctl reload nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;確定 pydoc 上線就可以專心處理 uWSGI 了。&lt;/p&gt;
&lt;h4 id="uwsgi"&gt;uWSGI 設定&lt;/h4&gt;
&lt;p&gt;uWSGI 在 VENV 外也要裝，我覺得還是用 pip 比較簡單，雖然這樣就要自己注意 uWSGI 的版本更新了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo python3.5 -m pip install uwsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把 uWSGI 設定存成 &lt;code&gt;pydoc_autobuild_uwsgi.ini&lt;/code&gt; 並且在測試時，都使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo uwsgi --ini pydoc_autobuild_uwsgi.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;模擬實際上的執行方式，這樣之後改用 systemd 執行才不會又丟一堆權限的問題。設定檔的內容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[uwsgi]
chdir        = /path/to/code/pydoc_autobuild
# Django&amp;#39;s wsgi file
module       = pydoc_autobuild.wsgi:application
env          = DJANGO_SETTINGS_MODULE=pydoc_autobuild.settings.production
# the virtualenv (full path)
home         = /path/to/VENV

# process-related settings
# master
master       = true
# maximum number of worker processes
processes    = 4
# the socket (use the full path to be safe
socket       = /run/django/pydoc_autobuild.sock
# ... with appropriate permissions - may be needed
chmod-socket = 664
uid          = pydoc
gid          = www-data
# clear environment on exit
vacuum       = true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;權限上的設定可能要花點時間處理一下，nginx 使用 www-data/www-data 的身份執行，socket 要確定 nginx 能讀寫，但我的 code 放在 pydoc 使用者路徑下，用 www-data 可能會有權限的問題。建議把 uid、gid 都設定好。&lt;/p&gt;
&lt;p&gt;過程中，搭配 nginx 的錯誤訊息比較好 debug：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo less +F /var/log/nginx/error.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;成功後，再用 uWSGI 的 Emperor mode，把設定檔丟到一個路徑底下（該路徑稱為 vassals）。uWSGI 在 Emperor mode 時會自動把 vassals 路徑內所有設定檔都讀進來並執行。&lt;/p&gt;
&lt;p&gt;這裡 vassals 路徑使用 &lt;code&gt;/etc/uwsgi/vassals/&lt;/code&gt;。因為有設 uid、gid，跑的時候就不用再設了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo uwsgi --emperor /etc/uwsgi/vassals
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣應該 Django 相關的 view 都沒問題了。接下來，要把啟動 uWSGI 的步驟交給系統來管理。&lt;/p&gt;
&lt;h3 id="systemd-services"&gt;Systemd services&lt;/h3&gt;
&lt;p&gt;Autobuild server 包含兩個部份：Django Server 與 Django-Q cluster。所以寫成 systemd service 時會有兩個服務。&lt;/p&gt;
&lt;p&gt;Debian system service 放在 &lt;code&gt;/etc/systemd/system/&lt;/code&gt; 底下，因此建立 &lt;code&gt;uwsgi.service&lt;/code&gt; 和 &lt;code&gt;qcluster.service&lt;/code&gt; 分別管理 uWSGI Emperor mode 和 Django-Q cluster。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uwsgi.service&lt;/code&gt; 參考 uWSGI 官網 &lt;a href="http://uwsgi-docs.readthedocs.org/en/latest/Systemd.html"&gt;&lt;em&gt;Django and Systemd&lt;/em&gt;&lt;/a&gt; 一文的設定：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[Unit]
Description=uWSGI Emperor
After=syslog.target

[Service]
ExecStart=/usr/local/bin/uwsgi --emperor /etc/uwsgi/vassals
RuntimeDirectory=uwsgi
Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;qcluster.service&lt;/code&gt; 算是自己硬寫模擬 &lt;code&gt;python manage.py qcluster&lt;/code&gt; 行為。因此環境變數都要設定好（當然用絕對路徑就沒問題了，我只是覺得這樣 build log 內的執行檔路徑都很長會很醜 xd）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[Unit]
Description=Django-Q Cluster for site pydoc_autobuild
After=syslog.target
Wants=uwsgi.service

[Service]
User=pydoc
Group=www-data
Environment=VIRTUAL_ENV=/path/to/VENV
Environment=PATH=/path/to/VENV/bin:$PATH
Environment=DJANGO_SETTINGS_MODULE=pydoc_autobuild.settings.production
WorkingDirectory=/path/to/code/pydoc_autobuild
ExecStart=/path/to/VENV/bin/python manage.py qcluster
Restart=always
KillSignal=SIGQUIT
Type=simple
NotifyAccess=none
StandardError=syslog

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣的設定檔應該不是 systemd 的慣例，我還在想是不是應該要改寫到 user service 去（但我不會）。&lt;/p&gt;
&lt;p&gt;加入到 systemd 之後管理就很簡單，啟動這兩個 service：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemctl enable uwsgi
sudo systemctl enable qcluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看他們的狀態：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemctl status uwsgi
sudo systemctl status qcluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看它們的 log 也變得很簡單，因為有把它們的 stderr 抓起來。systemd 好處是 rotation 等等都會幫你注意，看 log 的功能也很多。&lt;/p&gt;
&lt;p&gt;例如要查最近一小時 uWSGI 的連線記錄，並在有新連線時持續更新 log：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo journalctl -xef -u uwsgi --since &amp;#39;1 hour ago&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;總結&lt;/h2&gt;
&lt;p&gt;介紹了 &lt;a href="https://github.com/python-doc-tw/python-doc-tw"&gt;Python 說明文件翻譯計畫&lt;/a&gt;，線上文件autobuild server 基於 Django 與 Django-Q 的架構，以及在 Debian 上結合 nginx、uWSGI、systemd 的部署設定。&lt;/p&gt;
&lt;p&gt;查資料時覺得文章還不多，只有幾篇像 &lt;a href="https://luxagraf.net/src/how-set-django-uwsgi-systemd-debian-8"&gt;&lt;em&gt;How to Set Up Django with Nginx, uWSGI &amp;amp; systemd on Debian/Ubuntu&lt;/em&gt;&lt;/a&gt; 的文章，剩下要自己組裝還是要花一點時間。同時也把部署 pydoc server 的設定都記在這，將來要重建也比較簡單。&lt;/p&gt;
&lt;p&gt;關於說明文件翻譯，應該會再花篇文章好好寫整個計畫本身。&lt;/p&gt;
&lt;p&gt;（是說如果有人能從頭看到尾的話，給個回饋吧 &amp;gt; &amp;lt;）&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:zh-Hant"&gt;
&lt;p&gt;八卦是，臺灣繁體中文的 language code (or locale identifier) 究竟是 zh_TW、zh-Hant、zh-Hant-TW、zh-Hant_TW、zh_Hant 還是 zh_Hant_TW？這問題本身就可以寫一篇了。&lt;br&gt;&lt;br&gt;查國際規範 &lt;a href="http://www.ietf.org/rfc/bcp/bcp47.txt"&gt;BCP 47&lt;/a&gt; 的話，只有 &lt;a href="http://www.iana.org/assignments/lang-tags/zh-Hant"&gt;zh-Hant&lt;/a&gt; 和 &lt;a href="http://www.iana.org/assignments/lang-tags/zh-Hant-TW"&gt;zh-Hant-TW&lt;/a&gt;，更多關於標準的說明與定義可以參考 &lt;a href="https://www.w3.org/International/articles/bcp47/"&gt;&lt;em&gt;Understanding the New Language Tags&lt;/em&gt;, W3C&lt;/a&gt; 一文。&lt;br&gt;&lt;br&gt;不過現狀是很奇妙的。參考 OSX 定義 &lt;a href="https://developer.apple.com/library/ios/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html"&gt;&lt;em&gt;Language and Locale IDs&lt;/em&gt;&lt;/a&gt; 的話應該是 zh_TW、zh-Hant 或 zh-Hant_TW。而在 Debain 中，所有支援的 locale 寫在 &lt;code&gt;/usr/share/i18n/SUPPORTED&lt;/code&gt;，裡面只有 zh_TW，不過 Debian 只用 &lt;code&gt;language[_country][.charset]&lt;/code&gt; 所以不會有定義中為 script 的 Hant，雖然在 locale 中使用底線與 &lt;a href="http://www.ietf.org/rfc/bcp/bcp47.txt"&gt;BCP 47&lt;/a&gt; 的定義不同。Sphinx 透過 &lt;a href="http://babel.pocoo.org/"&gt;Babel&lt;/a&gt; 處理 locale，但它不允許 locale 中有 &lt;code&gt;-&lt;/code&gt;，因此只能考慮 zh_Hant 或 zh_Hant_TW。更有趣的是，locale 應該是 case-insensitive 所以大小寫是不重要的 XD&amp;#160;&lt;a class="footnote-backref" href="#fnref:zh-Hant" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:pydoc-url"&gt;
&lt;p&gt;其實在 &lt;a href="https://docs.python.org/"&gt;https://docs.python.org/&lt;/a&gt; 上面 &lt;a href="https://docs.python.org/3/"&gt;/3/&lt;/a&gt; 和 &lt;a href="https://docs.python.org/3.5/"&gt;/3.5/&lt;/a&gt; 是不同份文件，即使是同個版本號它們更新的時間不相同。蠻意外會是這樣的情況。不過我們不用搞這麼複雜，只要轉址就好。&amp;#160;&lt;a class="footnote-backref" href="#fnref:pydoc-url" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:build-link"&gt;
&lt;p&gt;開發時一直都是用 GET，即如文中所說，有個專屬的 link。但發現會有 robot / crawler 打這些路徑，因此最後改成 POST，把 &lt;code&gt;{{ pagename }}&lt;/code&gt; 用 data-* 即 &lt;code&gt;&amp;lt;a href="#" data-pagename="{{ pagename }}"&amp;gt;...&amp;lt;/a&amp;gt;&lt;/code&gt; 的方式存起來，在用 jQuery 綁定 click listener。&amp;#160;&lt;a class="footnote-backref" href="#fnref:build-link" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:python3"&gt;
&lt;p&gt;看 &lt;a href="https://github.com/coleifer/huey"&gt;huey&lt;/a&gt; 和 &lt;a href="https://github.com/PolicyStat/jobtastic"&gt;jobtastic&lt;/a&gt; master branch 上有 py3k 的 commit 但感覺是最近的事，有待觀察。&amp;#160;&lt;a class="footnote-backref" href="#fnref:python3" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:ec2-nano"&gt;
&lt;p&gt;吐嘈一下，t2.nano vCPU 真的時快時慢，有時 build doc 幾分鐘就搞定了，有時要幾十分鐘，有一天超慢，然後又被 web crawler 抓到，讓 task queue timeout 陷入了 timeout、restart、timeout 的無限地獄……&amp;#160;&lt;a class="footnote-backref" href="#fnref:ec2-nano" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:/run"&gt;
&lt;p&gt;/var/run = /run，這個路徑是個 tmpfs 所以每次重開機就會清空，目錄要記得重建。&amp;#160;&lt;a class="footnote-backref" href="#fnref:/run" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="pydoctw"></category><category term="python"></category><category term="django"></category><category term="postgresql"></category><category term="deploy"></category><category term="debian"></category><category term="systemd"></category><category term="nginx"></category><category term="uwsgi"></category></entry><entry><title>安裝 PostgreSQL 9 於 Debian Jessie / OSX</title><link href="https://blog.liang2.tw/posts/2016/01/postgresql-install/" rel="alternate"></link><published>2016-01-25T17:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-25:/posts/2016/01/postgresql-install/</id><summary type="html">&lt;p&gt;平常用最多的是 &lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt;，但 &lt;a href="http://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; 有很多好用的功能，每次要用想不起來怎麼裝。總之把相關設定的筆記存在這。&lt;/p&gt;
&lt;p&gt;用 &lt;a href="https://www.debian.org/releases/stable/"&gt;Debian Jessie&lt;/a&gt; (Debian 8.3) 與 OSX …&lt;/p&gt;</summary><content type="html">&lt;p&gt;平常用最多的是 &lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt;，但 &lt;a href="http://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt; 有很多好用的功能，每次要用想不起來怎麼裝。總之把相關設定的筆記存在這。&lt;/p&gt;
&lt;p&gt;用 &lt;a href="https://www.debian.org/releases/stable/"&gt;Debian Jessie&lt;/a&gt; (Debian 8.3) 與 OSX &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; 舉例。不過 OSX 大概也不會沒事把 PostgreSQL 開著，主要是著重在 Debian 的環境設定上。目前 PostgreSQL 出到 9.5 但 Debian stable 是 9.4。基本設定應該完全沒差別。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#postgresql"&gt;安裝 PostgreSQL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#osx"&gt;安裝在 OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debian-jessie"&gt;安裝在 Debian Jessie&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#database"&gt;初始個人的 Database&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#postgresql_1"&gt;建立同使用者名稱的 PostgreSQL 帳號&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database_1"&gt;建立與帳號同名稱的 database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#psql"&gt;用使用者帳號連接 psql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#psql_1"&gt;psql 指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database_2"&gt;刪除使用者、Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;進階主題&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#psql_2"&gt;透過 psql 創建使用者帳號、資料庫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#postgresql-logging"&gt;PostgreSQL Logging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#logging-postgresql"&gt;Logging 讓 PostgreSQL 自己管&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging-systemd"&gt;Logging 透過 Systemd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="postgresql"&gt;安裝 PostgreSQL&lt;/h2&gt;
&lt;h3 id="osx"&gt;安裝在 OSX&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;brew install postgresql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要用的時候手動把 PostgreSQL server 打開，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;postgres -D /usr/local/var/postgres&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PostgreSQL 的設定參考 Debian 的版本。&lt;/p&gt;
&lt;h3 id="debian-jessie"&gt;安裝在 Debian Jessie&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo apt-get install postgresql-9.4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;現在系統服務都由 &lt;a href="http://freedesktop.org/wiki/Software/systemd/"&gt;Systemd&lt;/a&gt; 管理了，檢查 PostgreSQL 有沒有跑起來透過 &lt;code&gt;systemctl&lt;/code&gt; 這指令就可以。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemctl status postgresql.service
&lt;span class="go"&gt;● postgresql.service - PostgreSQL RDBMS&lt;/span&gt;
&lt;span class="go"&gt;   Loaded: loaded (/lib/systemd/system/postgresql.service; enabled)&lt;/span&gt;
&lt;span class="go"&gt;   Active: inactive (dead) since Mon 2016-01-25 17:26:08 CST; 4s ago&lt;/span&gt;
&lt;span class="go"&gt;  Process: 913 ExecStart=/bin/true (code=exited, status=0/SUCCESS)&lt;/span&gt;
&lt;span class="go"&gt; Main PID: 913 (code=exited, status=0/SUCCESS)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不過這 service 看不太到什麼運行的資訊，其實是個 dummy service，它會 trigger 可能很多個 PostgreSQL database cluster 什麼的。預設只有一個 &lt;code&gt;main&lt;/code&gt; 的 cluster。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemctl status postgresql@9.4-main.service
&lt;span class="go"&gt;● postgresql@9.4-main.service - PostgreSQL Cluster 9.4-main&lt;/span&gt;
&lt;span class="go"&gt;   Loaded: loaded (/lib/systemd/system/postgresql@.service; disabled)&lt;/span&gt;
&lt;span class="go"&gt;   Active: active (running) since Mon 2016-01-25 17:26:30 CST; 4min 7s ago&lt;/span&gt;
&lt;span class="go"&gt;  Process: 9641 ExecStop=/usr/bin/pg_ctlcluster -m fast %i stop (code=exited, status=0/SUCCESS)&lt;/span&gt;
&lt;span class="go"&gt;  Process: 9717 ExecStart=postgresql@%i %i start (code=exited, status=0/SUCCESS)&lt;/span&gt;
&lt;span class="go"&gt; Main PID: 9723 (postgres)&lt;/span&gt;
&lt;span class="go"&gt;   CGroup: /system.slice/system-postgresql.slice/postgresql@9.4-main.service&lt;/span&gt;
&lt;span class="go"&gt;           ├─9723 /usr/lib/postgresql/9.4/bin/postgres -D /var/lib/postgresql/9.4/main -c config_file=/etc/postgr...&lt;/span&gt;
&lt;span class="go"&gt;           ├─9725 postgres: checkpointer process&lt;/span&gt;
&lt;span class="go"&gt;           ├─9726 postgres: writer process&lt;/span&gt;
&lt;span class="go"&gt;           ├─9727 postgres: wal writer process&lt;/span&gt;
&lt;span class="go"&gt;           ├─9728 postgres: autovacuum launcher process&lt;/span&gt;
&lt;span class="go"&gt;           └─9729 postgres: stats collector process&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="database"&gt;初始個人的 Database&lt;/h2&gt;
&lt;p&gt;在 OSX 上用 homebrew 安裝 PostgreSQL 的使用者會有 superuser 的權限，反正是本地開發也沒差，建 database 等設定都比較簡單。&lt;/p&gt;
&lt;p&gt;在 Debian 上的話，有這 superuser 權限的使用者為 &lt;code&gt;postgres&lt;/code&gt;。所以預設使用者（這邊以 &lt;code&gt;vm&lt;/code&gt; 為例）會無法連線。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;psql
&lt;span class="go"&gt;psql: FATAL:  role &amp;quot;vm&amp;quot; does not exist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;切到 root 再切到 postgres 身份就能用 &lt;code&gt;psql&lt;/code&gt; （PostgreSQL 的 REPL shell）連到 database。用 &lt;code&gt;\q&lt;/code&gt; 就可以退出 psql。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo -u postgres psql
&lt;span class="go"&gt;[sudo] password for vm:&lt;/span&gt;
&lt;span class="go"&gt;psql (9.4.5)&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot; for help.&lt;/span&gt;

&lt;span class="go"&gt;postgres=# \q&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但用 postgres 這 superuser 去連資料庫不是很安全，一開始養成好習慣應該用個人帳號。所以接下來要完成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立同使用者名稱的 PostgreSQL 帳號&lt;/li&gt;
&lt;li&gt;建立與帳號同名稱的 database&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="postgresql_1"&gt;建立同使用者名稱的 PostgreSQL 帳號&lt;/h3&gt;
&lt;p&gt;在 Debian 上可以用 &lt;code&gt;$USER&lt;/code&gt; 來抓到現在登入者的帳號，即使用 sudo 切換身份這環境變數的值不會變。（讀 &lt;a href="https://help.ubuntu.com/community/PostgreSQL"&gt;Ubuntu wiki&lt;/a&gt; 看到的技巧）&lt;/p&gt;
&lt;p&gt;擔心的話就直接在有 &lt;code&gt;$USER&lt;/code&gt; 的地方打出帳號即可。先確認一下，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;vm@vm-debian:~$ echo $&lt;/span&gt;USER
&lt;span class="go"&gt;vm&lt;/span&gt;
&lt;span class="gp"&gt;vm@vm-debian:~$ &lt;/span&gt;sudo -u postgres &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;span class="go"&gt;vm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立使用者是透過 &lt;code&gt;createuser&lt;/code&gt; 這指令。這是使用者帳號就不給太多權限。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo -u postgres createuser --interactive &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;span class="go"&gt;Shall the new role be a superuser? (y/n) n&lt;/span&gt;
&lt;span class="go"&gt;Shall the new role be allowed to create databases? (y/n) n&lt;/span&gt;
&lt;span class="go"&gt;Shall the new role be allowed to create more new roles? (y/n) n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時候透過 &lt;code&gt;psql&lt;/code&gt; 看就會多一個使用者。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Run with command `sudo -u postgres psql`&lt;/span&gt;
&lt;span class="gp"&gt;postgres=#&lt;/span&gt; &lt;span class="kp"&gt;\du&lt;/span&gt;
                             &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;roles&lt;/span&gt;
 &lt;span class="k"&gt;Role&lt;/span&gt; &lt;span class="k"&gt;name&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                   &lt;span class="n"&gt;Attributes&lt;/span&gt;                   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
&lt;span class="c1"&gt;-----------+------------------------------------------------+-----------&lt;/span&gt;
 &lt;span class="n"&gt;postgres&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Superuser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;Create&lt;/span&gt; &lt;span class="k"&gt;role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Replication&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
 &lt;span class="n"&gt;vm&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;                                                &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="database_1"&gt;建立與帳號同名稱的 database&lt;/h3&gt;
&lt;p&gt;透過 &lt;code&gt;createdb&lt;/code&gt; 這指令。把與帳號同名 database 的 owner 設定成該帳號。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo -u postgres createdb --owner&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt; &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要多建別的 database 給這帳號也沒問題，例如名為 &lt;code&gt;vm_database&lt;/code&gt; 的 database，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;sudo -u postgres createdb --owner&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt; vm_database
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="psql"&gt;用使用者帳號連接 psql&lt;/h3&gt;
&lt;p&gt;這時候打 &lt;code&gt;psql&lt;/code&gt; 就沒問題了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;psql
&lt;span class="go"&gt;psql (9.4.5)&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot; for help.&lt;/span&gt;

&lt;span class="go"&gt;vm=&amp;gt; \conninfo&lt;/span&gt;
&lt;span class="go"&gt;You are connected to database &amp;quot;vm&amp;quot; as user &amp;quot;vm&amp;quot; via socket in &amp;quot;/var/run/postgresql&amp;quot; at port &amp;quot;5432&amp;quot;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Prompt 從 &lt;code&gt;#=&lt;/code&gt; 變成 &lt;code&gt;=&amp;gt;&lt;/code&gt; 表示現在連線的使用者不是 superuser。透過 psql 的指令 &lt;code&gt;\l&lt;/code&gt; 或 &lt;code&gt;\l+&lt;/code&gt; 可以看現在所有的 database：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;vm=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;\l&lt;/span&gt;
&lt;span class="go"&gt;                                   List of databases&lt;/span&gt;
&lt;span class="go"&gt;    Name     |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges&lt;/span&gt;
&lt;span class="go"&gt;-------------+----------+----------+-------------+-------------+-----------------------&lt;/span&gt;
&lt;span class="go"&gt; postgres    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |&lt;/span&gt;
&lt;span class="go"&gt; template0   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +&lt;/span&gt;
&lt;span class="go"&gt;             |          |          |             |             | postgres=CTc/postgres&lt;/span&gt;
&lt;span class="go"&gt; template1   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +&lt;/span&gt;
&lt;span class="go"&gt;             |          |          |             |             | postgres=CTc/postgres&lt;/span&gt;
&lt;span class="go"&gt; vm          | vm       | UTF8     | en_US.UTF-8 | en_US.UTF-8 |&lt;/span&gt;
&lt;span class="go"&gt; vm_database | vm       | UTF8     | en_US.UTF-8 | en_US.UTF-8 |&lt;/span&gt;
&lt;span class="go"&gt;(5 rows)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;連另一個 database &lt;code&gt;vm_database&lt;/code&gt; 也很簡單，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;psql -d vm_database
&lt;span class="go"&gt;psql (9.4.5)&lt;/span&gt;
&lt;span class="go"&gt;Type &amp;quot;help&amp;quot; for help.&lt;/span&gt;

&lt;span class="go"&gt;vm_database=&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="psql_1"&gt;psql 指令&lt;/h2&gt;
&lt;p&gt;psql 的指令很多，用 &lt;code&gt;\?&lt;/code&gt; 可以看到列表。完整的版本可以見&lt;a href="http://www.postgresql.org/docs/9.4/static/app-psql.html#APP-PSQL-META-COMMANDS"&gt;官網 psql meta-commands&lt;/a&gt; 的介紹。底下列幾個常用的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;\l          # list all database
\d          # list tables in current database
\du         # list roles
\conninfo   # show current SQL connection
\q          # quit
help        # print a hub message for all kinds of help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="database_2"&gt;刪除使用者、Database&lt;/h2&gt;
&lt;p&gt;各有一個指令對應。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;dropuser &amp;lt;usr&amp;gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;dropdb &amp;lt;db&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_1"&gt;進階主題&lt;/h2&gt;
&lt;h3 id="psql_2"&gt;透過 psql 創建使用者帳號、資料庫&lt;/h3&gt;
&lt;p&gt;Ref: &lt;a href="http://www.cyberciti.biz/faq/howto-add-postgresql-user-account/"&gt;http://www.cyberciti.biz/faq/howto-add-postgresql-user-account/&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Run with command `sudo -u postgres psql -d template1`&lt;/span&gt;
&lt;span class="gp"&gt;template1=#&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;USER&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="k"&gt;PASSWORD&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;pwd&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="gp"&gt;template1=#&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="gp"&gt;template1=#&lt;/span&gt; &lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt; &lt;span class="k"&gt;PRIVILEGES&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="postgresql-logging"&gt;PostgreSQL Logging&lt;/h3&gt;
&lt;p&gt;設定在 &lt;code&gt;/etc/postgresql/9.4/main/postgresql.conf&lt;/code&gt; 裡。不同管理 log 的方式就要選擇不同的 &lt;code&gt;log_destination&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PostgreSQL 自己管：&lt;code&gt;stderr&lt;/code&gt;, &amp;hellip;&lt;/li&gt;
&lt;li&gt;透過 &lt;a href="http://freedesktop.org/wiki/Software/systemd/"&gt;Systemd&lt;/a&gt;：&lt;code&gt;syslog&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不過我沒深入研究就是，看那個 conf 裡很多設定可以調整。設定修改後要 restart PostgreSQL cluster，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemctl restart postgresql.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="logging-postgresql"&gt;Logging 讓 PostgreSQL 自己管&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# At /etc/postgresql/9.4/main/postgresql.conf&lt;/span&gt;
&lt;span class="na"&gt;log_destination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;stderr&amp;#39; &lt;/span&gt;
&lt;span class="na"&gt;logging_collector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;on                              &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Log files 預設寫在 &lt;code&gt;/var/lib/postgresql/9.4/main/pg_log/&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id="logging-systemd"&gt;Logging 透過 Systemd&lt;/h4&gt;
&lt;p&gt;我覺得 systemd 的優點之一就是能把 log 都集中管理，只要照它的規則，就能用一樣的方法管理 logging 是蠻方便的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# At /etc/postgresql/9.4/main/postgresql.conf&lt;/span&gt;
&lt;span class="na"&gt;log_destination&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;syslog&amp;#39;  &lt;/span&gt;
&lt;span class="na"&gt;logging_collector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;off   # on 也只會說被導向到 syslog 了                             &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時候重啟服務，再看 &lt;code&gt;systemctl status&lt;/code&gt; 就能看到最近的 log 了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemctl status postgresql@9.4-main
&lt;span class="go"&gt;● postgresql@9.4-main.service - PostgreSQL Cluster 9.4-main&lt;/span&gt;
&lt;span class="go"&gt;   Loaded: loaded (/lib/systemd/system/postgresql@.service; disabled)&lt;/span&gt;
&lt;span class="go"&gt;   Active: active (running) since Mon 2016-01-25 17:52:02 CST; 1min 13s ago&lt;/span&gt;
&lt;span class="go"&gt;  Process: 14632 ExecStop=/usr/bin/pg_ctlcluster -m fast %i stop (code=exited, status=0/SUCCESS)&lt;/span&gt;
&lt;span class="go"&gt;  Process: 14641 ExecStart=postgresql@%i %i start (code=exited, status=0/SUCCESS)&lt;/span&gt;
&lt;span class="go"&gt; Main PID: 14648 (postgres)&lt;/span&gt;
&lt;span class="go"&gt;   CGroup: /system.slice/system-postgresql.slice/postgresql@9.4-main.service&lt;/span&gt;
&lt;span class="go"&gt;           ├─14648 /usr/lib/postgresql/9.4/bin/postgres -D /var/lib/postgresql/9.4/main -c config_file=/etc/postg...&lt;/span&gt;
&lt;span class="go"&gt;           ├─14650 postgres: checkpointer process&lt;/span&gt;
&lt;span class="go"&gt;           ├─14651 postgres: writer process&lt;/span&gt;
&lt;span class="go"&gt;           ├─14652 postgres: wal writer process&lt;/span&gt;
&lt;span class="go"&gt;           ├─14653 postgres: autovacuum launcher process&lt;/span&gt;
&lt;span class="go"&gt;           └─14654 postgres: stats collector process&lt;/span&gt;

&lt;span class="go"&gt;Jan 25 17:52:00 vm-debian postgres[14648]: [1-1] 2016-01-25 17:52:00 CST [14648-1] LOG:  ending log output to stderr&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:52:00 vm-debian postgres[14648]: [1-2] 2016-01-25 17:52:00 CST [14648-2] HINT:  Future log output ...log&amp;quot;.&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:52:00 vm-debian postgres[14649]: [2-1] 2016-01-25 17:52:00 CST [14649-1] LOG:  database system was...9 CST&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:52:00 vm-debian postgres[14649]: [3-1] 2016-01-25 17:52:00 CST [14649-2] LOG:  MultiXact member wr...abled&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:52:00 vm-debian postgres[14648]: [2-1] 2016-01-25 17:52:00 CST [14648-3] LOG:  database system is ...tions&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:52:00 vm-debian postgres[14653]: [2-1] 2016-01-25 17:52:00 CST [14653-1] LOG:  autovacuum launcher started&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:52:00 vm-debian postgres[14658]: [3-1] 2016-01-25 17:52:00 CST [14658-1] [unknown]@[unknown] LOG: ...acket&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:52:38 vm-debian postgres[14793]: [3-1] 2016-01-25 17:52:38 CST [14793-1] root@root FATAL:  role &amp;quot;r...exist&lt;/span&gt;
&lt;span class="go"&gt;Hint: Some lines were ellipsized, use -l to show in full.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或用 systemd 標準看 log 的方式 &lt;code&gt;journalctl&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;journalctl -u postgresql@9.4-main 
&lt;span class="go"&gt;-- Logs begin at Mon 2016-01-25 16:46:25 CST, end at Mon 2016-01-25 19:22:07 CST. --&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:06 vm-debian postgres[13699]: [1-1] 2016-01-25 17:47:06 CST [13699-1] LOG:  redirecting log output to logging collector process&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:06 vm-debian postgres[13699]: [1-2] 2016-01-25 17:47:06 CST [13699-2] HINT:  Future log output will appear in directory &amp;quot;pg_log&amp;quot;.&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:06 vm-debian postgres[13699]: [2-1] 2016-01-25 17:47:06 CST [13699-3] LOG:  ending log output to stderr&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:06 vm-debian postgres[13699]: [2-2] 2016-01-25 17:47:06 CST [13699-4] HINT:  Future log output will go to log destination &amp;quot;syslog&amp;quot;.&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:06 vm-debian postgres[13701]: [3-1] 2016-01-25 17:47:06 CST [13701-1] LOG:  database system was shut down at 2016-01-25 17:47:05 CST&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:06 vm-debian postgres[13701]: [4-1] 2016-01-25 17:47:06 CST [13701-2] LOG:  MultiXact member wraparound protections are now enabled&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:06 vm-debian postgres[13699]: [3-1] 2016-01-25 17:47:06 CST [13699-5] LOG:  database system is ready to accept connections&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:06 vm-debian postgres[13705]: [3-1] 2016-01-25 17:47:06 CST [13705-1] LOG:  autovacuum launcher started&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:47:07 vm-debian postgres[13710]: [4-1] 2016-01-25 17:47:07 CST [13710-1] [unknown]@[unknown] LOG:  incomplete startup packet&lt;/span&gt;
&lt;span class="go"&gt;Jan 25 17:49:30 vm-debian postgres[14170]: [4-1] 2016-01-25 17:49:30 CST [14170-1] root@root FATAL:  role &amp;quot;root&amp;quot; does not exist&lt;/span&gt;
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="reference"&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-9-4-on-debian-8"&gt;How to Install and Use PostgreSQL 9.4 on Debian 8&lt;/a&gt; by Digital Ocean&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/PostgreSQL"&gt;PostgreSQL&lt;/a&gt; on Arch Wiki&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.debian.org/PostgreSql"&gt;PostgreSQL&lt;/a&gt; on Debian wiki&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.ubuntu.com/community/PostgreSQL"&gt;PostgreSQL&lt;/a&gt; on Ubuntu wiki&lt;/li&gt;
&lt;/ul&gt;</content><category term="Coding"></category><category term="zh"></category><category term="postgresql"></category><category term="debian"></category><category term="osx"></category></entry><entry><title>Coding 初學指南附錄 - Bioinfo Practices using Python</title><link href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-bioinfo-python/" rel="alternate"></link><published>2016-01-21T23:30:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-21:/posts/2016/01/lab-coding-appendix-bioinfo-python/</id><summary type="html">&lt;p&gt;A walk through of practices created by Rosalind Team.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last Edited: Jan, 2016 （如果內容有誤，你可以留言，或用任何管道告訴我）&lt;/p&gt;
&lt;p&gt;We are going to walk through a series of practice created by &lt;a href="http://rosalind.info/problems/"&gt;Rosalind Team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you register an account at Rosalind, you can use their judging system to work through all problems. However, in this case you cannot arbitrarily skip easy levels and it sucks. So I&amp;rsquo;m not going to force you using the system. Luckily, in each problem one set of example data and expected output is given, which can be used for checking our answer.&lt;/p&gt;
&lt;p&gt;Note: Their code assumes Python 2 but everything I mention here is Python 3.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-basics"&gt;Python Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bininfo-first-try"&gt;Bininfo First Try&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#q-dna-counting-dna-nucleotides"&gt;Q DNA: Counting DNA Nucleotides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#q-revc-the-secondary-and-tertiary-structures-of-dna"&gt;Q REVC: The Secondary and Tertiary Structures of DNA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#q-gc-computing-gc-content"&gt;Q: GC: Computing GC Content&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#workthrough"&gt;Workthrough&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#q-next"&gt;Q: (next?)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;其他 Coding 初學指南系列文章：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-intro/"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-linux/"&gt;Chapter 1 &amp;ndash; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;Chapter 2 &amp;ndash; Text Editing (Markdown, Text Editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-version-control/"&gt;Chapter 3 &amp;ndash; Version Control (Git)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/"&gt;Chapter 4 &amp;ndash; Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/"&gt;Appendix 1 &amp;ndash; OSX Development Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-bioinfo-python/"&gt;Appendix 2 &amp;ndash; Python in Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者，用 &lt;a href="/tag/labcoding.html"&gt;labcoding&lt;/a&gt; 這個 tag 也可以找到所有的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="python-basics"&gt;Python Basics&lt;/h2&gt;
&lt;p&gt;Do their &lt;a href="http://rosalind.info/problems/list-view/?location=python-village"&gt;Python Village&lt;/a&gt; problem sets. If any topic you don&amp;rsquo;t know, go read your Python reference.&lt;/p&gt;
&lt;p&gt;Should be very trivial.&lt;/p&gt;
&lt;h2 id="bininfo-first-try"&gt;Bininfo First Try&lt;/h2&gt;
&lt;h3 id="q-dna-counting-dna-nucleotides"&gt;Q DNA: Counting DNA Nucleotides&lt;/h3&gt;
&lt;p&gt;Link: &lt;a href="http://rosalind.info/problems/dna/"&gt;http://rosalind.info/problems/dna/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: use &lt;a href="https://docs.python.org/3/library/collections.html#collections.Counter"&gt;collections.Counter&lt;/a&gt; provided by Python&amp;rsquo;s stdlib&lt;/li&gt;
&lt;li&gt;More Hint: use &lt;code&gt;' '.join&lt;/code&gt; and list comprehension to output the answer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-revc-the-secondary-and-tertiary-structures-of-dna"&gt;Q REVC: The Secondary and Tertiary Structures of DNA&lt;/h3&gt;
&lt;p&gt;Link: &lt;a href="http://rosalind.info/problems/revc/"&gt;http://rosalind.info/problems/revc/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: &lt;a href="https://docs.python.org/3/library/functions.html#reversed"&gt;reversed&lt;/a&gt; for any sequence object and a dict for nucleotide code mapping&lt;/li&gt;
&lt;li&gt;More Hint: done in a list comprehension&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q-gc-computing-gc-content"&gt;Q: GC: Computing GC Content&lt;/h3&gt;
&lt;p&gt;Link: &lt;a href="http://rosalind.info/problems/gc/"&gt;http://rosalind.info/problems/gc/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the first complicated problem that some abstraction should help you come up the solution. Try write some re-usable code blocks, for example, function calls and class definitions.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t worry about the computation complexity&lt;/p&gt;
&lt;h4 id="workthrough"&gt;Workthrough&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;You should implement by yourself before looking my solution. Also I didn&amp;rsquo;t see their official solution so my solution can differ a lot from theirs.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Intuitively, we need to implement a FASTA file parser. FASTA contains a series of sequence reads with unique ID. From a object-oriented viewpoint, we create classes &lt;code&gt;Read&lt;/code&gt; for reads and &lt;code&gt;Fasta&lt;/code&gt; for fasta files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Read&lt;/code&gt; is easy to design and understand,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we need to compute their GC content, add a method for &lt;code&gt;Read&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# ... skipped&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Compute the GC content (in %) of the read.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# put the logic here (think of problem Q DNA)&lt;/span&gt;
        &lt;span class="n"&gt;gc_percent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gc_percent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we have to implement the FASTA parser, which reads all read entries and converts them through &lt;code&gt;Read&lt;/code&gt;. In real world we are dealing with &lt;code&gt;myfasta.fa&lt;/code&gt;-like files, but here the input is string.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fasta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raw_str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Parse a FASTA formated string.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_str&lt;/span&gt;
        &lt;span class="c1"&gt;# convert string into structured reads.&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Parse the string and yield read in Read class.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# though we have no idea right now, the code structure&lt;/span&gt;
        &lt;span class="c1"&gt;# should be something like the following.&lt;/span&gt;
        &lt;span class="n"&gt;raw_lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw_str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;raw_lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I use &lt;code&gt;yield Read(...)&lt;/code&gt;, which may be unfamiliar for Python beginners. It turns &lt;code&gt;parse(self)&lt;/code&gt; function as a generator. Generator makes you focus on the incoming data. Once data is parsed and converted, the result is immediated thrown out by &lt;code&gt;yield&lt;/code&gt;. We don&amp;rsquo;t care about how to collect all the results. In our case, we catch all the results into a list by &lt;code&gt;list(...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So how should we read FASTA file? A simple rule in this case is that every read consists by two continuous row. Also, the first row will always be the first read id.&lt;/p&gt;
&lt;p&gt;All we need is read two lines at the same time. Here &lt;a href="https://docs.python.org/3/library/functions.html#zip"&gt;a Pythonic idiom&lt;/a&gt; is introduced. The following code read two non-overlapping lines,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;first_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_lines&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;second_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By &lt;code&gt;zip(*[iter(s)]*n)&lt;/code&gt; magic, we are very close to implement a full parser. You could find a lot of &lt;a href="http://stackoverflow.com/a/2233247"&gt;explanations&lt;/a&gt; for this magic.&lt;/p&gt;
&lt;p&gt;Read id line percedes with a &lt;code&gt;&amp;gt;&lt;/code&gt; sign, so we could use something like &lt;code&gt;first_line[1:]&lt;/code&gt; or &lt;code&gt;first_line[len('&amp;gt;'):]&lt;/code&gt; for explicity.&lt;/p&gt;
&lt;p&gt;Then sorting the GC% of reads in a FASTA file is easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fasta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fasta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sorted_reads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fasta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# note 1&lt;/span&gt;
&lt;span class="n"&gt;top_gc_read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sorted_reads&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# note 2&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{0:s}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{1:.6f}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# note 3, 4&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;top_gc_read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top_gc_read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code above completes the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sorted(list, key=key_func)&lt;/code&gt; sorts the list based on the return value of key_func applied to each element.&lt;/li&gt;
&lt;li&gt;or &lt;code&gt;top_gc_read = sorted(..., reversed=True)[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;two string with no operands in between will be joint automatically. In this case it is exactly &lt;code&gt;&amp;gt;{0:s}\n{1:.6f}&lt;/code&gt;. This is useful to tidy a super long string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'...'.format()&lt;/code&gt; fills the string with given values. See &lt;a href="https://docs.python.org/3/library/string.html#formatspec"&gt;doc&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In real case FASTA can span across multiple lines, also likely the file we parse is broken. How could we modify this parser to handle these situations?&lt;/p&gt;
&lt;h3 id="q-next"&gt;Q: (next?)&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m super tired now so I&amp;rsquo;ll leave the rest for you. Try those problems within yellow correct ratio range.&lt;/p&gt;</content><category term="Coding"></category><category term="en"></category><category term="labcoding"></category><category term="python"></category></entry><entry><title>Coding 初學指南附錄 - OSX 開發環境</title><link href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/" rel="alternate"></link><published>2016-01-21T23:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-21:/posts/2016/01/lab-coding-appendix-osx-env/</id><summary type="html">&lt;p&gt;我自己在 OSX 上的主觀開發環境設定&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last Edited: Jan, 2016 （如果內容有誤，你可以留言，或用任何管道告訴我）&lt;/p&gt;
&lt;p&gt;以下的設定都蠻主觀的，見人見智。總之我把我的環境分享出來。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#terminal"&gt;Terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#homebrew-git-and-python"&gt;Homebrew, Git and Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#text-editors"&gt;Text Editors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#terminal-multiplexers"&gt;Terminal Multiplexers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-gui"&gt;Git GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#documentation-searcher"&gt;Documentation Searcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc"&gt;Misc.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;其他 Coding 初學指南系列文章：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-intro/"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-linux/"&gt;Chapter 1 &amp;ndash; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;Chapter 2 &amp;ndash; Text Editing (Markdown, Text Editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-version-control/"&gt;Chapter 3 &amp;ndash; Version Control (Git)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/"&gt;Chapter 4 &amp;ndash; Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/"&gt;Appendix 1 &amp;ndash; OSX Development Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-bioinfo-python/"&gt;Appendix 2 &amp;ndash; Python in Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者，用 &lt;a href="/tag/labcoding.html"&gt;labcoding&lt;/a&gt; 這個 tag 也可以找到所有的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="terminal"&gt;Terminal&lt;/h2&gt;
&lt;p&gt;OSX 系統有內建一個 &lt;code&gt;Terminals.app&lt;/code&gt; 能像在 Linux 上一樣使用。他其實使用上沒什麼問題，不過想要調顏色，有更多自定功能的話，許多人會安裝 &lt;a href="http://iterm2.com/"&gt;iTerm2&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="homebrew-git-and-python"&gt;Homebrew, Git and Python&lt;/h2&gt;
&lt;p&gt;OSX 上官方沒有一個管理套件的工具，所以社群自行開發了一個叫做 Homebrew。你可以按照&lt;a href="http://djangogirlstaipei.herokuapp.com/tutorials/installation/"&gt;這篇教學&lt;/a&gt;安裝 Homebrew。&lt;/p&gt;
&lt;p&gt;裝好了之後你可以以下指令去看它該怎麼操作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ brew --help
$ man brew    &lt;span class="c1"&gt;# for full documentation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OSX 雖然內建有 git 與 python，但我們可以用 homebrew 安裝比較標準（新）的版本，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ brew install git python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果 homebrew 有問題可以用 &lt;code&gt;brew doctor&lt;/code&gt; 來檢測。把錯誤訊息問 google 通常就能找到解決方式。&lt;/p&gt;
&lt;h2 id="text-editors"&gt;Text Editors&lt;/h2&gt;
&lt;p&gt;我最常用的是 Vim。OSX 有內建，但也可以用 homebrew 安裝。&lt;/p&gt;
&lt;p&gt;除了 console based 的 Vim，OSX 上也有像 gVim 的 MacVim。一樣能用 homebrew 安裝。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ brew info macvim  &lt;span class="c1"&gt;# 看 MacVim 在安裝有什麼選項可以調整&lt;/span&gt;
$ brew install macvim --override-system-vim --custom-icons
$ brew linkapps macvim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 Macvim 的時候除了 vim 之外，也可以呼叫 &lt;code&gt;mvim&lt;/code&gt; 打開 MacVim。&lt;/p&gt;
&lt;h2 id="terminal-multiplexers"&gt;Terminal Multiplexers&lt;/h2&gt;
&lt;p&gt;你有可能有聽過 screen 或者 tmux。前者在 osx 上有內建但版本很舊，在顯示顏色上會有問題，因此可以透過 homebrew 再安裝新的。但因為 screen 跟系統提供的重覆到了，所以預設不在 homebrew 的 repo 中，要先新增 repo 清單：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew tap homebrew/dupes
brew install screen tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="git-gui"&gt;Git GUI&lt;/h2&gt;
&lt;p&gt;初學 Git 可能會不熟那些指令、常常不知道自己在 git log 哪個位置。這時候有個圖形化的工具會更方便了解。Git 有內建一個 gitk，但比較陽春。&lt;/p&gt;
&lt;p&gt;在 OSX 上可以考慮用 &lt;a href="http://www.sourcetreeapp.com/"&gt;SourceTree&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="documentation-searcher"&gt;Documentation Searcher&lt;/h2&gt;
&lt;p&gt;要一直查 Python 官網有時候還蠻麻煩的，未來學了 HTML CSS 等等不同語言或各種 Python 套件，要查個東西會很費時。所以有人開發了一個離線的 documentation 查詢器叫做 &lt;a href="http://kapeli.com/dash"&gt;Dash&lt;/a&gt;。他要錢但有免費版，似乎是會一直跳提示訊息。&lt;/p&gt;
&lt;h2 id="misc"&gt;Misc.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.alfredapp.com/"&gt;Alfred App&lt;/a&gt;：一個延伸版的 Spotlight，查應用程式很快速，同時也可以跟 Dash 整合讓查 doc 更方便。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://macdown.uranusjr.com/"&gt;Macdown&lt;/a&gt;：OSX 上的 markdown 編輯器。&lt;/li&gt;
&lt;/ul&gt;</content><category term="Coding"></category><category term="zh"></category><category term="labcoding"></category></entry><entry><title>Coding 初學指南－Python</title><link href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/" rel="alternate"></link><published>2016-01-21T22:50:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-21:/posts/2016/01/lab-coding-python/</id><summary type="html">&lt;p&gt;選擇 Python 作為第一個深入學習的語言有很多好處。他的語法跟英文相似、用互動式的方式來操作，方便以邊試邊學、內建的標準函式庫功能豐富、第三方套件，幾乎能用 Python 完成各種事情。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last Edited: Jun, 2017 （如果內容有誤，你可以留言，或用任何管道告訴我）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python 是一種物件導向、直譯式的電腦程式語言，具有近二十年的發展歷史。它包含了一組功能完備的標準庫，能夠輕鬆完成很多常見的任務。&lt;/p&gt;
&lt;p&gt;(From &lt;a href="https://zh.wikipedia.org/wiki/Python"&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;選擇 Python 作為第一個深入學習的語言有很多好處。他的語法跟英文相似，比起其他語言經常用到 &lt;code&gt;;{}()&lt;/code&gt; 來控制語法不同的段落，Python 主要用的是空白與縮排。&lt;/p&gt;
&lt;p&gt;Python 能用互動式的方式（read–eval–print loop, REPL）來操作，以邊試邊做的方法來開發很適合初學者。&lt;/p&gt;
&lt;p&gt;內建的標準庫（standard library）功能很豐富，在網路、文字處理、檔案處理、甚至 GUI 介面都能用它完成。除此之外，它的第三方套件也很多，在 Linux 上很好安裝，這樣幾乎能用 Python 完成各種事情。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;聽說系列&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;聽說 Python 跑很慢，是不是不能用來計算/分析/大檔案？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-2-python-3"&gt;Python 2 還是 Python 3，聽我朋友說…比較好？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;相關資源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introducing-python-python"&gt;Introducing Python（精通 Python）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python_1"&gt;Python 官網&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python_2"&gt;Python 程式設計「超入門」&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-python"&gt;Learning Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-cookbookpython"&gt;Python Cookbook（Python 的錦囊妙計）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fluent-python-python"&gt;Fluent Python（流暢的 Python）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#moocs"&gt;MOOCs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;學習目標&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;其他 Coding 初學指南系列文章：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-intro/"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-linux/"&gt;Chapter 1 &amp;ndash; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;Chapter 2 &amp;ndash; Text Editing (Markdown, Text Editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-version-control/"&gt;Chapter 3 &amp;ndash; Version Control (Git)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/"&gt;Chapter 4 &amp;ndash; Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/"&gt;Appendix 1 &amp;ndash; OSX Development Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#file-a1_python_bioinfo-md"&gt;Appendix 2 &amp;ndash; Python in Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者，用 &lt;a href="/tag/labcoding.html"&gt;labcoding&lt;/a&gt; 這個 tag 也可以找到所有的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="_1"&gt;聽說系列&lt;/h2&gt;
&lt;p&gt;（需要接觸過 Python 之後才能理解）&lt;/p&gt;
&lt;h3 id="python"&gt;聽說 Python 跑很慢，是不是不能用來計算/分析/大檔案？&lt;/h3&gt;
&lt;p&gt;Python 的確執行效率比編譯式的語言差（例：C/C++、Java），但這很可能不是你程式跑得慢的主因，所以也不代表 Python 不能處理計算量高的工作。&lt;/p&gt;
&lt;p&gt;碰到程式跑得比想像中慢的時候，有幾個步驟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;到底是哪幾行程式跑得慢？&lt;/li&gt;
&lt;li&gt;這是最佳的演算法嗎？&lt;/li&gt;
&lt;li&gt;這是最有效率的 Python 語法嗎？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果用到了最後一步情況還是沒有改善的話，就可以開始把那些部份用其他語言改寫，例如：C。Python 能很容易跟 C 語言的結合。而且常見的 C 語言加速，其實都有 Python 套件能支援了，例如 Numpy，所以大部份的時間，都能在不使用 Python 以外的語言完成高量計算。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我在實習時候，也常碰到需要優化的問題。用 Python 我能很輕鬆（一天內）把工作分配到 4 台主機 64 cores 上跑，也許方法不有效率，但比起我花幾天把 Python 改寫成 C/C++，實作更精密有效的算法（還要是 multithread），仔細處理可能的 corner case，平行化之後本來三四天的計算時間我 2 個小時就能收工。&lt;/p&gt;
&lt;p&gt;更重要的是，這個實驗就只跑個兩次。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比起計算時間，開發時間對工程師而言是更加寶貴的。尤其在實驗室，最關心的是這個方法行不行得通，程式跑得慢有很多解決的方式，例如平行化。重點在解決問題，需要用多一點的資源其實不是很重要。&lt;/p&gt;
&lt;p&gt;如果問我 Python 還是 Matlab 比較快？這邊有正經的 &lt;a href="http://www.pyzo.org/python_vs_matlab.html"&gt;Python vs Matlab&lt;/a&gt;。一開始選 Python 慢的話有&lt;a href="http://wiki.scipy.org/PerformancePython"&gt;很多條路可以走&lt;/a&gt;，但 Matlab 呢？ meh&lt;/p&gt;
&lt;p&gt;所以 Python 跑得快不快？它單打獨鬥有極限，但它有很多快樂夥伴。O&amp;rsquo;Reilly 有本 &lt;a href="http://shop.oreilly.com/product/0636920028963.do"&gt;High Performance Python&lt;/a&gt; 值得一看。&lt;/p&gt;
&lt;h3 id="python-2-python-3"&gt;Python 2 還是 Python 3，聽我朋友說…比較好？&lt;/h3&gt;
&lt;p&gt;隨著時間流逝，每過一天我都可以更確信的說&lt;strong&gt;「請學 Python 3」&lt;/strong&gt;。現在有在用 Python 2 多半也是用 2.7 版本，要把 3.3+ 的程式碼改回 2.7 也不難。&lt;/p&gt;
&lt;p&gt;EDIT 2017-06: Python 2.7 確定&lt;a href="https://pythonclock.org/"&gt;在 2020 年會停止官方支援&lt;/a&gt;，這不代表說在那年 Python 2.7 就會瞬間消失，目前世界上有非常多公司會繼續維護他們內部的 Python 2.x 程式碼，但新的專案都預設使用 3.5+ 版本開發。而市面上的書籍也已經都是針對 Python 3.x 撰寫，過往使用中文學習的障礙已經消失。&lt;/p&gt;
&lt;h2 id="_2"&gt;相關資源&lt;/h2&gt;
&lt;p&gt;連同前幾章，如果你要在自己電腦上設定 Python 開發環境，可以參考 &lt;a href="http://djangogirlstaipei.herokuapp.com/tutorials/"&gt;Djang Girls Taipei Tutorial&lt;/a&gt;。另外，&lt;a href="http://wiki.python.org.tw/Python/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8%E5%B0%B1%E4%B8%8A%E6%89%8B"&gt;Python Taiwan Wiki&lt;/a&gt; 有更完整的 Python 學習資源列表。&lt;/p&gt;
&lt;p&gt;O&amp;rsquo;Reilly（歐萊禮）的書，&lt;a href="https://shop.oreilly.com/"&gt;官方線上商店&lt;/a&gt;常有 50% 折扣，PDF/ePub/Mobi 格式都有, 買一次就能輕鬆在電腦、Kindle、eReader 上閱讀，能接受英文的話，十分推薦跟官方購買。中文版就以&lt;a href="https://www.tenlong.com.tw/"&gt;天瓏書局&lt;/a&gt;為主。它也有賣英文紙本，逛實體店很舒服。&lt;/p&gt;
&lt;p&gt;EDIT 2017-06: 自本文撰寫兩年以來，市面上 Python 3.x 中文書已經非常充足，在天瓏實體店甚至有一整個專櫃提供不同難易度、各種應用的專書。底下列出的書只是我個人的推薦與偏好，建議有空到書店親自翻一翻更能找到自己喜歡的學習方式。&lt;/p&gt;
&lt;p&gt;除了書籍之外，現在越來越多以影片、互動形式的教學，像 Jessica McKellar 錄製的 &lt;a href="http://shop.oreilly.com/product/110000448.do"&gt;Introduction to Python&lt;/a&gt; 教學影片即非常受歡迎。因為我並沒有親自玩過這些新課程，它們並沒有列於此，但都歡迎讀者嘗試。&lt;/p&gt;
&lt;h3 id="introducing-python-python"&gt;Introducing Python（精通 Python）&lt;/h3&gt;
&lt;p&gt;O&amp;rsquo;Reilly Python 系列的書都寫得很好。這本是比較新出的，好處是它針對初學者，比較薄，能在短時間看完，文字很流暢。想要快速掌握基礎的語法的話，建議閱讀 Chp1 到 Chp7，以及 Chp8 File I/O 部份。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Introducing Python&amp;rdquo;, Bill Lubanovic. &lt;em&gt;O&amp;rsquo;Reilly&lt;/em&gt;, 2014.11&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920028659.do"&gt;英文書&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tenlong.com.tw/items/9863477311?item_id=1007464"&gt;中文實體書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="python_1"&gt;Python 官網&lt;/h3&gt;
&lt;p&gt;Python 的官網除了查語言特性之外，還能用來學習怎麼使用 stdlib。Python 標準函式庫功能包山包海，在你想要做什麼之前，都應該到官網查看看是不是內建 module 就已經提供功能了。除外，還有一個簡潔的 tutorial，供初學者參考，適合有學過其他語言的人。我認為這份寫得非常好，苦於沒有中文，據以前經驗不太容易推廣，但值得一讀。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Python Tutorial&amp;rdquo;, Official Python Documentation, Python Devs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/"&gt;連結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pythondoc.com/pythontutorial3/index.html"&gt;簡中翻譯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.python.org.tw/3/tutorial/index.html"&gt;繁中翻譯&lt;/a&gt;（進行中）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="python_2"&gt;Python 程式設計「超入門」&lt;/h3&gt;
&lt;p&gt;如果你完全沒有任何程式設計的基礎，例如不懂什麼是變數、如果寫程式控制電腦行為、什麼是命令列模式，那麼這本入門書應該很適合你。它用圖解的方式去解釋何謂迴圈、if-else 條件判斷、物件導向概念。這邊所列的其他「入門書」，都會假設你大概知道上述這些概念。到了最後兩章可能會突然變得複雜，這時候可以再回頭看看其他入門書，應該就會有辦法閱讀。&lt;/p&gt;
&lt;p&gt;《Python 程式設計「超入門」》，鎌田正浩　著、陳禹豪、林子政 譯。旗標 2016.11&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://amzn.asia/dQgghO8"&gt;日文書&lt;/a&gt; (source: Amazon)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tenlong.com.tw/products/9789863123798"&gt;中文實體書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learning-python"&gt;Learning Python&lt;/h3&gt;
&lt;p&gt;雖然名稱看起來很像是 Python 的入門書，但它的篇幅已經來到 1600 頁，實在無法推薦給初學者。它在一本書內把 Python 幾乎所有語言特性都說清楚，同時考慮到 Python 2 和 3 版本。當你想要了解，例如 MRO 的順序、何謂 unbounded, bound method，這本書詳細的程度不會讓你失望，只怕你沒空讀。&lt;/p&gt;
&lt;p&gt;我當初看的是這一本 3ed 中文版（現已絕版），那時還沒有考慮 Python 3。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Learning Python&amp;rdquo; 5ed, Mark Lutz. &lt;em&gt;O&amp;rsquo;Reilly&lt;/em&gt;, 2013.06&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920028154.do"&gt;英文書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="python-cookbookpython"&gt;Python Cookbook（Python 的錦囊妙計）&lt;/h3&gt;
&lt;p&gt;這本不是入門書但很適合深入了解 Python，並讓自己的程式碼寫得更 Pythonic。裡面介紹了很多寫法慣例 idioms，同時也有中文版。非常值得在未來比較懂 Python 時買來看。&lt;/p&gt;
&lt;p&gt;作者之一 David Beazley 是 PyCon TW 2013 的 Keynote。他平常就是專門教 Python 的講師，他在 PyCon 講過的「所有 talk 與 tutorial」，如 &lt;a href="http://www.dabeaz.com/coroutines/"&gt;concurrency&lt;/a&gt;, &lt;a href="http://www.dabeaz.com/modulepackage/index.html"&gt;packaging&lt;/a&gt;, &lt;a href="https://www.youtube.com/watch?v=MCs5OvhV9S4"&gt;async io&lt;/a&gt; 等等都值得一看。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Python Cookbook&amp;rdquo; 3ed, David Beazley and Brian K. Jones. &lt;em&gt;O&amp;rsquo;Reilly&lt;/em&gt;, 2013.05&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920027072.do"&gt;英文書&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tenlong.com.tw/items/9863470686"&gt;中文實體書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fluent-python-python"&gt;Fluent Python（流暢的 Python）&lt;/h3&gt;
&lt;p&gt;當它是詳細、擴充版的 &amp;ldquo;Python Cookbook&amp;rdquo;，實際上書中也常常引用 David 的話。講述更多 Python 初介紹時不會深談的語言特性。如：MRO, Mixin, decorator, closure, metaprogramming&lt;/p&gt;
&lt;p&gt;每章最後的 Future Reading 與 Soapbox 旁徵博引，除了更細節的參考資料，還有當初 Python 為何如此設計等考量與討論的歷史、發展、與各語言比較。非常適合做為邁向 Python core developer 的參考書。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Fluent Python&amp;rdquo;, Luciano Ramalho. &lt;em&gt;O&amp;rsquo;Reilly&lt;/em&gt;, 2015.07&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://shop.oreilly.com/product/0636920032519.do"&gt;英文書&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tenlong.com.tw/items/986347911X"&gt;中文實體書&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="moocs"&gt;MOOCs&lt;/h3&gt;
&lt;p&gt;關於 MOOCs 我有看過 Codecademy Python Track 以及 Coursera &amp;ldquo;An Introduction to Interactive Programming in Python&amp;rdquo; 這兩門課。我覺得最大的缺點就是講 Python 2.7，Python 3.x 的好用功能與差異都沒提；再來講課的 code 範例並不是使用 idiomatic Python syntax，在初學就沒養成好習慣與慣用語法有點可惜。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Codecademy Python Track &lt;a href="http://www.codecademy.com/en/tracks/python"&gt;http://www.codecademy.com/en/tracks/python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Coursera: An Introduction to Interactive Programming in Python &lt;a href="https://www.coursera.org/course/interactivepython"&gt;https://www.coursera.org/course/interactivepython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;學習目標&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打開自己 Linux 裡的 Python3，跟著學習用的參考資料動手操作。用 REPL 以及運行腳本兩種方法來執行 Python 程式。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;學習使用 pip 和 venv (virtualenv) 來管理 Python 套件與環境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: Python 官網是你的好夥伴。你可以在&lt;a href="https://docs.python.org/3/installing/"&gt;這裡 (pip)&lt;/a&gt; 和&lt;a href="https://docs.python.org/3/library/venv.html?highlight=venv"&gt;這裡 (venv)&lt;/a&gt; 找到兩者的教學。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://rg3.github.io/youtube-dl/"&gt;youtube-dl&lt;/a&gt; 是一個用來下載 Youtube、Crunchyroll 等各大影音串流網站影片的工具。除了用 Linux 的套件管理工具安裝它，它其實是個用 Python 寫成的套件。為了避免跟 Linux 系統環境相衝，請開一個 Python 虛擬環境，並在裡面用 pip 安裝它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note: youtube-dl 除了單純做下載串流檔之外，還支援轉檔、封裝、後製等影像處理，這需要 libav 或 ffmpeg 任一影像處理套件。在 Debian 系列的 Linux 上 libav 會好裝一點。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 Python 解決一些實驗室會碰到的 Bioinfo 問題。有個網站 Rosalind 出了一系列的題目，我選了一些讓各位練習，請參考&lt;a href="#file-a1_python_bioinfo-md"&gt;附錄 1&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;EDIT 2016-05-22: 把 &lt;a href="https://www.ptt.cc/bbs/Python/M.1463750830.A.DA8.html"&gt;ptt 發文&lt;/a&gt; 的內容更新上來，增加一些新書和中文翻譯；調整推薦的順序。&lt;br&gt;
EDIT 2017-06-20: 更新書籍資訊與 2/3 比較。&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category><category term="labcoding"></category><category term="python"></category></entry><entry><title>Coding 初學指南－版本控制</title><link href="https://blog.liang2.tw/posts/2016/01/lab-coding-version-control/" rel="alternate"></link><published>2016-01-21T22:40:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-21:/posts/2016/01/lab-coding-version-control/</id><summary type="html">&lt;p&gt;所謂的版本控制就跟玩遊戲一樣可以存取「進度點」，破關前都會保存進度，這樣破關失敗的時候可以還成到保存進度的狀態，再重新打怪。版本控制用在管理程式碼時，就方便讓自己在把 code 搞炸掉的時候，還能回到先前有保存的狀態。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last Edited: Jan, 2016 （如果內容有誤，你可以留言，或用任何管道告訴我）&lt;/p&gt;
&lt;p&gt;所謂的版本控制就跟玩遊戲一樣可以存取「進度點」，破關前都會保存進度，這樣破關失敗的時候可以還成到保存進度的狀態，再重新打怪。版本控制用在管理程式碼時，就方便讓自己在把 code 搞炸掉的時候，還能回到先前有保存的狀態。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id="_1"&gt;為什麼使用版本控制？&lt;/h3&gt;
&lt;p&gt;在軟體開發的過程中，程式碼每天不斷地產出，過程中會發生以下情況：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;檔案被別人或自己覆蓋，甚至遺失&lt;/li&gt;
&lt;li&gt;想復原前幾天寫的版本&lt;/li&gt;
&lt;li&gt;想知道跟昨天寫的差在哪裡？&lt;/li&gt;
&lt;li&gt;是誰改了這段程式碼，為什麼 ？&lt;/li&gt;
&lt;li&gt;軟體發行，需要分成維護版跟開發版&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，我們希望有一種機制，能夠幫助我們：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以隨時復原修改，回到之前的版本&lt;/li&gt;
&lt;li&gt;多人協作時，不會把別人的東西蓋掉&lt;/li&gt;
&lt;li&gt;保留修改歷史記錄，以供查詢&lt;/li&gt;
&lt;li&gt;軟體發行時，可以方便管理不同版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(From: &lt;a href="http://dylandy.github.io/Easy-Git-Tutorial/"&gt;Git 教學研究站&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;能做到版本控制的工具有很多，但目前主流就是 Git。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;為什麼使用版本控制？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-version-control"&gt;Git (Version Control)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;操作建議&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#commit-style"&gt;Commit Style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;常見問題&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#conflict"&gt;Conflict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#push-fail"&gt;Push fail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;相關資源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#code-school-try-git"&gt;Code School - Try Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git"&gt;Git 教學研究站&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#code-school-git-real"&gt;Code School - Git Real&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learn-git-branching"&gt;Learn Git Branching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-tutorial-by-atlassian"&gt;Git Tutorial by Atlassian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;學習目標&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;其他 Coding 初學指南系列文章：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-intro/"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-linux/"&gt;Chapter 1 &amp;ndash; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;Chapter 2 &amp;ndash; Text Editing (Markdown, Text Editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-version-control/"&gt;Chapter 3 &amp;ndash; Version Control (Git)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/"&gt;Chapter 4 &amp;ndash; Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/"&gt;Appendix 1 &amp;ndash; OSX Development Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-bioinfo-python/"&gt;Appendix 2 &amp;ndash; Python in Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者，用 &lt;a href="/tag/labcoding.html"&gt;labcoding&lt;/a&gt; 這個 tag 也可以找到所有的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="git-version-control"&gt;Git (Version Control)&lt;/h1&gt;
&lt;p&gt;Git 是一個版本控制的工具。&lt;/p&gt;
&lt;p&gt;Git 會在你的專案（repo）目錄&lt;sup id="fnref:註1"&gt;&lt;a class="footnote-ref" href="#fn:註1"&gt;1&lt;/a&gt;&lt;/sup&gt;底下建一個 &lt;code&gt;.git&lt;/code&gt; 的資料夾來管理這些「進度點」，而不會去動專案其他路徑裡的東西。&lt;/p&gt;
&lt;p&gt;這些進度點可以傳到 server 上，別人下載下來的時候就可以除了得到現在的 code 以外，還能看到過去開發的記錄；而別人上傳了他的更新進度點之後，你抓下來就可以得到他更改的進度。這個就是「同步」的概念，多人之間能彼此共享、更新彼此開發的成果。&lt;/p&gt;
&lt;p&gt;能夠處理 Git 同步操作的伺服器就叫做 git server。&lt;a href="https://github.com/"&gt;Github&lt;/a&gt; 就是一間公司提供免費的 git server 讓大家同步公開的 Git 專案。很多 Linux 的工具都使用 git 來讓大家合作開發，也有不少工具已經把 git server 轉到了 Github 上面。所以非常多人在用，因此建議大家不妨申請一個 GitHub 帳號。&lt;/p&gt;
&lt;p&gt;Git 雖然最常用來管理程式碼，但它其實可以有效地管理任何純文字的檔案，也可以把 binary  檔案加到 repo 中。&lt;/p&gt;
&lt;p&gt;（可能需要有一些 git 操作經驗才能了解以下的術語）&lt;/p&gt;
&lt;h2 id="_2"&gt;操作建議&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;建立多而小的進度點&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每完成一系列的更動，就趕快 add 和 commit。一開始會煩，但這是好習慣。&lt;/p&gt;
&lt;p&gt;日後更了解 git 操作的時候，會學到一些進階的指令（如 &lt;code&gt;git rebase -i&lt;/code&gt;）就能把多個 commit 合成為一個。但要拆開一個大的 commit 會比較複雜。&lt;/p&gt;
&lt;h3 id="commit-style"&gt;Commit Style&lt;/h3&gt;
&lt;p&gt;常見的 commit message 大概會是一行文。如果這個更動需要說明，那就建議按照下面的格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一行少於 50 個字元&lt;/li&gt;
&lt;li&gt;第二行留空&lt;/li&gt;
&lt;li&gt;第三行以後格式隨意，但單行不超過 75 個字元&lt;/li&gt;
&lt;li&gt;善用條列式說明&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是範例（From &lt;a href="http://git-scm.com/book/ch5-2.html"&gt;Git Book&lt;/a&gt;）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to
about 72 characters or so.  In some contexts, the first
line is treated as the subject of an email and the rest of
the text as the body.  The blank line separating the
summary from the body is critical (unless you omit the body
entirely); tools like rebase can get confused if you run
the two together.

Further paragraphs come after blank lines.

  - Bullet points are okay, too

  - Typically a hyphen or asterisk is used for the bullet,
    preceded by a single space, with blank lines in
    between, but conventions vary here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ps 你可以找到很多有趣的 commit message。例如：&lt;a href="http://www.commitlogsfromlastnight.com/"&gt;抱怨&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="_3"&gt;常見問題&lt;/h2&gt;
&lt;h4 id="conflict"&gt;Conflict&lt;/h4&gt;
&lt;p&gt;當單機只有在一個 branch 上開發的時候，很難有 conflict 的問題。但碰到多人共同開發，或把多條 branch merge 在一起時就會有 conflict。&lt;/p&gt;
&lt;p&gt;Conflict 的發生，最常見的就是兩個人各自修改了同一個檔案相近位置的內容。這使得 git 在把兩個人的更動融合在一起的時候，會不知道到底要用誰的更動，這時候就無法自動處理了。&lt;/p&gt;
&lt;p&gt;可以搜尋「resolve git conflict」找到相關的解決辦法。&lt;/p&gt;
&lt;h4 id="push-fail"&gt;Push fail&lt;/h4&gt;
&lt;p&gt;這通常發在 server 上的進度點比自己本機的還要新，所以必須先把 server 上的更新同步下來。如果都是同一個 branch 的話，你可以試著用 &lt;code&gt;git pull --rebase&lt;/code&gt; 去避免額外的 merge。&lt;/p&gt;
&lt;h2 id="_4"&gt;相關資源&lt;/h2&gt;
&lt;h3 id="code-school-try-git"&gt;Code School - Try Git&lt;/h3&gt;
&lt;p&gt;互動式練習，能懂最基本的 Git 指令操作，日常操作也主要是這些指令。並且會帶你建立一個 GitHub 帳號。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://try.github.io"&gt;https://try.github.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="git"&gt;Git 教學研究站&lt;/h3&gt;
&lt;p&gt;中文的介紹，他的互動式練習就是上面 Try Git 的中文化版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dylandy.github.io/Easy-Git-Tutorial/index.html"&gt;http://dylandy.github.io/Easy-Git-Tutorial/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="code-school-git-real"&gt;Code School - Git Real&lt;/h3&gt;
&lt;p&gt;更完整的互動式練習，如果全部的關卡都做完的話，大部份需要用 git 的狀況都練習過了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gitreal.codeschool.com"&gt;http://gitreal.codeschool.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="learn-git-branching"&gt;Learn Git Branching&lt;/h3&gt;
&lt;p&gt;顧名思義，是個練習操作 git branch 的線上學習網站。不過前幾個關卡在介紹 commit 相關的操作，可以試一試。真要練習可以先完成 Main 以下 levels：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction Sequence&lt;/li&gt;
&lt;li&gt;Ramping Up&lt;/li&gt;
&lt;li&gt;Moving Work Around&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其他稍難一點，視情況跳過。但如果想學 git 比較複雜的指令可以回來看它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pcottle.github.io/learnGitBranching/"&gt;http://pcottle.github.io/learnGitBranching/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="git-tutorial-by-atlassian"&gt;Git Tutorial by Atlassian&lt;/h3&gt;
&lt;p&gt;蠻完整的教學，但可能稍難一點。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials"&gt;https://www.atlassian.com/git/tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;學習目標&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用 Git 管理這些練習的筆記（呈接在 Text Editors 的練習）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以試著對它做一些 git 指令操作：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --oneline --graph&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立 dotfiles 和 dotvim 來管理你的環境設定檔。&lt;br&gt;
   dotfiles 就是用來儲存 &lt;code&gt;.xxx&lt;/code&gt; 的檔案們，像是 &lt;code&gt;.bashrc&lt;/code&gt; 、 &lt;code&gt;.screenrc&lt;/code&gt; 、 &lt;code&gt;.tmux.conf&lt;/code&gt; 、 &lt;code&gt;.gitconfig&lt;/code&gt; 等等，一般可能存放在 &lt;code&gt;~/.xxx&lt;/code&gt; 或 &lt;code&gt;~/.config/xxx&lt;/code&gt; 之類。用版本控制的好處是，這樣在不同的 server 之間設定可以同步。&lt;br&gt;
   dotvim 是存放 &lt;code&gt;~/.vim&lt;/code&gt; 的 Vim 設定檔。這些設定檔可以透過 soft link 連結回他們原本應該在的位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意！永遠不要把 private key 放入版本控制中！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: 搜尋 dotfiles 就會有很多範例（Ex &lt;a href="https://github.com/ccwang002/dotfiles"&gt;我的&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立自己的 Github 帳號，並把 dotfiles / dotvim repo 同步（&lt;strong&gt;push&lt;/strong&gt;）到Github。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: 建立設立好 ssh key pair 使用 ssh 上傳。Github 有&lt;a href="https://help.github.com/articles/generating-ssh-keys/"&gt;完整的教學&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:註1"&gt;
&lt;p&gt;所謂的專案目錄就是下 &lt;code&gt;git init&lt;/code&gt; 指令的目錄。&amp;#160;&lt;a class="footnote-backref" href="#fnref:註1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="labcoding"></category></entry><entry><title>Coding 初學指南－文字編輯</title><link href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/" rel="alternate"></link><published>2016-01-21T22:30:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-21:/posts/2016/01/lab-coding-text-editing/</id><summary type="html">&lt;p&gt;這個章節會帶大家認識一個很簡單的純文字格式 Markdown，方便大家整理筆記。同時希望大家學會一個 terminal based 的文字編輯器，方便往後在 server 環境底下的操作。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last Edited: Jan, 2016 （如果內容有誤，你可以留言，或用任何管道告訴我）&lt;/p&gt;
&lt;p&gt;這個章節會帶大家認識一個很簡單的純文字格式 Markdown，方便大家整理筆記。同時希望大家學會一個 terminal based 的文字編輯器，方便往後在 server 環境底下的操作。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#markdown"&gt;Markdown&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;相關資源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#markdown_1"&gt;Markdown 語法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;學習目標&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#text-editor"&gt;Text Editor&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#nano"&gt;Nano&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emacs"&gt;Emacs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim"&gt;Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim_1"&gt;Vim 相關資源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#open-vim"&gt;Open Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim-ptt"&gt;學習 Vim 的心法與攻略 (ptt)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim-adventure"&gt;Vim adventure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#vim_2"&gt;Vim 本身的使用手冊&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;學習目標&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#regex"&gt;正規表示式 Regex&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#regex_1"&gt;Regex 語法派別&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;相關資源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#regex-one"&gt;Regex One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#regex-101"&gt;Regex 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;其他 Coding 初學指南系列文章：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-intro/"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-linux/"&gt;Chapter 1 &amp;ndash; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;Chapter 2 &amp;ndash; Text Editing (Markdown, Text Editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-version-control/"&gt;Chapter 3 &amp;ndash; Version Control (Git)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/"&gt;Chapter 4 &amp;ndash; Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/"&gt;Appendix 1 &amp;ndash; OSX Development Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-bioinfo-python/"&gt;Appendix 2 &amp;ndash; Python in Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者，用 &lt;a href="/tag/labcoding.html"&gt;labcoding&lt;/a&gt; 這個 tag 也可以找到所有的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="markdown"&gt;Markdown&lt;/h1&gt;
&lt;p&gt;這是一個簡便的語法，它的概念是在純文字的檔案中用一些簡單的標記，就能做出大小標題、粗斜體、超連結、表格、程式碼上色等語法。&lt;/p&gt;
&lt;p&gt;如果大家了解網頁的格式 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML"&gt;HTML&lt;/a&gt; 的話，那 markdown 的語法能直接對應到 HTML 的語法，所以這個格式在網路的世界十分流行。它的副檔名為 &lt;code&gt;.md&lt;/code&gt;，近代程式的 REAME 許多都用 markdown 寫成（例：&lt;code&gt;README.md&lt;/code&gt;）&lt;/p&gt;
&lt;h2 id="_1"&gt;相關資源&lt;/h2&gt;
&lt;h3 id="markdown_1"&gt;Markdown 語法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://markdown.tw/"&gt;http://markdown.tw/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;學習目標&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;這一系列的筆記就是用 markdown 寫成，你可以在&lt;a href="https://github.com/ccwang002/ccwang002.github.io/tree/src/content/blogs/2016-01"&gt;這裡&lt;/a&gt;找到它的原始檔。&lt;/li&gt;
&lt;li&gt;試著把 Linux 學習過的指令，或者自己常用的組合指令用 markdown 記錄。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="text-editor"&gt;Text Editor&lt;/h1&gt;
&lt;p&gt;在 Linux 的世界很多都是純文字檔案，再加上一些規定的語法成為新的格式。前面的 markdown 就是個例子。甚至許多可以執行的程式都只是個腳本檔，能用一般的編輯器（editor）打開就能讀懂。你可以試試&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cd is a shell script&lt;/span&gt;
nano &lt;span class="sb"&gt;`&lt;/span&gt;which &lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;       &lt;span class="c1"&gt;# thanks TP&amp;#39;s idea&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;常見的 editor 有：nano、vi、vim、emacs。到底什麼是最好用的文字編輯器，這是一場永無止盡的戰爭，近年來又有 Notepad++(GUI)、Sublime Text (GUI)、Neovim 的加入，這話題將不會有結論。對初學者而言，至少學會一個 editor 是必要的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然一開始都說是介紹文字編輯器，但後來會開始學程式設計，所以最後大家在討論的都是「程式碼的編輯器」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;當在編輯一些設定檔、程式碼時，為了避免打錯關鍵字但難以查覺，多數人會把程式碼的關鍵字上色。按照程式碼不同的屬性、功能上色之後，多數人發現能更好的理解程式的結構，因此 editor 大多帶有語法上色（syntax highlighting）。&lt;/p&gt;
&lt;p&gt;除了語法上色，這些 editor 都有自己的設定檔規範，可以讓使用者自行修改 editor 的行為。把自己常見的編輯器改得合乎自己習慣，是長期生活在 terminal 世界的第一步，大家可以參考（抄）別人的範本開始。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;讓自己的編輯器有家的感覺。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了設定檔之外，功能多的編輯器還會有「外掛」的功能，可以讓使用者增加自己的套件。這也等大家熟悉環境之後再自行玩玩吧。&lt;/p&gt;
&lt;h2 id="nano"&gt;Nano&lt;/h2&gt;
&lt;p&gt;這是一個操作簡單好懂的編輯器，&lt;del&gt;沒有語法上色&lt;/del&gt;&lt;sup id="fnref:註1"&gt;&lt;a class="footnote-ref" href="#fn:註1"&gt;1&lt;/a&gt;&lt;/sup&gt;。多數的系統都有內建，所以到一個新的環境時幾乎都能使用。&lt;/p&gt;
&lt;p&gt;鳥哥有教。其實直接執行它 &lt;code&gt;nano&lt;/code&gt; 它的指令都會顯示在編輯畫面中。&lt;/p&gt;
&lt;h2 id="emacs"&gt;Emacs&lt;/h2&gt;
&lt;p&gt;抱歉，我不會。但它是一個很好的編輯器。（誠徵大大補全）&lt;/p&gt;
&lt;h2 id="vim"&gt;Vim&lt;/h2&gt;
&lt;p&gt;一個老字號但維持穩定開發的編輯器。他有個特色是編輯器的模式，有些模式能編輯文字，有些不行，但能做選取、搜尋等動作。還有特有的指令合成方式（像連續技、buff 這樣）&lt;/p&gt;
&lt;p&gt;初學者通常會難以習慣，初期不熟模式、指令記不住的話會很難操作。所以建議一開始先記住最基本的指令，隨時掌握自己在的模式，日後再慢慢加深對 vim 的了解。&lt;/p&gt;
&lt;p&gt;如果真的很沒概念，鳥哥也有寫介紹。&lt;/p&gt;
&lt;h2 id="vim_1"&gt;Vim 相關資源&lt;/h2&gt;
&lt;h3 id="open-vim"&gt;Open Vim&lt;/h3&gt;
&lt;p&gt;互動式的線上學習網站，很短，跟著操作完能會 Vim 基本動作、存檔。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.openvim.com/"&gt;http://www.openvim.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vim-ptt"&gt;學習 Vim 的心法與攻略 (ptt)&lt;/h3&gt;
&lt;p&gt;了解最常用的 normal 與 insert 模式及最基本的指令。這篇的內容理解之後，就能用 vim 處理文字編輯了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ptt.cc/bbs/Editor/M.1264056747.A.885.html"&gt;https://www.ptt.cc/bbs/Editor/M.1264056747.A.885.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vim-adventure"&gt;Vim adventure&lt;/h3&gt;
&lt;p&gt;如果很難學習 &lt;code&gt;hjkl&lt;/code&gt;、&lt;code&gt;wb&lt;/code&gt; 移動的話，這是個要用 vim 指令控制的小遊戲。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://vim-adventures.com/"&gt;http://vim-adventures.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="vim_2"&gt;Vim 本身的使用手冊&lt;/h3&gt;
&lt;p&gt;可以使用 &lt;code&gt;vimtutor&lt;/code&gt; 指令，或者在 vim normal 模式時鍵入 &lt;code&gt;:help&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="_3"&gt;學習目標&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;能在 terminal 中編修一個文字檔名為 &lt;code&gt;foo.txt&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: try nano&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nano foo.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搭配 root 權限修改系統的設定檔（你在鳥哥可能有經驗了）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: try sudo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能在 console 中編寫程式碼。用 1. 的方案也可，但建議再試試看另外一個&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: try vi, vim or emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 editor 設定讓它更符合自己的習慣。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: for vim, try editing &lt;code&gt;~/.vimrc&lt;/code&gt;; for emacs, try editing &lt;code&gt;~/.emacs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 terminal editor 使用 markdown 格式記錄這些練習的筆記與答案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="regex"&gt;正規表示式 Regex&lt;/h1&gt;
&lt;p&gt;Vim 在 normal 模式下能用 &lt;code&gt;/{pattern}&lt;/code&gt; 搜尋文中的字串。除了直接把想要查的字串寫在 pattern 裡以外，還可以設計規則找出符合 pattern 但不一樣的結果。這樣的規則稱之為正規表示式（Regular Expression, or regex）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;想做很複雜的字串比對時，都應該考慮是否能使用 regex&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要做字串比對的地方，工具通常都會提供使用 regex，例如 &lt;code&gt;grep&lt;/code&gt;、&lt;code&gt;sed&lt;/code&gt;。Vim 與 Python 也都有提供 regex 的功能。&lt;/p&gt;
&lt;h3 id="regex_1"&gt;Regex 語法派別&lt;/h3&gt;
&lt;p&gt;既然 regex 是一套字串比對的規則，就有規範它的語法。主要的 regex 語法有兩大類：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BRE (basic regex)&lt;ul&gt;
&lt;li&gt;Ex. &lt;code&gt;[:alnum:]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ERE (extended regex)&lt;ul&gt;
&lt;li&gt;Ex. &lt;code&gt;\w&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Linux 指令當中通常會因為使用 regex 語法的不同分成多個指令&lt;sup id="fnref:註2"&gt;&lt;a class="footnote-ref" href="#fn:註2"&gt;2&lt;/a&gt;&lt;/sup&gt;。例如 grep 使用 BRE；egrep 使用 ERE。&lt;/p&gt;
&lt;p&gt;與文字編輯相關的工具，像 Vim、Python、Perl&lt;sup id="fnref:註3"&gt;&lt;a class="footnote-ref" href="#fn:註3"&gt;3&lt;/a&gt;&lt;/sup&gt; 也有他們各自寫 regex 的方式，但多少都與前兩大類相似，使用時都應該先查一下他們的語法。Vim 可以用 &lt;code&gt;:help regex&lt;/code&gt; 查看。&lt;/p&gt;
&lt;h2 id="_4"&gt;相關資源&lt;/h2&gt;
&lt;h3 id="regex-one"&gt;Regex One&lt;/h3&gt;
&lt;p&gt;主要是介紹 pcre 的語法，每一個 example 多介紹一個新的語法。接著還有個 practical examples 練習整理不同的語法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://regexone.com/"&gt;http://regexone.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="regex-101"&gt;Regex 101&lt;/h3&gt;
&lt;p&gt;regex 很容易寫到自己都看不懂，這是一個幫助了解自己或別人寫好的 regex pattern 的網站。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://regex101.com/"&gt;https://regex101.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:註1"&gt;
&lt;p&gt;nano 其實有辦法做語法上色喔，詳見 &lt;a href="https://wiki.archlinux.org/index.php/Nano"&gt;Arch wiki&lt;/a&gt; 及 &lt;a href="https://github.com/scopatz/nanorc"&gt;nanorc&lt;/a&gt;。Thanks @concise&amp;#160;&lt;a class="footnote-backref" href="#fnref:註1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:註2"&gt;
&lt;p&gt;哪些指令有無支援 regex 以及支援的語法可以參考 &lt;a href="https://www.debian.org/doc/manuals/debian-reference/ch01.en.html#_unix_text_tools"&gt;Debian Reference&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:註2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:註3"&gt;
&lt;p&gt;Perl 的 regex 語法又稱為 &lt;strong&gt;pcre&lt;/strong&gt; style，常被其他工具使用。例如：php&amp;#160;&lt;a class="footnote-backref" href="#fnref:註3" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="labcoding"></category></entry><entry><title>Coding 初學指南－Linux</title><link href="https://blog.liang2.tw/posts/2016/01/lab-coding-linux/" rel="alternate"></link><published>2016-01-21T21:30:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-21:/posts/2016/01/lab-coding-linux/</id><summary type="html">&lt;p&gt;Last Edited: Jan, 2016 （如果內容有誤，你可以留言，或用任何管道告訴我）&lt;/p&gt;
&lt;p&gt;學習使用 Linux 是第一個比較大的障礙，因為會在短時間接觸到非 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last Edited: Jan, 2016 （如果內容有誤，你可以留言，或用任何管道告訴我）&lt;/p&gt;
&lt;p&gt;學習使用 Linux 是第一個比較大的障礙，因為會在短時間接觸到非常多新的東西。後面的東西多少都與 Linux 相關，而 Linux 難的部份在開始使用 terminal 來操作「整台電腦」，對很習慣使用視窗介面的人會覺得很不直覺。好在近年幾個主流的 Linux Distribution 都有很好的圖形介面（正確稱 Desktop Environment），所以一開始能漸近地適應 terminal 操作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在實驗室 server 上開發，「能在 terminal 裡做事情」是必須的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#linuxunixbsdnix"&gt;Linux、Unix、BSD、*nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#distro"&gt;Distro 簡介&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#redhat-centos-fedora"&gt;Redhat / CentOS / Fedora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debian-ubuntu"&gt;Debian / Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#archlinux"&gt;ArchLinux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gnomekdexfcelxde"&gt;桌面環境 GNOME、KDE、XFCE、LXDE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;相關資源&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;鳥哥的私房菜&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;各章節重點整理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#introduction-to-linux-on-edx-course"&gt;Introduction to Linux on edX course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#debian-user-manual"&gt;Debian User Manual&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-highlights"&gt;Chapter Highlights&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;學習目標&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;其他 Coding 初學指南系列文章：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-intro/"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-linux/"&gt;Chapter 1 &amp;ndash; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;Chapter 2 &amp;ndash; Text Editing (Markdown, Text Editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-version-control/"&gt;Chapter 3 &amp;ndash; Version Control (Git)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/"&gt;Chapter 4 &amp;ndash; Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/"&gt;Appendix 1 &amp;ndash; OSX Development Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-bioinfo-python/"&gt;Appendix 2 &amp;ndash; Python in Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者，用 &lt;a href="/tag/labcoding.html"&gt;labcoding&lt;/a&gt; 這個 tag 也可以找到所有的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="linuxunixbsdnix"&gt;Linux、Unix、BSD、*nix&lt;/h2&gt;
&lt;p&gt;Linux 和 Unix 是不同的，但對初學者來說他們的分別不容易查覺，兩者的終端指令很相似，也因此有了 *nix 的通稱。Linux 介紹書多半會把他們的歷史好好的說一遍&lt;sup id="fnref:註2"&gt;&lt;a class="footnote-ref" href="#fn:註2"&gt;1&lt;/a&gt;&lt;/sup&gt;，有興趣聽軟體發展故事的就多留意這部份。&lt;/p&gt;
&lt;p&gt;不完整地主要分成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redhat, CentOS, Fedora&lt;/li&gt;
&lt;li&gt;Debian, Ubuntu, Linux Mint&lt;/li&gt;
&lt;li&gt;ArchLinux&lt;/li&gt;
&lt;li&gt;openSUSE&lt;/li&gt;
&lt;li&gt;FreeBSD, OpenBSD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些 distributions (distros)。其實 Linux、BSD (or Unix) 的系統非常多&lt;sup id="fnref:註3"&gt;&lt;a class="footnote-ref" href="#fn:註3"&gt;2&lt;/a&gt;&lt;/sup&gt;，但對初入 Linux 的使用者，應該要找比較熱門的 distro 使用，才好找資料。&lt;/p&gt;
&lt;p&gt;上面條列的方式是有意義的，我把類似的 distro 放在同一排，只要學了其中一個，同排的其他都很好上手。其中前兩排是兩大家族反映兩種生態。我們實驗室的大 server 用的是 CentOS；但近年來我自己的電腦已經漸漸換到 Debian 上。&lt;/p&gt;
&lt;h2 id="distro"&gt;Distro 簡介&lt;/h2&gt;
&lt;p&gt;以下是我不負責任的主觀介紹。從介紹篇幅就知道我是個傾向 Debian 的人。&lt;/p&gt;
&lt;h4 id="redhat-centos-fedora"&gt;Redhat / CentOS / Fedora&lt;/h4&gt;
&lt;p&gt;Redhat 是商用的版本，開源社群維護的對應版本是 CentOS。它以保守穩定著名，但相對來說新的東西在上面就要自己安裝，這對實驗室都用較新的工具來說是個減分的地方。他套件用 &lt;code&gt;yum xxx&lt;/code&gt; 來操作。Fedora 上的東西會新一點但我們實驗室沒人用，所以不建議。&lt;/p&gt;
&lt;h4 id="debian-ubuntu"&gt;Debian / Ubuntu&lt;/h4&gt;
&lt;p&gt;Debian 是另一個大家族的頭，雖然是頭但一直保持穩定開發，在說明文件、&lt;a href="https://wiki.debian.org/"&gt;wiki&lt;/a&gt; 上都有不錯的品質。本身有所謂的 stable、testing、unstable 並分別對應三個版本號碼與名稱。以 2016.01 為例，stable 是 jessie(8)、testing 是 stretch(9)。unstable 永遠對應到 sid。如字面上的意思代表當中套件（軟體）的新舊程度。stable 上的工具也因此會比較舊不適合實驗室使用，但 testing 還蠻適合的，我個人很推。套件用 &lt;code&gt;apt-get xxx&lt;/code&gt; 來操作。&lt;/p&gt;
&lt;p&gt;Debian 家族中的 Ubuntu 非常火紅，網路上教學非常多，背後也有公司加持。基本上 Debian 的優點都會傳到 Ubuntu 上。Ubuntu 雖然套件包等等都從 Debian 移植，但他有自己的版本號碼，每半年發佈一個版本。&lt;/p&gt;
&lt;h4 id="archlinux"&gt;ArchLinux&lt;/h4&gt;
&lt;p&gt;再來的有興趣自己看，但我要額外介紹一個 ArchLinux。這是一個很自幹的系統，一點都不適合新手與懶人。但他有一個寫得很仔細完整的 &lt;a href="https://wiki.archlinux.org/"&gt;wiki 站&lt;/a&gt;。想要學新的套件、不會設定的話，去問 google 的時候請優先看他們的 wiki。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查資料的時候，除了 StackOverflow 、Ubuntu 論壇之外，請多看品質優良的 &lt;a href="https://wiki.archlinux.org/"&gt;Arch Linux&lt;/a&gt; 和 &lt;a href="https://wiki.debian.org/"&gt;Debian&lt;/a&gt; 的 wiki。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;寫了這麼多，沒有給一個明確的選擇，多數人還是很難決定。所以如果你是初學者，我會建議安裝 Ubuntu，在此時請選擇 &lt;a href="http://releases.ubuntu.com/15.10/"&gt;15.10&lt;/a&gt; or &lt;a href="http://releases.ubuntu.com/14.04/"&gt;14.04 LTS&lt;/a&gt; Desktop 版本，因為他網路上的資源最豐富。&lt;/p&gt;
&lt;p&gt;但我不是很喜歡 Ubuntu，所以等你有能力自己查詢 Linux 相關操作時，建議再看看別的 distro （例如我推薦的 &lt;a href="https://www.debian.org/releases/testing/"&gt;Debian testing channel&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id="gnomekdexfcelxde"&gt;桌面環境 GNOME、KDE、XFCE、LXDE&lt;/h2&gt;
&lt;p&gt;圖形化介面（GUI），除了使用者的應用程式外，還需要系統輔助、管理等核心套件。一系列的 GUI 套件就稱之為桌面環境。&lt;/p&gt;
&lt;p&gt;Windows、OSX 在安裝系統時都會自動安裝， 即桌面環境只有一種選擇。但在 Linux 上，GUI 的安裝是選擇性的，系統能在只有單純的 terminal 介面便能完整使用（例如選擇安裝 Ubuntu Server 時），不少 server 為了效能、安全性的考量都不會裝桌面環境。&lt;/p&gt;
&lt;p&gt;對 Linux 來說桌面環境是能之後再選擇安裝上去的，而且還有「不同口味」可以選擇，使用者也可以自由的移除它們（但很有可能會炸掉），常見就有 GNOME、KDE、XFCE、LXDE&lt;sup id="fnref:註4"&gt;&lt;a class="footnote-ref" href="#fn:註4"&gt;3&lt;/a&gt;&lt;/sup&gt; 幾種系統能使用。例如選擇安裝 Ubuntu Server 後，想要再加上 GNOME 列圖形化介面時，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install ubuntu-gnome-desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊不會去細講這些實作方式的不同。簡單而言，GNOME 最流行。XFCE 使用的系統資源較少，在實驗室上的 server 常會裝這個。在 Ubuntu 上，預設是用 Unity，它是從 GNOME 沿伸出來的。&lt;/p&gt;
&lt;p&gt;第一次安裝時，就使用預設的模式吧。裝好之後要換到不同的桌面環境時，需要對套件管理系統（例 apt、yum）、調整系統設定有足夠了解。&lt;/p&gt;
&lt;h2 id="_1"&gt;相關資源&lt;/h2&gt;
&lt;p&gt;認真地說，我有點不知道 Linux 從很初學到完整學習的資源在哪裡。如果你們在學的過程中，有碰到更適合的請再告訴我（例如：留言）&lt;/p&gt;
&lt;h3 id="_2"&gt;鳥哥的私房菜&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://linux.vbird.org/linux_basic/"&gt;鳥哥官網（基礎學習篇）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.tenlong.com.tw/items/9861818510?item_id=53725"&gt;實體書連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在台灣學 Linux 大概都會先推薦鳥哥，這應該是最多人用的完整中文資源了。如果願意啃完他，對 Linux 絕對會有足夠的認識。我大學的時候也是看這本入門的。&lt;/p&gt;
&lt;p&gt;不適合的地方是鳥哥介紹 Redhat 系的操作，很多設定在 Ubuntu 上不需要或者是用別的方式去管理。例如，在 CentOS 上可能都用文字檔來修改設定，但在 Ubuntu 上可以用 &lt;code&gt;dpkg-reconfigure&lt;/code&gt; 指令來更動。他示範的 OS 為 CentOS 5.x，現在 CentOS 已經 7.x 版了，許多設定也過時了，新的工具不會介紹到。&lt;/p&gt;
&lt;p&gt;例如現在安裝 Linux 時，在磁區分割上都有很好的預設值，初學者可以不用再學調整 swap 等設定。同時系統也都提供使用 LVM (Logical Volume Manager) &lt;sup id="fnref:註5"&gt;&lt;a class="footnote-ref" href="#fn:註5"&gt;4&lt;/a&gt;&lt;/sup&gt; 管理磁區，這些磁區 (LV) 日後能動態調整。換句話說，第五章（含）的內容都與現在使用 Linux 的方式不同，如果只是順著鳥哥書的順序一章一章看下來，會沒辦法對照自己系統操作，因為近期的 Linux 安裝只要很順的下一步就能完成了。&lt;/p&gt;
&lt;h4 id="_3"&gt;各章節重點整理&lt;/h4&gt;
&lt;p&gt;鳥哥的內容退一千步來說都對初學者很有幫助，但為了避免各位花費無謂的時間在「對照古早與現代操作 (google 到的資料)上」，整理個表格讓大家知道每個章節什麼地方需要看。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;章節&lt;/th&gt;
&lt;th align="left"&gt;章節名&lt;/th&gt;
&lt;th&gt;重要的內容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;計算機概論&lt;/td&gt;
&lt;td&gt;沒聽過 CPU、RAM、MB GB 單位就從頭看； 不然就讀資料表示方式(3)、軟體程式運作(4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="left"&gt;首次登入與線上求助 man page&lt;/td&gt;
&lt;td&gt;文字模式下指令的下達(2)、man page 與 info page(3)、nano(4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;6&lt;/td&gt;
&lt;td align="left"&gt;Linux 的檔案權限與目錄配置&lt;/td&gt;
&lt;td&gt;全&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;7&lt;/td&gt;
&lt;td align="left"&gt;Linux 檔案與目錄管理&lt;/td&gt;
&lt;td&gt;除檔案隱藏與特殊屬性(4)外都重要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="left"&gt;Linux 磁碟與檔案系統管理&lt;/td&gt;
&lt;td&gt;檔案系統的簡單操作(2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;9&lt;/td&gt;
&lt;td align="left"&gt;檔案與檔案系統的壓縮與打包&lt;/td&gt;
&lt;td&gt;壓縮檔案的用途與技術(1)、打包指令(3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10&lt;sup id="fnref:*"&gt;&lt;a class="footnote-ref" href="#fn:*"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td align="left"&gt;vim 程式編輯器&lt;/td&gt;
&lt;td&gt;語系編碼轉換(4.3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;td align="left"&gt;認識與學習 BASH&lt;/td&gt;
&lt;td&gt;全。但可視情況忽略 2.4-2.8、6.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;12&lt;sup id="fnref:†"&gt;&lt;a class="footnote-ref" href="#fn:†"&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td align="left"&gt;正規表示法與文件格式化處理&lt;/td&gt;
&lt;td&gt;前言(1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;13&lt;/td&gt;
&lt;td align="left"&gt;學習 Shell Scripts&lt;/td&gt;
&lt;td&gt;全（等用到再看）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;22&lt;/td&gt;
&lt;td align="left"&gt;軟體安裝：原始碼與 Tarball&lt;/td&gt;
&lt;td&gt;全（了解流程、懂有這些關鍵字就好）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;23&lt;/td&gt;
&lt;td align="left"&gt;軟體安裝： RPM, SRPM 與 YUM 功能&lt;/td&gt;
&lt;td&gt;Ubuntu 用的是 APT&lt;sup id="fnref:‡"&gt;&lt;a class="footnote-ref" href="#fn:‡"&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="introduction-to-linux-on-edx-course"&gt;Introduction to Linux on edX course&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2"&gt;課程連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux Foundation 所開辦的線上課程，有英文的影片和講義。還請到了 Linux Kernel 的作者 Linus Torvalds 來拍介紹片。這是真的從非常基礎開始講，我有稍微看過，但我怕難度不夠，需要再搭配其他的資源來使用。好處是初期的學習比讀鳥哥前幾章來的快非常多（鳥哥前幾章為計算機概論）。&lt;/p&gt;
&lt;h3 id="debian-user-manual"&gt;Debian User Manual&lt;/h3&gt;
&lt;p&gt;英文的 Debian 系統使用者手冊，裡面包含了常見問題排解、各種硬體上的安裝指南、參考手冊。想要好好學習現代 Debian (Linux) 的使用方式的話，可以參考這些資源，它們還有再維護。&lt;/p&gt;
&lt;p&gt;缺點是這手冊太長了，如果有碰到什麼特別想了深入了解的，建議可以看這個。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.debian.org/doc/user-manuals"&gt;https://www.debian.org/doc/user-manuals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.debian.org/doc/manuals/debian-reference/index.en.html"&gt;Debain Reference&lt;/a&gt; (online HTML)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="chapter-highlights"&gt;Chapter Highlights&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Chp. No&lt;/th&gt;
&lt;th align="left"&gt;Chp. Name&lt;/th&gt;
&lt;th align="left"&gt;Highlights&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;GNU/Linux tutorials&lt;/td&gt;
&lt;td align="left"&gt;Everything except for 1.3 Midnight Commander&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;Debian package management&lt;/td&gt;
&lt;td align="left"&gt;Read 2.2 Basic package management operations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;10&lt;/td&gt;
&lt;td align="left"&gt;Data management&lt;/td&gt;
&lt;td align="left"&gt;Read 10.1 Sharing, copying, and archiving&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_4"&gt;學習目標&lt;/h2&gt;
&lt;p&gt;因為這邊指的 Linux 算是一個蠻廣的內容，一開始學的時候很容易迷失方向。所以我額外列了幾個很重要的觀念，你應該能在學習 Linux 的初期接觸到他們：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解 &lt;code&gt;$PATH&lt;/code&gt; 與程式執行位置的關係&lt;ul&gt;
&lt;li&gt;為什麼打 &lt;code&gt;ls&lt;/code&gt; 可以找到這隻名為 &lt;code&gt;ls&lt;/code&gt; 的程式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;知道 stdin、stdout、stderr；pipeline 的使用&lt;/li&gt;
&lt;li&gt;知道環境變數是什麼，怎麼修改&lt;/li&gt;
&lt;li&gt;了解檔案、目錄、相對路徑；權限設定&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;&amp;lt;cmd&amp;gt; -h&lt;/code&gt; &lt;code&gt;&amp;lt;cmd&amp;gt; --help&lt;/code&gt; &lt;code&gt;man &amp;lt;cmd&amp;gt;&lt;/code&gt; 來查看指令的功能、可下的參數&lt;ul&gt;
&lt;li&gt;&amp;lt;cmd&gt; = 任何在 linux 下的指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你花了一個禮拜的時間，但上述的內容連聽都沒聽過（或沒什麼使用到），那很可能你學習 Linux 的方式跟我想得很不一樣，請先寫個信告訴我。上面這些觀念的學習也是漸近式的，過了一個禮拜只有聽過但不是很了解，這是很正常的現象。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自己從零開始安裝一次 Linux 系統（可以用 VM）。&lt;/li&gt;
&lt;li&gt;定期使用它一個星期以上（即熟悉 &lt;code&gt;cd&lt;/code&gt; &lt;code&gt;ls&lt;/code&gt; 等基礎指令）&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 ssh 連線到遠端的 Linux。（要打開 ssh 的 port）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bonus: 在 ssh 連線時不用打密碼。&lt;/li&gt;
&lt;li&gt;Bonus hint: 查 &lt;code&gt;authorized_keys&lt;/code&gt;。會需要建立 ssh user identity keypair，這會在上傳 GitHub 時用到）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝一個叫 &lt;a href="http://hisham.hm/htop/"&gt;htop&lt;/a&gt; 的系統監控軟體。使用它來查看系統資料的使用狀況&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bonus:&lt;ul&gt;
&lt;li&gt;調整欄位的排版&lt;/li&gt;
&lt;li&gt;開啟 Tree Veiw&lt;/li&gt;
&lt;li&gt;選擇顯示單一使用者運行的程序（太舊的 htop 可能沒這功能）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝一個叫 &lt;a href="http://aria2.sourceforge.net/"&gt;aria2&lt;/a&gt; 的續傳軟體，他可以多線程下載 HTTP(S)、FTP、甚至 BT。今天想要下載 Debian Jessie netinst 的映像檔，使用 2 個線程同時下載。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: 查 &lt;code&gt;aria2c&lt;/code&gt; 的 man page。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;學會查看系統硬碟的使用量；查看當前目錄內所有檔案的大小（絕對不是 &lt;code&gt;ls -l&lt;/code&gt;）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: &lt;code&gt;df&lt;/code&gt; 和 &lt;code&gt;du&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scp 是個透過 ssh 傳送一或多個檔案的指令，試著用它把自己電腦的檔案（們）傳到 server 上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bonus:&lt;ul&gt;
&lt;li&gt;在路徑中搭配特殊字元 &lt;code&gt;*?&lt;/code&gt; 傳多個檔案&lt;/li&gt;
&lt;li&gt;有一個更精密的傳檔工具叫 rsync，試著改用它來傳檔。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 GUI 的遠端介面。這相關的技術有很多：VNC、RDP 最常見。RDP 在 windows 連接上比較順暢；VNC 在畫面傳輸比較沒效率，這會對 server 造成不小的負擔，也很容易 lag。有一個新的通訊協定叫 NX，它對畫面壓縮使用即便網速很慢依然能使用圖形介紹。&lt;br&gt;
   試著用實作 NX 協定的軟體 X2go 做遠端桌面連線到 server。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: 你需要在 server 與 client 端（通常是自己的電腦）都裝上 X2go 的軟體，並會使用到 SSH 的連線設定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只用 Linux 生存一個星期以上（包含中文輸入、上網等等）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:註2"&gt;
&lt;p&gt;Linux distros 源流 &lt;a href="http://en.wikipedia.org/wiki/Linux_distribution"&gt;http://en.wikipedia.org/wiki/Linux_distribution&lt;/a&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:註2" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:註3"&gt;
&lt;p&gt;&lt;a href="http://distrowatch.com/"&gt;Distro Watch&lt;/a&gt; 是一個介紹各種 Linux、BSD 系統的地方，可以來這邊看各個 distro 的介紹。&amp;#160;&lt;a class="footnote-backref" href="#fnref:註3" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:註4"&gt;
&lt;p&gt;LXDE 原作者是 PCMan 喔，也有相當多的台灣人在維護它。&amp;#160;&lt;a class="footnote-backref" href="#fnref:註4" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:註5"&gt;
&lt;p&gt;LVM 不懂沒關係，有興趣可以參考&lt;a href="http://linux.vbird.org/linux_basic/0420quota.php#lvm"&gt;鳥哥十五章&lt;/a&gt;、&lt;a href="https://wiki.archlinux.org/index.php/LVM"&gt;Arch Wiki&lt;/a&gt; 介紹&amp;#160;&lt;a class="footnote-backref" href="#fnref:註5" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:*"&gt;
&lt;p&gt;學 vim 有別的資源，詳見 &lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;2 Text Editing&lt;/a&gt;。&lt;br&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:*" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:†"&gt;
&lt;p&gt;正規表示（regex）很重要，但初學 Linux 時會覺得很複雜可以跳過。 &lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;2 Text Editing&lt;/a&gt; 會再接觸到一次 vim 的 regex、&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/"&gt;4 Python&lt;/a&gt; 也會學到 Python 的 regex，可以等到時候再回來學 &lt;code&gt;sed&lt;/code&gt;、&lt;code&gt;egrep&lt;/code&gt; 等指令。&lt;br&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:†" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:‡"&gt;
&lt;p&gt;APT 的使用教學可以參考 &lt;a href="https://help.ubuntu.com/community/AptGet/Howto"&gt;Ubuntu 官網&lt;/a&gt;、&lt;a href="http://blog.longwin.com.tw/2005/05/use_apt/"&gt;網路上大大的筆記&lt;/a&gt;。&amp;#160;&lt;a class="footnote-backref" href="#fnref:‡" title="Jump back to footnote 7 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="labcoding"></category></entry><entry><title>Coding 初學指南－總章</title><link href="https://blog.liang2.tw/posts/2016/01/lab-coding-intro/" rel="alternate"></link><published>2016-01-21T21:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-21:/posts/2016/01/lab-coding-intro/</id><summary type="html">&lt;p&gt;給實驗室新生，了解當今軟體開發流程及基本技能的背景知識與初步技能樹。&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last Edited: Jan, 2016&lt;/p&gt;
&lt;p&gt;（如果內容有誤，你可以留言，或用任何管道告訴我）&lt;/p&gt;
&lt;p&gt;雖然實驗室不是正規寫程式的地方，多數的人也沒把寫程式當成一回事。不過隨著要分析的資料、樣本數越來越多，多到自己電腦跑不動，server 也要跑很久的時候，就會顯示出程式的重要性。另一方面，現在的研究講求 &lt;em&gt;reproducibility&lt;/em&gt;，如果要讓自己的分析在一年之後也能重現，或者讓世界上其他的研究者也能重現的話，需要基本的程式技巧。&lt;/p&gt;
&lt;p&gt;這一系列的文章，目標讓實驗室的新生，不論是不是 CS 背景，都能了解當今軟體開發流程及基本技能。軟體開發需要一些背景知識，才能與開發者正常交流。這些背景知識包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;熟悉在 server 上工作（或 Linux 的使用）&lt;/li&gt;
&lt;li&gt;一個很多人用的軟體工具長什麼樣&lt;/li&gt;
&lt;li&gt;如何把自己的程式與別人分享&lt;/li&gt;
&lt;li&gt;多人共同開發&lt;/li&gt;
&lt;li&gt;其他人都怎麼樣寫程式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些內容在學校課程的訓練中較少，尤其是電機背景的話在寫程式又更為隨性，但這對一個長期的軟體專案是必需的。希望大家能養成這些習慣。&lt;/p&gt;
&lt;p&gt;這些主題需要熟練到什麼程度，見人見智，深入下去每一個都夠花幾個月的時間鑽研，但以一個實驗室專題、或要完成的軟體專案來說都不實際，至少老闆一點都不在意。所以個人覺得，最低標準就是在遇到該課題不懂的地方時，「能知道怎麼下關鍵字查」且「查完的結果能看得懂」。&lt;/p&gt;
&lt;p&gt;系列文原本放在 &lt;a href="https://gist.github.com/ccwang002/368025d3c541ed983892"&gt;Github Gist&lt;/a&gt; 上，但現在有自己的 blog 了，就整理到這邊順便更新。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;學習方式&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;問：為什麼不帶大家手把手教學？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;熟練來自生活中的實踐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#windows"&gt;給 Windows 使用者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#osx"&gt;給 OSX 使用者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;文章目錄&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_1"&gt;學習方式&lt;/h3&gt;
&lt;p&gt;每一篇都會是一個主題，主題底下會列出一些資源。主題的最後有學習目標，方便讓你評估自己學到什麼程度。學習目標會給一個明確的任務，我盡量讓它能跟（宅宅的）日常生活結合。通常只要完成前一、二個目標就行了，這也不是功課所以不用給我看。但如果你不介意給我看的話，我會分享我主觀的建議。大部份的任務是沒有唯一的正確答案，只要能解決問題都是好方法。&lt;/p&gt;
&lt;p&gt;總之，這些資源不用全看，任務不用全做，大家自己斟酌要花多少時間在不同的主題上。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;挑你喜歡的東西盡量鑽，沒有 fu 的就隨便看看會了就好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我會盡量按照難易度排列，中英文的資源都放。&lt;/p&gt;
&lt;h4 id="_2"&gt;問：為什麼不帶大家手把手教學？&lt;/h4&gt;
&lt;p&gt;簡單地說沒空。認真地說，大家的學習速度跟底子都不一樣，同步學只是浪費各位的時間。&lt;/p&gt;
&lt;p&gt;我大概沒有辦法一個一個項目帶大家練習，底下的很多連結只是提供一個學習的窗口，真正要學下去，都是要花一定時間的。所以也不要抱著「只要讀完這些文章就會了○○○」這樣的想法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;白話的來說，這些背景知識就像遊戲的技能樹，基礎技能要先點好才能點進階技能。要把基礎技能點滿了再練等也可能，但不必要一直練等，大家未必喜歡，現實中也不許你練等不解任務。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一開始可能碰到小問題就要查，或者要連續查很多個網頁被導向四、五次才能稍微解答自己的疑問。這個現象是非常正常的，如果大家能撐過初期這段比較挫折的時期，日後要自學軟體基本上就沒問題了。&lt;/p&gt;
&lt;h3 id="_3"&gt;熟練來自生活中的實踐&lt;/h3&gt;
&lt;p&gt;要很快地學好程式，我推薦練習把程式應用在生活中。例如用文字命令列來下載檔案；把自己筆電變成 linux 桌面系統，練習自己編譯軟體、解決各式安裝的狀況。讓自己的電腦成為一個自己能接受的軟體開發環境，並經常的使用它，就能降低對寫程式的陌生與不知所措感。&lt;/p&gt;
&lt;p&gt;上面的方法可能稍難一些，負擔比較小的可以開始做「思考練習」。思考練習包含去想生活中的大小事該怎麼寫程式來控制。例如我該怎麼設計一個電梯系統？臉書怎麼呈現大家的動態？只要大概想一想就好了，想不出來也不會怎樣，也不用特別查資料。過一段時間對程式的 sense 也會提昇。&lt;/p&gt;
&lt;p&gt;如果需要更硬派的學習方式，不妨把自己電腦安裝的軟體的源始碼都拿出來看一下，加入幾個自己平常用的軟體的專案來修改它，讓它更少問題更多功能（一般叫 contribute）。也可以把實驗室有用到的工具的原始碼拿出來看一下，例如 sratoolkit、cutadapt，看看自己能不能讀懂別人的程式碼。&lt;/p&gt;
&lt;h3 id="windows"&gt;給 Windows 使用者&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;建議大家想辦法裝個 Linux（或用 Mac）。如果不想取代掉自己的 Windows 環境話，可以安裝 VirtualBox 裝個虛擬的 Linux，或者在 Amazon 等 VPS 架一台虛擬主機。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Windows 因為對圖形介面（GUI）設計的很好，也不容易讓使用者用命令列模式（terminal, console)。雖然 Windows 上有像 command prompt、Powershell 之類的環境，但都很難用它來操控整個系統。而且它打從骨子就跟 Linux 不一樣，所以相關的指令不好在網上的教學文章中找到，而多數 Windows 的開發者也不喜歡用 terminal。&lt;/p&gt;
&lt;p&gt;另一方面，大家對 Visual Studio 的印象都是要收錢的&lt;sup id="fnref:註1"&gt;&lt;a class="footnote-ref" href="#fn:註1"&gt;1&lt;/a&gt;&lt;/sup&gt;，這是 Windows 上最完整最好用的開發環境，不想付費的情況下可能就會覺得「寫程式充滿障礙」，更何況 VS 也是圖形化的編輯器，也會不了解背後運作的方式。市面的開源軟體多半在 *nix 上開發，對 Windows 支援度差也加深這個障礙（「想要自己裝但都一堆限制又很容易失敗」）&lt;/p&gt;
&lt;p&gt;不用 terminal 的壞處是很難想像自己系統中的軟體為什麼能運作。感覺要寫個有 GUI 的程式都要很厲害，跟自己學過的寫程式都不一樣。但實質上是沒有太多區別的，只是要完成一個能安裝在系統中的視窗軟體，需要的步驟多很多，一般簡單的專案都不會到那個階段。&lt;/p&gt;
&lt;h3 id="osx"&gt;給 OSX 使用者&lt;/h3&gt;
&lt;p&gt;Mac OSX 使用者也有這樣的現象，但因為 OSX 在底層用的是跟 FreeBSD 很相似，而 FreeBSD 跟 Linux 相似，所以它的 terminal 環境是很完整的。現在軟體開發者很多人用 OSX，因此網路上 Linux、OSX 資源都很多，兩者的經驗常能自然地移植。&lt;/p&gt;
&lt;p&gt;如何在 OSX 上開發程式，可以參考&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/"&gt;附錄 0&lt;/a&gt; 的筆記，但內容很主觀，不是每個人都會像我這樣用。&lt;/p&gt;
&lt;h2 id="_4"&gt;文章目錄&lt;/h2&gt;
&lt;p&gt;寫一寫內容也變得蠻多的，所以把它切成了幾篇文章，請按照數字順序閱讀：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-intro/"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-linux/"&gt;Chapter 1 &amp;ndash; Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-text-editing/"&gt;Chapter 2 &amp;ndash; Text Editing (Markdown, Text Editor)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-version-control/"&gt;Chapter 3 &amp;ndash; Version Control (Git)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-python/"&gt;Chapter 4 &amp;ndash; Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-osx-env/"&gt;Appendix 1 &amp;ndash; OSX Development Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.liang2.tw/posts/2016/01/lab-coding-appendix-bioinfo-python/"&gt;Appendix 2 &amp;ndash; Python in Bioinformatics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者，用 &lt;a href="/tag/labcoding.html"&gt;labcoding&lt;/a&gt; 這個 tag 也可以找到所有的文章。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:註1"&gt;
&lt;p&gt;Visual Studio 自 2013 後有 &lt;a href="https://www.visualstudio.com/en-us/news/vs2013-community-vs.aspx"&gt;Community&lt;/a&gt; 版本，免費但內容與 Professional 版本大致無異，所以未來要有 C/C++ 32/64bit Compiler 會更容易。但多數的開源軟體還沒跟進，所以很多還在用舊的 VS 版本（就要付費），這個現象還會持續一陣。學校都有買。&amp;#160;&lt;a class="footnote-backref" href="#fnref:註1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="labcoding"></category></entry><entry><title>Numpy Indexing</title><link href="https://blog.liang2.tw/posts/2016/01/numpy-index/" rel="alternate"></link><published>2016-01-18T02:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-18:/posts/2016/01/numpy-index/</id><summary type="html">&lt;p&gt;Numpy 多維度的 indexing 跟 pandas 行為不一樣，需要額外的操作。&lt;/p&gt;</summary><content type="html">&lt;p&gt;前幾天需要寫 &lt;a href="http://docs.scipy.org/doc/numpy/index.html"&gt;numpy&lt;/a&gt; 時，突然發現跟 &lt;a href="http://pandas.pydata.org/"&gt;pandas&lt;/a&gt; 在 indexing 的行為蠻不一樣的。我感覺未來一定會忘記，先筆記起來。&lt;/p&gt;
&lt;p&gt;就用時事來舉例吧，把維基百科上&lt;a href="https://zh.wikipedia.org/wiki/2016%E5%B9%B4%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E7%AB%8B%E6%B3%95%E5%A7%94%E5%93%A1%E9%81%B8%E8%88%89"&gt;各政黨 2016 年臺灣立法委員提名數&lt;/a&gt;的表格抓下來。處理原始資料的程式放到文末，做完大概長這樣：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="right"&gt;區域&lt;/th&gt;
&lt;th align="right"&gt;原住民&lt;/th&gt;
&lt;th align="right"&gt;不分區&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;中國國民黨&lt;/td&gt;
&lt;td align="right"&gt;72&lt;/td&gt;
&lt;td align="right"&gt;5&lt;/td&gt;
&lt;td align="right"&gt;33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;民主進步黨&lt;/td&gt;
&lt;td align="right"&gt;60&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;34&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;台灣團結聯盟&lt;/td&gt;
&lt;td align="right"&gt;2&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;親民黨&lt;/td&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;無黨團結聯盟&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;民國黨&lt;/td&gt;
&lt;td align="right"&gt;13&lt;/td&gt;
&lt;td align="right"&gt;1&lt;/td&gt;
&lt;td align="right"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;綠黨社會民主黨聯盟&lt;/td&gt;
&lt;td align="right"&gt;11&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;中華統一促進黨&lt;/td&gt;
&lt;td align="right"&gt;14&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;時代力量&lt;/td&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;大愛憲改聯盟&lt;/td&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;td align="right"&gt;0&lt;/td&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="pandas-indexing"&gt;Pandas indexing&lt;/h3&gt;
&lt;p&gt;Pandas indexing 花俏到用&lt;a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html"&gt;一&lt;/a&gt;、&lt;a href="http://pandas.pydata.org/pandas-docs/stable/advanced.html"&gt;兩&lt;/a&gt;頁也介紹不完。&lt;/p&gt;
&lt;p&gt;不過今天只想說有關兩個維度以上的 indexing，例如想看國民黨、民進黨、時代力量區域與不分區的提名好了，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;中國國民黨&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;民主進步黨&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;時代力量&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;區域&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;不分區&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上述兩個方法都能拿到一部份的表格。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="right"&gt;區域&lt;/th&gt;
&lt;th align="right"&gt;不分區&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;中國國民黨&lt;/td&gt;
&lt;td align="right"&gt;72&lt;/td&gt;
&lt;td align="right"&gt;33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;民主進步黨&lt;/td&gt;
&lt;td align="right"&gt;60&lt;/td&gt;
&lt;td align="right"&gt;34&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;時代力量&lt;/td&gt;
&lt;td align="right"&gt;12&lt;/td&gt;
&lt;td align="right"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="numpy-indexing"&gt;Numpy indexing&lt;/h3&gt;
&lt;p&gt;下意識地以為 &lt;a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#arrays-indexing"&gt;numpy indexing&lt;/a&gt; 會是一樣的，畢竟 pandas 底層就是一個 numpy array。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="go"&gt;array([[72,  5, 33],&lt;/span&gt;
&lt;span class="go"&gt;       [60,  2, 34],&lt;/span&gt;
&lt;span class="go"&gt;       [ 2,  0, 15],&lt;/span&gt;
&lt;span class="go"&gt;       [ 6,  1, 16],&lt;/span&gt;
&lt;span class="go"&gt;       [ 0,  1,  7]])&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;IndexError: shape mismatch: indexing arrays could not be broadcast &lt;/span&gt;
&lt;span class="go"&gt;together with shapes (3,) (2,) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回去看&lt;a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#arrays-indexing"&gt;官方文件&lt;/a&gt;才想起來， numpy 這時候是如同給定 (x, y) 座標這樣，一個個把元素選出來。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="go"&gt;[72, 2, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;簡單的方式是分兩次選，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;:][:,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但這樣 numpy 會傳兩次 copy&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; 回來，資料很大的時候就沒效率。所以要怎麼做呢？&lt;/p&gt;
&lt;p&gt;參考 &lt;a href="http://stackoverflow.com/a/30918530"&gt;Stack Overflow&lt;/a&gt; 上的回答，底下幾種方式都可以。最簡單的方法就是透過 &lt;a href="http://docs.scipy.org/doc/numpy-1.10.1/reference/generated/numpy.ix_.html#numpy.ix_"&gt;numpy.ix_()&lt;/a&gt;，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ix_&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果了解 numpy broadcasting 機制的話，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# index must be numpy array&lt;/span&gt;
&lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newaxis&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# np.newaxis is None&lt;/span&gt;
&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者直接把所有包含的 index 值都做出來，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meshgrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
    &lt;span class="n"&gt;indexing&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ij&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;整理一下，這只要一段時間沒用就常會忘記。&lt;/p&gt;
&lt;h3 id="_1"&gt;維基原始資料處理&lt;/h3&gt;
&lt;p&gt;Wikipedia 原始資料從&lt;a href="https://zh.wikipedia.org/wiki/2016%E5%B9%B4%E4%B8%AD%E8%8F%AF%E6%B0%91%E5%9C%8B%E7%AB%8B%E6%B3%95%E5%A7%94%E5%93%A1%E9%81%B8%E8%88%89"&gt;這裡&lt;/a&gt;取得，這就是展現 pandas 處理能力的時候了。新版本對字串處理提供更多功能，都讓我忘了底下的 numpy 對 unicode 支援其實不怎麼樣 XD&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;quote_plus&lt;/span&gt;

&lt;span class="n"&gt;dfs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;https://zh.wikipedia.org/wiki/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;quote_plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2016年中華民國立法委員選舉&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dfs&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;立法委員政黨提名名額&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Data cleaning&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;政黨&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;政黨&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\[(註 |)\d+\]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;政黨&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;－&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;在這情況資料會被 copy 傳回來，但如果是 &lt;code&gt;start:end:step&lt;/code&gt; 的 simple indexing 就只會回傳 view。&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="python"></category><category term="numpy"></category><category term="pandas"></category></entry><entry><title>Jupyter Notebook Theme</title><link href="https://blog.liang2.tw/posts/2016/01/jupyter-notebook-theme/" rel="alternate"></link><published>2016-01-07T00:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-07:/posts/2016/01/jupyter-notebook-theme/</id><summary type="html">&lt;p&gt;&lt;a href="http://jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;，也就是以前的 IPython Notebook，應該是許多人在用 Python 做資料分析時記錄實驗步驗與結果的工具。&lt;/p&gt;
&lt;p&gt;現在 &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt; (v4.0+) 已經回歸到 Interactive Python Shell …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://jupyter.org/"&gt;Jupyter Notebook&lt;/a&gt;，也就是以前的 IPython Notebook，應該是許多人在用 Python 做資料分析時記錄實驗步驗與結果的工具。&lt;/p&gt;
&lt;p&gt;現在 &lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt; (v4.0+) 已經回歸到 Interactive Python Shell 的本質，變成只是擴充內建 Python REPL 的套件，相依的模組也清掉了。原本的 IPyton Notebook 主要是提供一個像 &lt;a href="https://reference.wolfram.com/language/tutorial/UsingANotebookInterface.html"&gt;Mathematica Notebook&lt;/a&gt; 的環境，功能很多就不多提。它可以用 web 或者 QT 介面來跑。&lt;/p&gt;
&lt;p&gt;後來又開始整合很多語言，變成像 Julia / R / Lua 等語言都可以利用這樣的 Notebook 架構，於是 &lt;a href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt; 就因此誕生，變成原本的 IPython 只是其中一個可能的語言 kernel。Notebook 本身可以是 R 語言或者 Julia 語言。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#jupyter-notebook"&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-theme-on-v41"&gt;Custom Theme on v4.1+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-theme-before-v41"&gt;Custom Theme Before v4.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="jupyter-notebook"&gt;Jupyter Notebook&lt;/h3&gt;
&lt;p&gt;用 Python 裝十分簡單，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;pip install jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Jupyter 預設走 web 介面，會跑一個 tornado server 預設在 &lt;a href="http://localhost:8888"&gt;http://localhost:8888&lt;/a&gt; 上。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;jupyter notebook
&lt;span class="go"&gt;[I 23:50:58.449 NotebookApp] Serving notebooks from local directory: /Users/liang&lt;/span&gt;
&lt;span class="go"&gt;[I 23:50:58.449 NotebookApp] 0 active kernels&lt;/span&gt;
&lt;span class="go"&gt;[I 23:50:58.450 NotebookApp] The IPython Notebook is running at: http://localhost:8888/&lt;/span&gt;
&lt;span class="go"&gt;[I 23:50:58.450 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有裝 browser 的話就會自動開一個視窗。&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/jupyter-notebook-theme/pics/jupyter_default_frontpage.png"/&gt;
  &lt;p class="caption center"&gt;Jupyter Notebook Hub&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Notebook 預設是 &lt;code&gt;.ipynb&lt;/code&gt; 的檔案。常見的內容像這樣：&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/jupyter-notebook-theme/pics/jupyter_default_notebook.png"/&gt;
  &lt;p class="caption center"&gt;Jupyter Notebook Example&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id="custom-theme-on-v41"&gt;Custom Theme on v4.1+&lt;/h3&gt;
&lt;p&gt;EDIT: 2016-01-11 &lt;a href="https://blog.jupyter.org/2016/01/08/notebook-4-1-release/"&gt;Jupyter Notebook 4.1&lt;/a&gt; 已釋出，設定路徑預設都在 &lt;code&gt;~/.jupyter&lt;/code&gt; 底下。&lt;/p&gt;
&lt;p&gt;今天重點是換主題嘛。趕快來做吧。&lt;/p&gt;
&lt;p&gt;可以透過 &lt;code&gt;jupyter --config-dir&lt;/code&gt; 或 &lt;code&gt;jupyter --paths&lt;/code&gt; 找到設定檔應該放的位置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;jupyter --config-dir
&lt;span class="go"&gt;~/.jupyter&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;jupyter notebook --generate-config  &lt;span class="c1"&gt;# 建立 Notebook 設定檔&lt;/span&gt;
&lt;span class="go"&gt;Writing default config to: ~/.jupyter/jupyter_notebook_config.py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果只是改主題，不需要更動 Notebook 設定檔。&lt;/p&gt;
&lt;p&gt;目前自己使用的主題來自 &lt;a href="https://github.com/dunovank/jupyter-themes"&gt;dunovank&lt;/a&gt;，他有收集了至少深淺兩色，應該足夠使用了。CSS 從別人的基礎上來調整也相對簡單，我自己有&lt;a href="https://github.com/ccwang002/dotfiles/tree/master/ipy_profile/ipython3"&gt;改寫了一點&lt;/a&gt;（忘了改什麼)。dunovank 有寫個安裝 theme 的套件，不過不用也沒關係，只要準備好 CSS 就能用。我用 Grade3 這個主題來示範。&lt;/p&gt;
&lt;p&gt;把 &lt;code&gt;custom.css&lt;/code&gt; 放到 &lt;code&gt;~/.jupyter/static/custom.css&lt;/code&gt;。設定的目錄長得如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;tree ~/.jupyter -F -L &lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="go"&gt;~/.jupyter&lt;/span&gt;
&lt;span class="go"&gt;├── custom/&lt;/span&gt;
&lt;span class="go"&gt;│   └── custom.css -&amp;gt; /path/to/custom_light.css&lt;/span&gt;
&lt;span class="go"&gt;└── jupyter_notebook_config.py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="custom-theme-before-v41"&gt;Custom Theme Before v4.1&lt;/h3&gt;
&lt;p&gt;現在因為歷經 IPython 到 Jupyter 的過程，設定還蠻分散的。以往的設定會在 &lt;code&gt;~/.ipython&lt;/code&gt;，而到了 Jupyter 之後，相關設定會在 &lt;code&gt;~/.jupyter&lt;/code&gt;。有時候設定怪怪的話就兩個路徑都檢查一下吧。&lt;/p&gt;
&lt;p&gt;只要把這個 CSS 放到 &lt;code&gt;~/.ipython/profile_default/custom.css&lt;/code&gt; 再重開 Jupyter Notebook 就可以了&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;。效果如下：&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/jupyter-notebook-theme/pics/jupyter_grade3_frontpage.png"/&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/jupyter-notebook-theme/pics/jupyter_grade3_notebook1.png"/&gt;
  &lt;p class="caption center"&gt;Jupyter Notebook Theme Grade3 Demo&lt;/p&gt;
&lt;/div&gt;

&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/jupyter-notebook-theme/pics/jupyter_grade3_notebook2.png"/&gt;
  &lt;p class="caption center"&gt;把 Toolbar 全部 toggle 起來，以及表格的樣子。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;個人覺得長時間使用下來，對比度低一點對眼睛比較好。黑底也不錯，不過畫圖常常會自己帶白底，整體感覺就不是很漂亮，可能要連 matplotlib theme 一起改吧 XD&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;這路徑並不符合 Jupyter 跨 kernel 的設計理念，&lt;del&gt;感覺未來會改路徑&lt;/del&gt;已經在 4.1+ 版本中完成整合，與 IPython 設定分家了。&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="jupyter"></category><category term="notebook"></category></entry><entry><title>Blog defaults to HTTPS</title><link href="https://blog.liang2.tw/posts/2016/01/blog-https/" rel="alternate"></link><published>2016-01-06T00:00:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2016-01-06:/posts/2016/01/blog-https/</id><summary type="html">&lt;p&gt;簡言之，現在 blog 使用 https。一般的 http 連線會被重新導向至 https。&lt;/p&gt;
&lt;p&gt;Blog 本來就是架在 &lt;a href="https://github.com/ccwang002/ccwang002.github.io"&gt;GitHub Pages&lt;/a&gt; 上，其實預設有 https，但在網址改成自訂 domain 之後 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;簡言之，現在 blog 使用 https。一般的 http 連線會被重新導向至 https。&lt;/p&gt;
&lt;p&gt;Blog 本來就是架在 &lt;a href="https://github.com/ccwang002/ccwang002.github.io"&gt;GitHub Pages&lt;/a&gt; 上，其實預設有 https，但在網址改成自訂 domain 之後 https 自然就失效了。在 GitHub 上有開 issue 請他們加入 &lt;a href="https://github.com/isaacs/github/issues/156"&gt;HTTPS support for custom domain&lt;/a&gt; 這功能，不過目前還是需要自己想辦法。隨著 &lt;a href="https://letsencrypt.org/"&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; 這種服務的流行，GitHub 才會去積極尋找比較合適的解決方案吧。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#cloudflare-ssl-and-cdn"&gt;CloudFlare SSL and CDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#disqus"&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#justfont"&gt;justfont&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hinet"&gt;Hinet 轉址服務&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="cloudflare-ssl-and-cdn"&gt;CloudFlare SSL and CDN&lt;/h2&gt;
&lt;p&gt;在看那個 &lt;a href="https://github.com/isaacs/github/issues/156"&gt;issue&lt;/a&gt; 就可以找到其他人用 CloudFlare 的解法。概念上就再用一層 CloudFlare CDN，然後它的 CDN 有提供 https 簽章。直接看 CloudFlare 在 Crypto 頁的介紹比較快：&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/blog-https/pics/cloudflare_ssl.png"/&gt;
  &lt;p class="caption center"&gt;source: &lt;a href="https://www.cloudflare.com/ssl/"&gt; CloudFlare one-click SSL&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;所以 CloudFlare 去 cache GitHub 頁面時用的是 https，再到使用者時也是用 https。剩下就是你要不要相信 CloudFlare 了。&lt;/p&gt;
&lt;p&gt;CloudFlare 的設定可以參考 &lt;a href="https://blog.keanulee.com/2014/10/11/setting-up-ssl-on-github-pages.html"&gt;Keanu&amp;rsquo;s Blog&lt;/a&gt;。一些重點筆記：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;換成 CloudFlare 的 DNS Server&lt;/li&gt;
&lt;li&gt;Crypto SSL options 選 Full（不是 Strict 目前 GitHub 還不支援）&lt;/li&gt;
&lt;li&gt;在 Page Rules 強迫所有 http 連結重新使用 https（例如：&lt;code&gt;http://blog.liang2.tw/*&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTPS 以及 DNS 的設定都需要一段時間，過幾個小時或觀察個一天再把 http 關掉。&lt;/p&gt;
&lt;p&gt;Pelican 發佈設定 &lt;code&gt;publishconf.py&lt;/code&gt; 管網址的 &lt;code&gt;SITE_URL&lt;/code&gt; 能設成 &lt;code&gt;//blog.liang.tw&lt;/code&gt; 不用帶 protocol（這麼重要的資訊沒寫在文件裡啊），這樣就能同時 serve http(s)。&lt;/p&gt;
&lt;p&gt;這樣其實就完成了。但出乎意外還是有些小問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;網頁字型 &lt;a href="http://en.justfont.com/membership"&gt;justfont&lt;/a&gt; 要 Business Plan 才能支援 HTTPS。&lt;/li&gt;
&lt;li&gt;留言系統 &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; HTTP 和 HTTPS 竟然是當作&lt;a href="https://github.com/aspnet/Docs/issues/623"&gt;不同留言板&lt;/a&gt;來使用，而且要手動 merge。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="disqus"&gt;Disqus&lt;/h2&gt;
&lt;p&gt;似乎解法只有全部導向到 https。這還不能直接改 Disqus 設定，要用它的 &lt;a href="https://help.disqus.com/customer/portal/articles/912757-url-mapper"&gt;URL Mapper&lt;/a&gt; 下載所有留言版出現連結的 CSV 手動修改。 &lt;/p&gt;
&lt;p&gt;感覺很土砲。不過站上的留言不多，也不用改多少留言，很快就同步到新的位置上。&lt;/p&gt;
&lt;h2 id="justfont"&gt;justfont&lt;/h2&gt;
&lt;p&gt;之前有贊助金萱計畫，其實有拿到兩年的 Business Plan。寫信給客服一天就改好設定了。不過之後就要多付錢啦。&lt;/p&gt;
&lt;h2 id="hinet"&gt;Hinet 轉址服務&lt;/h2&gt;
&lt;p&gt;我沒有自己架任何 server，懶得維護。不過也很懶得打字。在其他 subdomain 都沒用的情況下，有透過 Hinet 設定 &lt;a href="http://liang2.tw"&gt;http://liang2.tw&lt;/a&gt; 會導向至 &lt;a href="http://blog.liang2.tw"&gt;http://blog.liang2.tw&lt;/a&gt; 再被導向到 https。&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2016/01/blog-https/pics/cloudflare_dns_setting.png"/&gt;
  &lt;p class="caption center"&gt;CloudFlare DNS setting&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;大概是這樣。希望能在不要自己架 server 的情況下繼續經營這個 blog。&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category><category term="blog"></category><category term="pelican"></category><category term="https"></category></entry><entry><title>Customize Django User Model</title><link href="https://blog.liang2.tw/posts/2015/11/django-custom-user/" rel="alternate"></link><published>2015-11-04T18:23:00-06:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-11-04:/posts/2015/11/django-custom-user/</id><summary type="html">&lt;p&gt;Django 帳號的欄位定義在 &lt;code&gt;django.contrib.auth&lt;/code&gt; 的 &lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/auth/#fields"&gt;User&lt;/a&gt; 中，對使用者而言包含了：username*、first_name、last_name、email、password*。同時對開發者來說，還有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定 Group 和 Permission&lt;/li&gt;
&lt;li&gt;是否為 staff …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Django 帳號的欄位定義在 &lt;code&gt;django.contrib.auth&lt;/code&gt; 的 &lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/auth/#fields"&gt;User&lt;/a&gt; 中，對使用者而言包含了：username*、first_name、last_name、email、password*。同時對開發者來說，還有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定 Group 和 Permission&lt;/li&gt;
&lt;li&gt;是否為 staff、superuser&lt;/li&gt;
&lt;li&gt;帳號開通、最後一次登入時間&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;內建的帳號功能應該很實用，安全性也很好。所以一般來說都不會去改它。&lt;/p&gt;
&lt;p&gt;如果只是想要幫 User 加個 profile，例如生日、來自哪個星球等欄位，也不需要改寫 User。參考官網 &lt;a href="https://docs.djangoproject.com/en/1.8/topics/auth/customizing/#extending-the-existing-user-model"&gt;Extending the existing User model&lt;/a&gt;，只需要建一個 one-to-one relationship 指到 User 就好了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OneToOneField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AUTH_USER_MODEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;birth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;orig_planet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但 Django 預設用 username 來登入，如果要改用 email 登入要怎麼做？&lt;/p&gt;
&lt;h3 id="email"&gt;改用 Email 做帳號登入&lt;/h3&gt;
&lt;p&gt;因為 User 是個很重要的 model，所以改寫時要注意相容性的問題。其實官網也有教學 &lt;a href="https://docs.djangoproject.com/en/1.8/topics/auth/customizing/#specifying-a-custom-user-model"&gt;Specifying a custom User model&lt;/a&gt;，不過這教學比前面長很多。&lt;/p&gt;
&lt;p&gt;網路上已經有人 @jcugat 做了一個套件 &lt;a href="https://github.com/jcugat/django-custom-user"&gt;django-custom-user&lt;/a&gt;，他實作了 &lt;code&gt;EmailUser&lt;/code&gt; 即用 email 作為帳號登入。已經把所有苦工都做好了，所以如果想要再加上自己的欄位等等，可以繼承他的 &lt;code&gt;AbstractEmailUser&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;其實如果看完自定 User 之後，寫好 User Model 不難，比較複雜的是像創建、修改 User 以及 admin 的設定。除了讀這個套件的 source code 之後，&lt;a href="http://stackoverflow.com/questions/15012235"&gt;這串 Stack Overflow 討論&lt;/a&gt;也提到了不同的實作方式。Django 這部份的 source code 蠻好讀的，也可以看一下。&lt;/p&gt;
&lt;p&gt;因為之後要做 Email 認証，應該會用 &lt;a href="https://github.com/pennersr/django-allauth"&gt;django-allauth&lt;/a&gt; 做。感覺很久沒發文了，應該要把文章拆短才對 XD&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category><category term="django"></category><category term="python"></category></entry><entry><title>用 Django 與 SQLite 架抽籤網站</title><link href="https://blog.liang2.tw/posts/2015/10/django-draw-member/" rel="alternate"></link><published>2015-10-04T14:55:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-10-04:/posts/2015/10/django-draw-member/</id><summary type="html">&lt;p&gt;把之前用 Flask 架的抽籤網站改用 Django 實作，也藉這個機會比較一下兩個 Framework 設計概念的不同。&lt;/p&gt;</summary><content type="html">&lt;h4 id="_1"&gt;前情提要&lt;/h4&gt;
&lt;p&gt;我把 LoveLive! 兩季看完了！μ&amp;rsquo;s 在第一季的成長充滿感動啊。&lt;strong&gt;\真姫最高/&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;……呃好啦，之前講了&lt;a href="../../09/flask-draw-member"&gt;用 Flask 去架一個抽籤網站&lt;/a&gt;。不過我們最終的目標是用 Django 嘛，所以接下來就要改寫。也藉這個機會比較一下兩個 Framework 設計概念的不同（&lt;del&gt;例如 Django 一開始寫有多冗&lt;/del&gt;、&lt;del&gt;Flask 寫到最後有多冗&lt;/del&gt;）。&lt;/p&gt;
&lt;h3 id="from-flask-to-django"&gt;From Flask to Django&lt;/h3&gt;
&lt;p&gt;為了轉換但又不要一下子把所有 Django 的功能都放進來，中間過程有很多「不常見的寫法」。想要直接寫 Django best practice 的話，可以參考 TP 大大的&lt;a href="https://github.com/uranusjr/django-tutorial-for-programmers"&gt;《為程式人寫的 Django Tutorial 》&lt;/a&gt;，他的規劃是 30 個單元做一個訂餐系統。&lt;/p&gt;
&lt;p&gt;過程中會用到很多 Django API，沒有解釋的話可以到&lt;a href="https://docs.djangoproject.com/en/1.8/"&gt;官網&lt;/a&gt;去查使用。另外我發現如果能用 debugger 去 trace Django 執行的流程能幫助理解，想要一個精美的 debugger 的話可以裝像 PyCharm 的 IDE。&lt;/p&gt;
&lt;p&gt;整體的規劃會漸近把 Django 的功能加進來，依序應該是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django View, Template&lt;/li&gt;
&lt;li&gt;Django Model, ORM&lt;/li&gt;
&lt;li&gt;Django Form&lt;/li&gt;
&lt;li&gt;(Django Admin 沒有用到)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果看 &lt;a href="https://docs.djangoproject.com/en/1.8/"&gt;Django doc&lt;/a&gt; 首頁的話，也是分這幾個部份，雖然這篇文章並不會把所有概念都介紹一遍。&lt;/p&gt;
&lt;p&gt;另外，在改寫的時候會跳過用 raw SQL，因為完全不用 ORM 有點難銜接其他 Django 部份。有興趣的話在講完 Model 之後可以參考 Details。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;前情提要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#from-flask-to-django"&gt;From Flask to Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#django"&gt;Django 初始設定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#django-server"&gt;Django server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#django-app"&gt;第一個 Django app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#django-settings"&gt;Django settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-migration"&gt;Database Migration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#url-dispatcher"&gt;URL dispatcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#django-model-and-orm"&gt;Django Model and ORM&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#migration-the-tracker-of-model-changes"&gt;Migration the tracker of model changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orm-queries-in-shell"&gt;ORM queries in shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#data-in-orm-and-fixtures"&gt;Data in ORM and fixtures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#django-template"&gt;Django Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-on-djangos-model-template-and-view-mtv"&gt;More on Django&amp;rsquo;s model, template and view (MTV)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#django-form"&gt;Django Form&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#more-django-form-in-view"&gt;More Django form in view&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;總結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#details"&gt;Details&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#raw-sql"&gt;Raw SQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#better-queryset"&gt;Better QuerySet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timezone"&gt;Timezone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#post-form-and-csrf"&gt;POST form and CSRF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="django"&gt;Django 初始設定&lt;/h3&gt;
&lt;p&gt;一樣開一個 Python 虛擬環境（這時候就是它的好處了，能把不同專案的套件隔離）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install django pytz ipython pyyaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://pythonhosted.org/pytz/"&gt;pytz&lt;/a&gt; 在&lt;a href="../../09/datetime-sqlite"&gt;前一篇&lt;/a&gt;已經介紹過，是處理時區的套件。&lt;a href="http://ipython.org/"&gt;IPython&lt;/a&gt; 全名是 Interactive Python，同樣是 Python shell 但提供了很多附加功能，最常用的應該是自動補完。&lt;a href="http://pyyaml.org/"&gt;PyYAML&lt;/a&gt; 用來處理 YAML 物件，可裝可不裝，不裝之後的例子就用 JSON 即可。&lt;/p&gt;
&lt;p&gt;我們的專案根目錄是 &lt;code&gt;demo_django_draw_member&lt;/code&gt;。因為 Django 的設定很多，先在這目錄下用 &lt;a href="https://docs.djangoproject.com/en/1.8/ref/contrib/admin/"&gt;django-admin&lt;/a&gt; 把基本的架構建起來。我們建了一個名為 &lt;code&gt;draw_site&lt;/code&gt; 的專案（Project）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;VENV&lt;span class="o"&gt;)&lt;/span&gt; $ django-admin startproject draw_site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;執行完之後應該會多出一堆檔案，結構如下。注意到有兩層 &lt;code&gt;draw_site&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;demo_django_draw_member/
└── draw_site/
    ├── draw_site/
    │   ├── __init__.py
    │   ├── settings.py
    │   ├── urls.py
    │   └── wsgi.py
    └── manage.py*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後工作的目錄其實是 &lt;code&gt;demo_django_draw_member/draw_site/&lt;/code&gt;，也就是有 &lt;code&gt;manage.py&lt;/code&gt; 的那層目錄，之後的路徑都是相對於 &lt;code&gt;demo_django_draw_member/draw_site/&lt;/code&gt;。介紹一下每個檔案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;manage.py&lt;/code&gt; 之後就會取代 django-admin 的功能。兩者最大的差別是 manage.py 知道 project 的設定。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draw_site/settings.py&lt;/code&gt; 裡面存著 Django 的各種設定，像 secret key、database、template engine、app 等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draw_site/urls.py&lt;/code&gt; 裡面存著 URL dispatching 設定，即哪個路徑要用哪個 function 去處理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;draw_site/wsgi.py&lt;/code&gt; &lt;a href="http://wsgi.org/"&gt;WSGI&lt;/a&gt; 是規範 Python web server 的標準，通常不會動這個檔案就不細提。Flask、Django 都是相容 WSGI 的實作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一個 Django 由一個 project 和很多個 apps 所組成。每個 app 就專注在網站的某個功能上，各自包著各自需要的 database schema、template、view logics。這樣的好處是同樣的功能就不用重寫，同時在很大的網站時這樣的結構有助於管理運作的邏輯。&lt;/p&gt;
&lt;h4 id="django-server"&gt;Django server&lt;/h4&gt;
&lt;p&gt;先把 Django 跑起來看看吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;python manage.py runserver
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Django version 1.8.5, using settings &amp;#39;draw_site.settings&amp;#39;&lt;/span&gt;
&lt;span class="go"&gt;Starting development server at http://127.0.0.1:8000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/10/django-draw-member/pics/django_initial.png"/&gt;
  &lt;p class="caption"&gt;Django Hello World&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;這是 Django 內建在什麼 URL 都沒設定時的歡迎畫面。看到這個至少表示基本的 settings 正常。Django 跟 Flask 一樣，內建的 server 會在 source code 有改變的時候 reload，所以一直開著跑也可以。&lt;/p&gt;
&lt;h4 id="django-app"&gt;第一個 Django app&lt;/h4&gt;
&lt;p&gt;我們的網站只會用到一個 app，把它建出來取名為 &lt;code&gt;draw_member&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py startapp draw_member
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;demo_django_draw_member/
└── draw_site/
    ├── draw_member/
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── migrations/
    │   ├── models.py
    │   ├── tests.py
    │   └── views.py
    ├── draw_site/
    │   └── ...
    └── manage.py*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到 app 與 project 的架構是不一樣的。&lt;/p&gt;
&lt;p&gt;要把這個新的 app 加到 project 裡，修改 &lt;code&gt;draw_site/settings.py&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_site/settings.py&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;draw_member&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;# 加這一行&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;預設其實裝了很多 app。暫時不理他們是什麼。&lt;/p&gt;
&lt;h4 id="django-settings"&gt;Django settings&lt;/h4&gt;
&lt;p&gt;先簡單介紹一下 &lt;code&gt;draw_site/settings.py&lt;/code&gt;。除了剛剛用到 INSTALLED_APPS，講幾個跟這邊比較有關的參數。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Database&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/1.8/ref/settings/#databases&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;db.sqlite3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Internationalization&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/1.8/topics/i18n/&lt;/span&gt;

&lt;span class="n"&gt;LANGUAGE_CODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;en-us&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TIME_ZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;USE_TZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DATABSES 裡定義了使用的資料庫。預設會使用 &lt;code&gt;db.sqlite3&lt;/code&gt; 這個 SQLite 資料庫。&lt;/p&gt;
&lt;p&gt;再來是語言、時區的設定。預設是 UTC 並且使用 timezone，也就是 server 的時間都是用 UTC 記錄的。&lt;/p&gt;
&lt;h4 id="database-migration"&gt;Database Migration&lt;/h4&gt;
&lt;p&gt;在什麼 code 都還沒寫之前，介紹一個 database 觀念：&lt;a href="https://docs.djangoproject.com/en/1.8/topics/migrations/"&gt;migration&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在之前的例子可以知道，我們會先設計一個資料庫該存什麼東西，整個網站流程會怎麼用這些資料，這些形成 table schema。但是隨著時間，可能網站有新的功能，很難說完全不去更動 schema。&lt;/p&gt;
&lt;p&gt;更動 schema 不是件簡單的事，如果是上 production 的網站，資料庫會有運作以來累積的資料，總不能 schema 改了這些資料就丟掉吧？而且在網站開發的時候，在不同版本的（或不同人開發的）code 就可能有不同的 schema。要怎麼確保 code 與 database 的狀態就要靠 migration。&lt;/p&gt;
&lt;p&gt;……一開始就這麼複雜？好啦我們的例子沒有用到 migration 大多數的功能，只有用它 initiate database。內建的 app 都有自己的 database schema，可以用它把資料庫的 table 建出來。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;span class="go"&gt;Operations to perform:&lt;/span&gt;
&lt;span class="go"&gt;  Synchronize unmigrated apps: messages, staticfiles&lt;/span&gt;
&lt;span class="go"&gt;  Apply all migrations: sessions, auth, contenttypes, admin&lt;/span&gt;
&lt;span class="go"&gt;Synchronizing apps without migrations:&lt;/span&gt;
&lt;span class="go"&gt;  Creating tables...&lt;/span&gt;
&lt;span class="go"&gt;    Running deferred SQL...&lt;/span&gt;
&lt;span class="go"&gt;  Installing custom SQL...&lt;/span&gt;
&lt;span class="go"&gt;Running migrations:&lt;/span&gt;
&lt;span class="go"&gt;  Rendering model states... DONE&lt;/span&gt;
&lt;span class="go"&gt;  Applying contenttypes.0001_initial... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying auth.0001_initial... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying admin.0001_initial... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying contenttypes.0002_remove_content_type_name... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying auth.0002_alter_permission_name_max_length... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying auth.0003_alter_user_email_max_length... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying auth.0004_alter_user_username_opts... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying auth.0005_alter_user_last_login_null... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying auth.0006_require_contenttypes_0002... OK&lt;/span&gt;
&lt;span class="go"&gt;  Applying sessions.0001_initial... OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;migration 就會一步步把 database 調整到符合現在 code 的狀態，這些調整就會記錄在 &lt;code&gt;&amp;lt;app&amp;gt;/migrations/&lt;/code&gt; 底下，等等就會看到了。&lt;/p&gt;
&lt;h3 id="url-dispatcher"&gt;URL dispatcher&lt;/h3&gt;
&lt;p&gt;我們接下來要改首頁，把 Django 預設的 &lt;code&gt;/&lt;/code&gt; 首頁換成 Hello World。&lt;/p&gt;
&lt;p&gt;Flask URL routing 是直接用 decorator 寫在 view function 上面。幫大家回顧一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django 的 view 和 URL 是分開的，首先是 view：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_member/views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;  &lt;span class="c1"&gt;# 先暫時留著&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;結構上大同小異（也因為有 &lt;a href="http://wsgi.org/"&gt;WSGI&lt;/a&gt; 規範的關係啦）。&lt;/p&gt;
&lt;p&gt;再來是 URL 設定。我們先把 URL 加在 project 設定。這邊可能覺得設定有點分散比較怪，等一下再把它放到 app 裡面。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_site/urls.py&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;draw_site URL Configuration&lt;/span&gt;

&lt;span class="sd"&gt;The `urlpatterns` list routes URLs to views. For more information please see:&lt;/span&gt;
&lt;span class="sd"&gt;    https://docs.djangoproject.com/en/1.8/topics/http/urls/&lt;/span&gt;
&lt;span class="sd"&gt;...&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;draw_member.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;概念也很簡單，把要的 view function 從 app import 進來（所以 app 目錄是個 Python module，底下會 &lt;code&gt;__init__.py&lt;/code&gt;），給一個 regex 表示的路徑，後面放上處理 function 以及一個 optional 的名字，這個名字就代表了這個 URL 路徑，之後可以反查。&lt;/p&gt;
&lt;p&gt;測一下確認設定都是正確的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;curl -XGET &lt;span class="s2"&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再看一下 &lt;code&gt;draw_site/urls.py&lt;/code&gt;，可以看到 Django 預設放了個 &lt;code&gt;/admin&lt;/code&gt; 後面用的是 &lt;code&gt;include(app.urls)&lt;/code&gt;，表示這一整包只要是 admin/ 開頭的 URL 都交給 admin.site.urls 去處理路徑。這樣方便 app 在不同網站中重覆利用，因為可能放的路徑都不一樣，但一個 app 內的 URL 處理會有一致性。&lt;/p&gt;
&lt;p&gt;馬上來改寫一下。首先在 app &lt;strong&gt;draw_member&lt;/strong&gt; 底下加一個 &lt;code&gt;urls.py&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_member/urls.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;  &lt;span class="c1"&gt;# explicit relative import&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本上格式就是照抄原本就有的。因為放在同個 app 裡面了，import view 時就可以用 explicit relative import（這不是 relative import 喔）&lt;/p&gt;
&lt;p&gt;原本的 urls.py 就改成把 URL 的處理「dispatch」給這個 app，改成底下這樣。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# draw_site/urls.py
from django.conf.urls import include, url
from django.contrib import admin


urlpatterns = [
    url(r&amp;#39;^admin/&amp;#39;, include(admin.site.urls)),
    url(r&amp;#39;^&amp;#39;, include(&amp;#39;draw_member.urls&amp;#39;)),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;r'^'&lt;/code&gt; 代表從根目錄就交給這個 app 去管理，也因為這樣比較專一的路徑要放前面，像是 /admin。用字串表示在執行的時候才 import 這個 module，不想也可以拿掉字串把 app import 進來。&lt;/p&gt;
&lt;p&gt;以上就是最基本的 &lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/urls/"&gt;URL dispatching&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="django-model-and-orm"&gt;Django Model and ORM&lt;/h3&gt;
&lt;p&gt;接著處理資料庫的問題。當然可以在 Django 裡面寫 raw SQL，但這邊提供另一個想法：Object-relational Mapping (ORM)。ORM 把資料用物件導向的方式整理，把 SQL、table、database 的細節交給 ORM engine 去翻譯。這可以在找到非常多介紹，直接跳到實作。&lt;/p&gt;
&lt;pre style="font-family: Consolas, 'Courier New', monospace"&gt;
    ┌─────────────────────┐
    │ members             │
    ├─────────────────────┤
    │ id          INTEGER │ &lt;─┐
    │ name           TEXT │   │
    │ group_name     TEXT │   │
    └─────────────────────┘   │
                              │
    ┌─────────────────────┐   │
    │ draw_histories      │   │ foreign
    ├─────────────────────┤   │ key
    │ memberid    INTEGER │ ──┘
    │ time       DATETIME │
    └─────────────────────┘
&lt;/pre&gt;

&lt;p&gt;回想一下我們的 schema 設計。改用 ORM 來思考我們就會有成員（Member）以及抽籤歷史（History）兩大 models。&lt;strong&gt;Member&lt;/strong&gt; 記錄了名字與所屬團體；&lt;strong&gt;History&lt;/strong&gt; 會記錄時間、這筆抽籤是屬於哪個成員的。&lt;/p&gt;
&lt;p&gt;在 Django 中，model 定義在 &lt;code&gt;models.py&lt;/code&gt; 裡面，馬上來寫寫看。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_members/models.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.timezone&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;group_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; of &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;History&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;draw_histories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# now() will return datetime.utcnow()&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; at &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一個 class 裡的屬性就對應到一個欄位（Field），欄位會有他的型別以及資料庫實作上的限制（例如字串有上限，當然也可以不設）。Field type 可以參考&lt;a href="https://docs.djangoproject.com/en/1.8/ref/models/fields/#field-types"&gt;官網&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Member&lt;/strong&gt; 底下都是字串所以是 &lt;code&gt;CharField&lt;/code&gt;。 &lt;strong&gt;History&lt;/strong&gt; 稍微複雜一點，時間的記錄 date 用 &lt;code&gt;DateTimeField&lt;/code&gt;，這樣欄位拿回來就會轉換成 Python datetime object；另一個 member 用的是 &lt;code&gt;ForeignKey&lt;/code&gt;，也就是 relationship field，來表示這筆抽籤屬於拿個成員。後面的 &lt;code&gt;related_name&lt;/code&gt; 提供了反查功能，也就是能從一個 member 去查他所有的 histories。&lt;/p&gt;
&lt;p&gt;同時先寫好兩個 class 底下的 &lt;code&gt;__str__&lt;/code&gt;，這樣等下在 Python shell 操作時容易辨認每個物件的內容。&lt;/p&gt;
&lt;h4 id="migration-the-tracker-of-model-changes"&gt;Migration the tracker of model changes&lt;/h4&gt;
&lt;p&gt;多說無用，馬上來試一試。&lt;/p&gt;
&lt;p&gt;……等等，想到 migration 了嗎？每次更動 database model 都要跑 migration，確保 code 與資料庫狀態一致。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;python manage.py makemigrations draw_member
&lt;span class="go"&gt;python manage.py makemigrations draw_member&lt;/span&gt;
&lt;span class="go"&gt;Migrations for &amp;#39;draw_member&amp;#39;:&lt;/span&gt;
&lt;span class="go"&gt;  0001_initial.py:&lt;/span&gt;
&lt;span class="go"&gt;    - Create model History&lt;/span&gt;
&lt;span class="go"&gt;    - Create model Member&lt;/span&gt;
&lt;span class="go"&gt;    - Add field member to history&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到 Django 很聰明的知道我們多定義了兩個 models，裡面有些對應到資料庫的欄位型態。這些資訊會寫在 migration file 裡面，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_member/migrations/0001_initial.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;History&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serialize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auto_created&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Member&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serialize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auto_created&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;model_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;history&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;member&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;draw_member.Member&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;draw_histories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意到 Django ORM 自動幫我們加了 &lt;code&gt;id&lt;/code&gt; 這個 primary key，等等就會用到。Migration 裡面的細節等對 Django 更熟了之後就能慢慢了解了。&lt;/p&gt;
&lt;p&gt;有了新的 migration 就要同步資料庫的狀態，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;span class="go"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Running migrations:&lt;/span&gt;
&lt;span class="go"&gt;  Rendering model states... DONE&lt;/span&gt;
&lt;span class="go"&gt;  Applying draw_member.0001_initial... OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="orm-queries-in-shell"&gt;ORM queries in shell&lt;/h4&gt;
&lt;p&gt;接下來我們操作一下 ORM。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python manage.py shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就會打開一個 Python shell。如果裝了 IPython 就會打開 IPython shell。
這個與一般的有什麼差別呢？他會帶有 Django project 的設定。如果是從一般的 shell 可以先跑以下的指令來達到相同的效果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;$ DJANGO_SETTINGS_MODULE=&amp;quot;draw_site.settings&amp;quot; python&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [1]: from draw_member.models import Member, History
In [2]: m1 = Member(name=&amp;quot;高坂 穂乃果&amp;quot;, group_name=&amp;quot;μ&amp;#39;s&amp;quot;)
In [4]: m2 = Member(name=&amp;quot;平沢 唯&amp;quot;, group_name=&amp;quot;K-ON!&amp;quot;)
In [5]: m1, m2
Out[5]: (&amp;lt;Member: 高坂 穂乃果 of μ&amp;#39;s&amp;gt;, &amp;lt;Member: 平沢 唯 of K-ON!&amp;gt;)
In [7]: m1.save()
In [8]: m2.save()
In [6]: h1 = History(member=m1)
In [9]: h1.save()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用上就把資料當作物件來操作，如同 ORM 字面的意思。注意只有在 &lt;code&gt;.save()&lt;/code&gt; 才真正被存到資料裡。拿沒有存的 object 來操作 database 就會出現 exception。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;h_failed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;History&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FF&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;h_failed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;span class="c"&gt;...&lt;/span&gt;
&lt;span class="gr"&gt;IntegrityError&lt;/span&gt;: &lt;span class="n"&gt;NOT NULL constraint failed: draw_member_history.member_id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;覺得麻煩的話，用 &lt;code&gt;Model.objects.create()&lt;/code&gt; 就可以一步搞定。正確的存好之後，現在資料庫已經有資料了。我們可以先在 SQLite 裡確認。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;-- sqlite3 db.sqlite3&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;draw_member_member&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;id|name|group_name&lt;/span&gt;
&lt;span class="go"&gt;1|高坂 穂乃果|μ&amp;#39;s&lt;/span&gt;
&lt;span class="go"&gt;2|平沢 唯|K-ON!&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;draw_member_history&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;id|time|member_id&lt;/span&gt;
&lt;span class="go"&gt;1|2015-10-05 15:17:32.061384|1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;透過像剛剛 object 的操作，我們也能建出如同手寫 SQL 一樣的資料庫，當然像 &lt;code&gt;id&lt;/code&gt;、&lt;code&gt;member_id&lt;/code&gt; 這些欄位是 ORM engine 自動幫我們做出來的，這些可以自訂，不過預設的行為不難理解。&lt;/p&gt;
&lt;p&gt;要怎麼從 ORM 像剛剛下 SQL 一樣撈資料呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;draw_member.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;History&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;lt;Member: 高坂 穂乃果 of μ&amp;#39;s&amp;gt;, &amp;lt;Member: 平沢 唯 of K-ON!&amp;gt;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;History&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;lt;History: 高坂 穂乃果 at 2015-10-05 15:17:32.061384+00:00&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;資料透過 &lt;code&gt;Model.objects&lt;/code&gt; 這個 Manager 去查詢，細節就去看 Django 關於 &lt;a href="https://docs.djangoproject.com/en/1.8/topics/db/queries"&gt;Making queries&lt;/a&gt; 的內容吧。查詢資料庫就會回傳 &lt;a href="https://docs.djangoproject.com/en/1.8/ref/models/querysets/#django.db.models.query.QuerySet"&gt;QuerySet&lt;/a&gt;，這並不會真的去「查」資料庫，但先把指令存著等真的要用到值時才去計算，也就是 lazy evaluation。&lt;/p&gt;
&lt;p&gt;QuerySet 底下就有很多對應到 SQL 指令的查詢，像是拿回所有 objects 的 &lt;code&gt;QuerySet.all()&lt;/code&gt;，前面已經用過了。或者篩選的 &lt;code&gt;QuerySet.filter()&lt;/code&gt;，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;K-ON!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;[&amp;lt;Member: 平沢 唯 of K-ON!&amp;gt;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group_name__contains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;[&amp;lt;Member: 平沢 唯 of K-ON!&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 &lt;code&gt;&amp;lt;field&amp;gt;__contains&lt;/code&gt; 就是 Django ORM 為了實做像 SQL &lt;code&gt;LIKE&lt;/code&gt; 指令的對應欄位。&lt;/p&gt;
&lt;p&gt;先講幾個有關的，首先每個 Model 都有個 primary key &lt;code&gt;pk&lt;/code&gt;，預設指到 &lt;code&gt;Model.id&lt;/code&gt; 這個欄位上，另用 &lt;code&gt;QuerySet.get()&lt;/code&gt; 可以拿到單一物件，這時候萬用的 pk 就派上用場了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;Member: 高坂 穂乃果 of μ&amp;#39;s&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查 relation 也很簡單，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;History&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;Member: 高坂 穂乃果 of μ&amp;#39;s&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;高坂 穂乃果&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;還記得之前設得 &lt;code&gt;related_name="draw_histories"&lt;/code&gt;，表示我們能從 &lt;strong&gt;Member&lt;/strong&gt; 反查回去該人相關的歷史，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw_histories&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;[&amp;lt;History: 高坂 穂乃果 at 2015-10-05 15:17:32.061384+00:00&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後我們來刪資料，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;History&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;當然一開始我們可以暴力把 &lt;code&gt;db.sqlite3&lt;/code&gt; 整個刪掉再重新 &lt;code&gt;python manage.py migrate&lt;/code&gt; 一次就可以讓 database 對應的 table 都建立好，不過只適用於 SQLite 而已。或者，正確的「清空資料庫」做法是用 &lt;code&gt;flush&lt;/code&gt; 指令，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;python manage.py flush
&lt;span class="go"&gt;You have requested a flush of the database.&lt;/span&gt;
&lt;span class="go"&gt;This will IRREVERSIBLY DESTROY all data currently in the &amp;#39;draw_site/db.sqlite3&amp;#39; database,&lt;/span&gt;
&lt;span class="go"&gt;and return each table to an empty state.&lt;/span&gt;
&lt;span class="go"&gt;Are you sure you want to do this?&lt;/span&gt;

&lt;span class="go"&gt;    Type &amp;#39;yes&amp;#39; to continue, or &amp;#39;no&amp;#39; to cancel: yes&lt;/span&gt;
&lt;span class="go"&gt;Installed 0 object(s) from 0 fixture(s)&lt;/span&gt;
&lt;span class="go"&gt;Installed 0 object(s) from 0 fixture(s)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="data-in-orm-and-fixtures"&gt;Data in ORM and fixtures&lt;/h4&gt;
&lt;p&gt;我們把 &lt;code&gt;members.csv&lt;/code&gt; 的資料填到資料庫吧。這邊就不用細說了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;In [1]: import csv
In [2]: with open(&amp;#39;../../draw_member/members.csv&amp;#39;, newline=&amp;#39;&amp;#39;) as f:
   ...:    csv_reader = csv.DictReader(f)
   ...:    members = [
   ...:    (row[&amp;#39;名字&amp;#39;], row[&amp;#39;團體&amp;#39;])
   ...:    for row in csv_reader
   ...:    ]
In [3]: from draw_member.models import Member
In [4]: for m in members:
   ...:     Member(name=m[0], group_name=m[1]).save()
   ...:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以自己檢查一下是不是 14 個人都寫到資料庫了。&lt;/p&gt;
&lt;p&gt;不過現在有個問題是，之後可能會常常把資料庫砍掉重練，或者要把這些（或很多來源）的資料讀到資料庫，每次都重新讀寫也是可以，但有沒有別的做法能把資料先存起來？&lt;/p&gt;
&lt;p&gt;這邊就要介紹 &lt;a href="https://docs.djangoproject.com/en/1.8/howto/initial-data/#providing-initial-data-with-fixtures"&gt;Django fixtures&lt;/a&gt; 了。他能把資料庫的資料存成 JSON、YAML（需要 &lt;a href="http://pyyaml.org/"&gt;PyYAML&lt;/a&gt;）等格式。&lt;/p&gt;
&lt;p&gt;一般 fixtures 是被在 &lt;code&gt;&amp;lt;app&amp;gt;/fixtures/&lt;/code&gt; 目錄底下，記得先把目錄建出來。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir draw_member/fixtures
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根據 database 的內容建立 fixtures 可以使用 &lt;code&gt;dumpdata&lt;/code&gt; 指令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py dumpdata &lt;span class="se"&gt;\&lt;/span&gt;
    --format&lt;span class="o"&gt;=&lt;/span&gt;yaml &lt;span class="se"&gt;\&lt;/span&gt;
    --indent&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --output draw_member/fixtures/anime_members.yaml
    draw_member.Member &lt;span class="se"&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_member/fixtures/anime_members.yaml&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;   &lt;span class="nt"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u03BC&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u9AD8\u5742&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="se"&gt;\u7A42\u4E43\u679C&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;draw_member.member&lt;/span&gt;
    &lt;span class="nt"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;   &lt;span class="nt"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u03BC&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="nt"&gt; name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\u7D62\u702C&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="se"&gt;\u7D75\u91CC&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;draw_member.member&lt;/span&gt;
    &lt;span class="nt"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 JSON 輸出也可以，改成 &lt;code&gt;--format=json&lt;/code&gt; 就可以了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;draw_member.member&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;pk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\u9ad8\u5742 \u7a42\u4e43\u679c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;group_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\u03bc&amp;#39;s&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我們可以用 &lt;code&gt;python manage.py flush&lt;/code&gt; 把資料庫清掉，模擬資料的讀入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;python manage.py loaddata anime_members.yaml
&lt;span class="go"&gt;Installed 14 object(s) from 1 fixture(s)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣資料的存取就介紹得差不多了。更多的細節可以參考&lt;a href="https://docs.djangoproject.com/en/1.8/#the-model-layer"&gt;官網 model layer&lt;/a&gt; 的說明。&lt;/p&gt;
&lt;h3 id="django-template"&gt;Django Template&lt;/h3&gt;
&lt;p&gt;在進行下去之前，先確認我們的目錄結構是一樣的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;demo_django_draw_member/
└── draw_site/
    ├── db.sqlite3
    ├── draw_member/
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── fixtures/
    │   │   ├── anime_members.json
    │   │   └── anime_members.yaml
    │   ├── migrations/
    │   │   ├── 0001_initial.py
    │   │   └── __init__.py
    │   ├── models.py
    │   ├── tests.py
    │   ├── urls.py
    │   └── views.py
    ├── draw_site/
    │   ├── __init__.py
    │   ├── settings.py
    │   ├── urls.py
    │   └── wsgi.py
    └── manage.py*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django 的 template 預設是放在 &lt;code&gt;&amp;lt;app&amp;gt;/templates/&lt;/code&gt; 底下。不過為了在跨 app 時不要衝到名字，我們會多包一層 app 為名的資料夾。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p draw_member/templates/draw_member
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;它跟 Flask 用的 Jinja2 templates 乍看下非常類似（Jinja2 模仿 Django template），兩者最大的差別是在 Jinja2 裡能很自由的使用 Python function，不過 Django 靠的是 template tag 以及 filter。我們的例子兩者是沒差多少。&lt;/p&gt;
&lt;p&gt;一樣先把 &lt;code&gt;base.html&lt;/code&gt; 以及 &lt;code&gt;home.html&lt;/code&gt; 做出來。我們也先把 Form 寫上了，暫時先用 GET。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# draw_member/templates/draw_member/base.html #}&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;抽籤系統&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;功能列&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;首頁（抽籤）&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;history&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;歷史記錄&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# draw_member/templates/draw_member/home.html #}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw_member/base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;來抽出快樂的夥伴吧！&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;選擇要被抽的團體&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;group_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;團隊名稱：&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;group_name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;μ&amp;#39;s
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;group_name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;K-ON!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;K-ON!
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;group_name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ALL&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;（全）
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;整體的概念應該很好理解。&lt;code&gt;{% url 'xxxx' %}&lt;/code&gt; 就是 URL resolver，還記得在 &lt;code&gt;urls.py&lt;/code&gt; 的設定時有給個 &lt;code&gt;name&lt;/code&gt; 參數嗎，這邊就會根據那個名字回傳正確的網址。&lt;/p&gt;
&lt;p&gt;順便更新一下 URL 把這些 view 先加好，不然等下 runserver 會說找不到這些網址。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_members/urls.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^draw/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;draw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^history/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;history&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_members/views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;Draw&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;history&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;History&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;緊接著改寫我們的首頁，讓它用上 &lt;code&gt;home.html&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw_member/home.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/10/django-draw-member/pics/django_home.png"/&gt;
  &lt;p class="caption"&gt;加上 template 的首頁&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Template 更多的說明可以參考&lt;a href="https://docs.djangoproject.com/en/1.8/#the-template-layer"&gt;官網 template layer&lt;/a&gt; 的說明。&lt;/p&gt;
&lt;h3 id="more-on-djangos-model-template-and-view-mtv"&gt;More on Django&amp;rsquo;s model, template and view (MTV)&lt;/h3&gt;
&lt;p&gt;我們把最重要的抽籤功能實作出來吧。&lt;/p&gt;
&lt;p&gt;這邊需要理解的就是，Django 會把傳到 GET / POST 的參數以 dict 存在 &lt;code&gt;request.GET&lt;/code&gt; / &lt;code&gt;request.POST&lt;/code&gt; 裡面，&lt;code&gt;@require_GET&lt;/code&gt; 限制只能使用 GET 去溝通。&lt;/p&gt;
&lt;p&gt;其他的邏輯都是照抄以前的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;require_GET&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;History&lt;/span&gt;

&lt;span class="nd"&gt;@require_GET&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Retrieve all related members&lt;/span&gt;
    &lt;span class="n"&gt;group_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;valid_members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;valid_members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Raise 404 if no members are found given the group name&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;valid_members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No member in group &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Lucky draw&lt;/span&gt;
    &lt;span class="n"&gt;lucky_member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Update history&lt;/span&gt;
    &lt;span class="n"&gt;draw_history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;History&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lucky_member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;draw_history&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{0.name}&lt;/span&gt;&lt;span class="s2"&gt;（團體：&lt;/span&gt;&lt;span class="si"&gt;{0.group_name}&lt;/span&gt;&lt;span class="s2"&gt;）&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lucky_member&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 ORM 寫起來比 raw SQL 乾淨多了，不過一開始要把對應的 function 都記起來就是。
馬上測試一下，一樣偷懶先不去寫 template。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;curl -XGET &lt;span class="s2"&gt;&amp;quot;localhost:8000/draw/?group=ALL&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;p&amp;gt;小泉 花陽（團體：μ&amp;#39;s）&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是從首頁去點的，觀察一下網址的變化。例如：&lt;code&gt;http://localhost:8000/draw/?group_name=K-ON!&lt;/code&gt;，可以看到 form 的選項直接寫在網址列。這是使用 POST 與 GET 最大的不同。&lt;/p&gt;
&lt;p&gt;再來把歷史記錄的部份也寫一下，也把 template 都補上。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# draw_member/templates/history.html #}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw_member/base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;抽籤歷史&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;抽籤歷史（最近 10 筆）&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;名字&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;團體&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;抽中時間&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;thead&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;history&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;recent_histories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;history.member.name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;history.member.group_name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;history.time&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;date&lt;/span&gt;&lt;span class="s2"&gt;:&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;history.html 與本來 Flask 不一樣的地方，在用上了 &lt;code&gt;date:"r"&lt;/code&gt; 的 filter，傳的參數接在 &lt;code&gt;:&lt;/code&gt; 之後。也更新對應 view 的動作，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;history&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;recent_draws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;History&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw_member/history.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;recent_histories&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;recent_draws&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/10/django-draw-member/pics/django_history.png"/&gt;
&lt;/div&gt;

&lt;p&gt;可以看到預設用的是 UTC 時區，時區的轉換細節放到文末吧。我們可以在 view 裡更改要呈現的時區，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.timezone&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;activate&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;history&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/10/django-draw-member/pics/django_history_tz.png"/&gt;
&lt;/div&gt;

&lt;p&gt;這樣基本功能就搞定啦！細節一樣參考&lt;a href="https://docs.djangoproject.com/en/1.8/#the-view-layer"&gt;官網 view layer&lt;/a&gt; 的說明。&lt;/p&gt;
&lt;h3 id="django-form"&gt;Django Form&lt;/h3&gt;
&lt;p&gt;直接把 form 寫在 template 裡面也是可以，有時候 form 可能跟 model 息息相關，而且 form input 多了之後每個欄位都要自己讀寫也太不直覺。想要驗証使用者的 input 的話就更複雜了。&lt;/p&gt;
&lt;p&gt;於是就有了 Django Form。馬上來看用起來是怎麼樣。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# draw_member/forms.py
from django import forms

class DrawForm(forms.Form):
    GROUP_CHOICES = [
        (&amp;quot;μ&amp;#39;s&amp;quot;, &amp;quot;μ&amp;#39;s&amp;quot;),
        (&amp;quot;K-ON!&amp;quot;, &amp;quot;K-ON!&amp;quot;),
        (&amp;quot;ALL&amp;quot;, &amp;quot;（全）&amp;quot;),
    ]
    group = forms.ChoiceField(
        choices=GROUP_CHOICES,
        label=&amp;#39;團隊名稱&amp;#39;,
        label_suffix=&amp;#39;：&amp;#39;,
        widget=forms.RadioSelect,
        initial=&amp;#39;ALL&amp;#39;
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建了一個新的 form class，像 Model 一樣，裡面規定了每個欄位的屬性。我們這邊只有一個 &lt;code&gt;group&lt;/code&gt; 是個單選的 ChoiceField，&lt;code&gt;choices&lt;/code&gt; 是個 list of two-item tuples，第一個是內部的值，第二個是顯示的字。其他的都是細節的調整。&lt;/p&gt;
&lt;p&gt;把這個 form 用到 view 裡面。新建一個 form object &lt;code&gt;form&lt;/code&gt;，然後把這個變數 &lt;code&gt;form&lt;/code&gt; 傳進 template 裡面。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DrawForm&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DrawForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw_member/home.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來修改 template，就不用自己寫 form 的內容了，改成 &lt;code&gt;{{ form }}&lt;/code&gt; Django 就會自動產生。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# draw_member/home.html #}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw_member/base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;來抽出快樂的夥伴吧！&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;選擇要被抽的團體&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/10/django-draw-member/pics/django_form.png"/&gt;
&lt;/div&gt;

&lt;p&gt;不過這個長得跟我們原本的 form 不一樣嘛。好在 Django form 是很彈性的，form 在被 render 成 HTML 時可以提供細節的調整，大家可以參考&lt;a href="https://docs.djangoproject.com/en/1.8/topics/forms/#form-rendering-options"&gt;官網 Form rendering options&lt;/a&gt; 調整。我直接給調好的結果吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.group.label_tag&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;radio&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;form.group&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;radio.tag&lt;/span&gt; &lt;span class="cp"&gt;}}{{&lt;/span&gt; &lt;span class="nv"&gt;radio.choice_label&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用結果去對照每個 &lt;code&gt;{{ ... }}&lt;/code&gt; 部件對應的 HTML 元素吧。&lt;/p&gt;
&lt;h4 id="more-django-form-in-view"&gt;More Django form in view&lt;/h4&gt;
&lt;p&gt;Form 的功能可不只這樣，可以在創建 DrawForm 時直接把 &lt;code&gt;request.GET&lt;/code&gt; 傳入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_member/views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Retrieve all related members&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DrawForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;group_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cleaned_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;valid_members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;valid_members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Raise 404 if no members are found given the group name&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No member in group &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
                      &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# Lucky draw&lt;/span&gt;
    &lt;span class="n"&gt;lucky_member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 &lt;code&gt;form.is_valid()&lt;/code&gt; 可以驗証每個欄位的資料是不是正確的。&lt;/p&gt;
&lt;p&gt;我們也順便把 /draw 加上 template 吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# draw_member/draw.html #}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw_member/base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;抽籤結果&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;抽籤結果&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;lucky_member.name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;（團體：&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;lucky_member.group_name&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;）&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_member/views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw_member/draw.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;lucky_member&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lucky_member&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;更多 Forms 的介紹一樣參考&lt;a href="https://docs.djangoproject.com/en/1.8/#forms"&gt;官網&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="_2"&gt;總結&lt;/h3&gt;
&lt;p&gt;做完的成品在 &lt;a href="https://github.com/ccwang002/draw_member_django"&gt;Github&lt;/a&gt; 上，參考 README 就可以設定好環境了。&lt;/p&gt;
&lt;p&gt;這樣就把 Django 最基本的 Model, View, Template, Form 幾個大部份體驗一遍了。可以感覺出來 Django 提供的功能比 Flask 多很多，但也代表要花更多的時候學習使用它。其實改寫到最後我們的 code 非常少，可以為了結構化的 code 還比較多。&lt;/p&gt;
&lt;p&gt;當然這不代表就學會 Django 了。最後來介紹幾個可以接續學習的 Django 資源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/uranusjr/django-tutorial-for-programmers"&gt;《為程式人寫的 Django Tutorial 》&lt;/a&gt;是個真正從零到一的 30 天學習規劃（雖然我學了好幾個月 T___T），有了這個抽籤程式的概念再去讀一次應該會更清楚整個 Django 的設計。作者：Tzu-ping Chung (@uranusjr)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://masteringdjango.com"&gt;&lt;em&gt;Mastering Django: Core&lt;/em&gt;&lt;/a&gt;, the successor to &lt;a href="http://www.djangobook.com/en/2.0/index.html"&gt;&lt;em&gt;The Django Book&lt;/em&gt;&lt;/a&gt; last updated in 2009, is the definitive guide to Django targeting the latest Django version 1.8 at the time of writing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的 Django 技能樹選擇請見 TP 的 &lt;a href="https://github.com/uranusjr/django-tutorial-for-programmers/blob/master/30-moving-on.md"&gt;lesson 30&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="details"&gt;Details&lt;/h3&gt;
&lt;p&gt;跟 Flask 一樣，底下記錄一些細節或改善等等為了避免篇幅過長（已經太長了）而移至此的段落。&lt;/p&gt;
&lt;h4 id="raw-sql"&gt;Raw SQL&lt;/h4&gt;
&lt;p&gt;在介紹 Django Model 的時候直接用了 ORM，但實際上 Django 是可以寫 raw SQL 了，而且還有「聰明版」的 raw SQL 能夠拿回對應的 model object。馬上來看怎麼回事。&lt;/p&gt;
&lt;p&gt;先來看聰明版的 raw SQL，使用 &lt;code&gt;Model.objects.raw&lt;/code&gt; 拿回所有團體是 K-ON 類的成員。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;SELECT id, name, group_name&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;FROM draw_member_member&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;WHERE group_name LIKE &amp;#39;K-ON&lt;/span&gt;&lt;span class="si"&gt;%%&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;[&amp;lt;Member: 平沢 唯 of K-ON!&amp;gt;,&lt;/span&gt;
&lt;span class="go"&gt; &amp;lt;Member: 秋山 澪 of K-ON!&amp;gt;,&lt;/span&gt;
&lt;span class="go"&gt; &amp;lt;Member: 田井中 律 of K-ON!&amp;gt;,&lt;/span&gt;
&lt;span class="go"&gt; &amp;lt;Member: 琴吹 紬 of K-ON!&amp;gt;,&lt;/span&gt;
&lt;span class="go"&gt; &amp;lt;Member: 中野 梓 of K-ON!&amp;gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會回傳一個 RawQuerySet，裡面其實也是 Member objects，這是靠 Django 去認對應的 primary key，也就是說在 raw() SQL query 裡一定要放 primary key。注意那個 &lt;code&gt;%&lt;/code&gt; 需要被 escape 因為 raw() 的 SQL query 是能放參數的（就像 Python 內建 str %-formatting）。&lt;/p&gt;
&lt;p&gt;不過我們怎麼知道 Member 是存在哪個 table 呢？預設是 &lt;code&gt;&amp;lt;app&amp;gt;_&amp;lt;model&amp;gt;&lt;/code&gt;，但資訊在 meta options 裡的 &lt;code&gt;db_table&lt;/code&gt;，也能被覆寫。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_meta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db_table&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;draw_member_member&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因為 Member 裡面有像 name、group_name 等欄位，在下 query 的時候不一定都會寫在 SELECT 裡面把拿值回來，那麼這些欄位就是 deferred 狀態，只有在真的拿值時才會去跟 database 要。一般使用不會有感覺兩者的差異。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;SELECT id FROM draw_member_member&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;draw_member.models.Member_Deferred_group_name_name&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_deferred_fields&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;{&amp;#39;group_name&amp;#39;, &amp;#39;name&amp;#39;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但我就是不想用 ORM，速度慢，也沒辦法寫複雜的 query（戰）。這就回歸到最傳統的 database connection, cursor 這些概念，就像沒有 SQLAlchemy 的 Flask。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;SELECT name&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;FROM draw_member_member&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;WHERE group_name LIKE &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;K-ON&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="go"&gt;[(&amp;#39;平沢 唯&amp;#39;,), (&amp;#39;秋山 澪&amp;#39;,), (&amp;#39;田井中 律&amp;#39;,), (&amp;#39;琴吹 紬&amp;#39;,), (&amp;#39;中野 梓&amp;#39;,)]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;SELECT member_id, time&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;FROM draw_member_history&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;LIMIT 3&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;[(8, datetime.datetime(2015, 10, 5, 17, 36, 41, 608078, tzinfo=&amp;lt;UTC&amp;gt;)),&lt;/span&gt;
&lt;span class="go"&gt; (11, datetime.datetime(2015, 10, 5, 17, 37, 26, 164830, tzinfo=&amp;lt;UTC&amp;gt;)),&lt;/span&gt;
&lt;span class="go"&gt; (11, datetime.datetime(2015, 10, 5, 17, 37, 37, 483697, tzinfo=&amp;lt;UTC&amp;gt;))]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here you go.&lt;/p&gt;
&lt;h4 id="better-queryset"&gt;Better QuerySet&lt;/h4&gt;
&lt;p&gt;看過了 raw SQL 之後，我們來想想 ORM 的改善吧。雖然說每次要查詢的時候像寫 SQL 一樣把 query 組合出來也可以，但用 ORM 的好處應該是能把這些實作細節跟「包裝起來」。例如最近 n 次抽籤記錄、所有成員的團體名稱（目前是寫死在 DrawForm 裡面）。&lt;/p&gt;
&lt;p&gt;這時候就可以把常用的 query 變成一個 method，例如最近 10 次抽籤記錄就只要用 &lt;code&gt;History.objects.recent(10)&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;這其實有很多做法，像是寫一個 classmethod、Override default Manager、Override default QuerySet。哪個方法比較好呢？在 &lt;a href="http://stackoverflow.com/a/2213341"&gt;StackOverflow&lt;/a&gt;、&lt;a href="https://groups.google.com/forum/#!topic/django-users/0WSdnWFTuUg"&gt;mail list&lt;/a&gt; 都有討論。基本上都能達到相同的效果，但後兩者的做法是比較偏好的，因為 Manager(or QuerySet for Django 1.7+) 負責處理 model 對應到的 database table 等級的操作，但 classmethod 應該是處理已經從 table row 中拿出的一個 model object 相關的操作。如果把同樣性質的 code 放在一起，就應該使用 Manager(QuerySet)。&lt;/p&gt;
&lt;p&gt;而且 TP 也在 Gitter 上開示了，就是這樣（結案）。來改寫 model。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_member/models.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MemberQuerySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unique_groups&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HistoryQuerySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QuerySet&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MemberQuerySet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_manager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;History&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HistoryQuerySet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_manager&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 Member 我們定義了一個 &lt;code&gt;unique_groups&lt;/code&gt; 拿回所有團體的名稱；在 History 定義了 &lt;code&gt;recent&lt;/code&gt; 拿出按時間排序最前面 n 個。新定義的 &lt;code&gt;QuerySet.as_manager()&lt;/code&gt; 就取代掉本來的 &lt;code&gt;Model.objects&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接著來改寫 view 把之前寫的 query 換掉。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#draw_member/views.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;history&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;recent_draws&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;History&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就簡潔一點。再來順便把 form 改得比較彈性，不要把團體名寫死。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#draw_member/forms.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;member_group_choices&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;valid_groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique_groups&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;grp&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;valid_groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;grp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;（全）&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;choices&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DrawForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChoiceField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;member_group_choices&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="timezone"&gt;Timezone&lt;/h4&gt;
&lt;p&gt;感覺最近一直在寫&lt;a href="../../09/datetime-sqlite/"&gt;時區相關的東西&lt;/a&gt;啊。基本上 server 記錄的時間都用 UTC 問題就少很多，但最後還是要呈現一個使用者用的時區。&lt;/p&gt;
&lt;p&gt;但問題是 HTTP header 裡面並沒有這樣的資訊，所以一來用 geoip 去猜，二來用寫個 javascript 在使用者載入的時候去判斷時區，總之是個要另外記錄的東西。細節&lt;a href="https://docs.djangoproject.com/en/1.8/topics/i18n/timezones/#selecting-the-current-time-zone"&gt;官網上也有說明&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在文中是使用 &lt;code&gt;activate('Aisa/Taipei')&lt;/code&gt; 把時區改成 UTC+8。這邊介紹另一個方式，是寫在 template 裡面的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# draw_member/templates/draw_member/history.html #}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;tz&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;抽籤歷史（最近 10 筆）&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;{# ... #}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;timezone&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;history&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;recent_histories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;{# ... #}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endtimezone&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tbody&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="post-form-and-csrf"&gt;POST form and CSRF&lt;/h4&gt;
&lt;p&gt;忘記講了，我們的 form 目前是用 &lt;code&gt;action="get"&lt;/code&gt;，當然可以改回用 POST，也很簡單，就 GET 換成 POST 就好了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_site/views.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;require_POST&lt;/span&gt;

&lt;span class="nd"&gt;@require_POST&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Retrieve all related members&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DrawForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# draw_site/templates/home.html #}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;馬上來試試看。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/10/django-draw-member/pics/django_csrf_failed.png"/&gt;
  &lt;p class="caption"&gt;POST form without CSRF token&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;拿到了一個 403 Forbidden &amp;ldquo;CSRF verification failed.&amp;rdquo;。CSRF (Cross Site Request Forgery) 在 &lt;a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0"&gt;wiki&lt;/a&gt; 有比較完整的介紹，這是一種攻擊手法，在使用者登入網站之後（session 為登入狀態），偽造一個跟網站上一樣的 form 來偽裝使用者的行為。例如購票系統買票，如果沒檢查的話，我可以拿使用者的 session 去網站上隨便買票，網站都會認為是使用者在操作。&lt;/p&gt;
&lt;p&gt;因此 &lt;a href="https://docs.djangoproject.com/en/1.8/ref/csrf/"&gt;CSRF token&lt;/a&gt; 用來防範這個偽造，在產生 form 的時候，網站會再產生一個欄位的值，這個欄位的值每次都會改變，這樣就能確定這個 form 是從網站上拿到的。Django 處理 CSRF protection 是透過 &lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;Middleware&lt;/a&gt;，一個以前沒有提到的概念，表示他是比較底層的東西。相對而言，也不用改我們的 code，在這個例子就只要把 &lt;code&gt;{% csrf_token %}&lt;/code&gt; 加到 form 裡面就可以了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;{# draw_site/templates/home.html #}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;draw&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;{# ... #}&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;csrf_token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="django"></category><category term="sqlite"></category><category term="python"></category></entry><entry><title>Datetime in SQLite and Python</title><link href="https://blog.liang2.tw/posts/2015/09/datetime-sqlite/" rel="alternate"></link><published>2015-09-28T12:00:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-09-28:/posts/2015/09/datetime-sqlite/</id><summary type="html">&lt;p&gt;整理在 Python 中處理時區的問題，並如何自 SQLite 存取考慮時區的時間&lt;/p&gt;</summary><content type="html">&lt;p&gt;要正確處理時間並不容易。承接&lt;a href="../flask-draw-member"&gt;我們先前的例子&lt;/a&gt;，其實是直接把時間轉換出來的字串存在 SQLite 裡。這有幾個問題。&lt;/p&gt;
&lt;p&gt;首先是時區的問題。我們直接把 server 所在時區的時間存到資料庫去，台北的時區為 &lt;a href="https://en.wikipedia.org/wiki/Asia/Taipei"&gt;Asia/Taipei&lt;/a&gt; (UTC+8)。如果今天 server 跑到另一個時區，例如東京 Asia/Tokyo (UTC+9) 好了，這時候資料庫裡就包含了兩個時區的時間，但因為是字串是完全看不出差異的。&lt;/p&gt;
&lt;p&gt;再來用字串存時間也有一些問題。首先是排序，雖然我們的例子是能正確的排序，但如果時間格式換了（像 &lt;code&gt;%H:%M:%S %Y-%m-%d&lt;/code&gt;）那就不一定。再來可以看到後續想處理時間就會比較複雜。不過這一部份是因為 SQLite 沒有專門處理日期時間的資料型態，像 PostgreSQL 就能看得懂。&lt;/p&gt;
&lt;p&gt;所以想要正確處理時間有幾個要點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存到資料庫的時間應該要 UTC 來表示&lt;/li&gt;
&lt;li&gt;在處理時間時（排序、顯示、處理時區），應該轉成正確的資料格式（例如 &lt;a href="https://docs.python.org/3.5/library/datetime.html#datetime-objects"&gt;datetime&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;呈現給使用者時再轉換到該人（或 server）所在時區&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;底下是比較正確處理時間的方式。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#timezone"&gt;時區（Timezone）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#datetime-in-sqlite-again"&gt;Datetime in SQLite, again&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-3-timezone"&gt;Python 3 內建 timezone 支援&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-sqlite-adapter"&gt;讓 Python 內建 SQLite adapter 支援時區&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;總結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="timezone"&gt;時區（Timezone）&lt;/h3&gt;
&lt;p&gt;我們都還沒有處理過時區。時區在 Python 內建的 datetime 只是個「概念」，也就是說，使用者可以傳進去不同的時區（存在 &lt;code&gt;datetime.tzinfo&lt;/code&gt; 中），Python 能針對有提供時區的 datetime 做正確的判斷。但台北的時區是多少，紐約的時區是多少它不知道。&lt;/p&gt;
&lt;p&gt;為什麼不處理各地時區這麼重要的概念？因為時間變動的速度很快，加上日光節約時間每年可能都不一樣，Python 下一版還沒出時區的資訊已經更新了很多次。&lt;/p&gt;
&lt;p&gt;因此在 Python 中實際上時區處理靠得是第三方套件 &lt;a href="http://pythonhosted.org/pytz/"&gt;pytz&lt;/a&gt;。像安裝 Flask 一樣，用 &lt;code&gt;pip install pytz&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;實際操作看看。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# local time&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 16, 33, 39, 537111)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# UTC time&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 8, 33, 39, 538745)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先，可以看到 datetime 本身提供了 &lt;code&gt;now()&lt;/code&gt; 以及 &lt;code&gt;utcnow()&lt;/code&gt; 兩個 function 來拿到現在的時間。台北是 UTC+8 所以時間比 UTC 時間字面上快 8 小時。注意到兩個回傳的 datetime 物件都沒有包含時區的資訊。&lt;/p&gt;
&lt;p&gt;處理時間原則上都以 UTC 為基準。我們建立一個 UTC 的現在時間存在變數 &lt;code&gt;utcnow&lt;/code&gt;，並且用 pytz 處理時間。Import pytz 進來，並且定義了兩個時區：UTC 以及 TPE（台北時間）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 8, 38, 14, 738241)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromutc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 8, 38, 14, 738241, tzinfo=&amp;lt;UTC&amp;gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromutc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 16, 38, 14, 738241, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromutc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromutc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 pytz 定義的時區處理 datetime 之後就會多了 &lt;code&gt;tzinfo&lt;/code&gt; 的資訊。這時也能正確比較不同時區的時間。&lt;/p&gt;
&lt;p&gt;如何處理一個任意定義的時間呢？例如 2016 年台北元旦好了，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;2016-01-01 00:00:00&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_2016_newyear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_2016_newyear&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2016, 1, 1, 0, 0, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpe_2016_newyear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 12, 31, 16, 0, tzinfo=&amp;lt;UTC&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用 &lt;code&gt;.localize(&amp;lt;datetime&amp;gt;)&lt;/code&gt; 給予一個初始沒有時區資訊的 &lt;code&gt;datetime&lt;/code&gt; 時區。有了時區之後，要在不同時區間轉換就使用 &lt;code&gt;.normalize(&amp;lt;datetime&amp;gt;)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;可以再查查當台北 2016 元旦時，美國東岸時間是幾點。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;est&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;US/Eastern&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;est&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpe_2016_newyear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 12, 31, 11, 0, tzinfo=&amp;lt;DstTzInfo &amp;#39;US/Eastern&amp;#39; EST-1 day, 19:00:00 STD&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以後要看球賽轉播、重要發表就不會再搞不清楚時間了。&lt;/p&gt;
&lt;h3 id="datetime-in-sqlite-again"&gt;Datetime in SQLite, again&lt;/h3&gt;
&lt;p&gt;我們會處理 datetime 與時區了，那麼就來改寫一下本來 SQLite 存時間的方式。其實 Python datetime 支援 SQLite 轉換，同樣從&lt;a href="https://docs.python.org/3.5/library/sqlite3.html#default-adapters-and-converters"&gt;Python module 說明文件&lt;/a&gt;裡面拿出來的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;test.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;detect_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PARSE_DECLTYPES&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PARSE_COLNAMES&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CREATE TABLE test(dt timestamp)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;sqlite3.Cursor object at 0x10a59b960&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;資料欄位的設為 &lt;code&gt;timestamp&lt;/code&gt;，並且在連接的時候設定 &lt;code&gt;PARSE_DECLTYPES&lt;/code&gt; 及 &lt;code&gt;PARSE_COLNAMES&lt;/code&gt;，稍後可以看到他們的效果。
趕快把時間存進去吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 12, 48, 16, 671538)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;INSERT INTO test(dt) VALUES (?)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;sqlite3.Cursor object at 0x1082380a0&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_2016_newyear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpe_2016_newyear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 12, 31, 16, 0, tzinfo=&amp;lt;UTC&amp;gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc_dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpe_2016_newyear&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;INSERT INTO test(dt) VALUES (?)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utc_dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;sqlite3.Cursor object at 0x10a59b960&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;存了兩個時間，一個是 UTC 的現在時間，另一個是以 UTC 表示的台北 2016 元旦。注意兩個時間都把 UTC 時區去掉了，因為在某些情況底下 SQLite 與 python 的 datetime adapter 會看不懂時區（這是個 &lt;a href="https://bugs.python.org/issue19065"&gt;bug #19065&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;如果用 SQLite 可以看到時間都是以 UTC 呈現。仍可以用它內建的 &lt;code&gt;datetime('&amp;lt;UTC time&amp;gt;', 'localtime')&lt;/code&gt; 把 UTC 時間字串轉換成電腦的當地時間。這樣處理是容易與其他應用程式相容的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;-- sqlite3 test.db&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;schema&lt;/span&gt;
&lt;span class="go"&gt;CREATE TABLE test(dt timestamp);&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;2015-09-29 12:48:16.671538&lt;/span&gt;
&lt;span class="go"&gt;2015-12-31 16:00:00&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localtime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;2015-09-29 20:48:16&lt;/span&gt;
&lt;span class="go"&gt;2016-01-01 00:00:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再用 Python 讀回來仍然是 datetime 格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ret_vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SELECT dt AS &amp;quot;[timestamp]&amp;quot; FROM test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ret_vals&lt;/span&gt;
&lt;span class="go"&gt;[(datetime.datetime(2015, 9, 29, 12, 48, 16, 671538),),&lt;/span&gt;
&lt;span class="go"&gt; (datetime.datetime(2015, 12, 31, 16, 0),)]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromutc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ret_vals&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="go"&gt;[datetime.datetime(2015, 9, 29, 20, 48, 16, 671538, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;),&lt;/span&gt;
&lt;span class="go"&gt; datetime.datetime(2016, 1, 1, 0, 0, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="python-3-timezone"&gt;Python 3 內建 timezone 支援&lt;/h4&gt;
&lt;p&gt;為了寫這篇 blog 又研究了一下內建的 datetime.timezone。Python 2 沒有這個功能，不過基本的 timedelta 有，所以要自己做應該也是做得到…吧？&lt;/p&gt;
&lt;p&gt;內建的 datetime.timezone 由一個 utcoffset 做建立，基本上就是傳個相對於 UTC 的時間差，以 datetime.timedelta 表示。一樣內建帶有 UTC 時區，這邊試著建了台北以及東京的時間。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_now&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 20, 40, 49, 347568)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpe_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;jpn_delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;jpn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jpn_delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我人在台北，所以 datetime.datetime.now() 會給我台北時間，再用 timedelta 手動算出各時區的時間。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tpe_now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;tpe_delta&lt;/span&gt;  &lt;span class="c1"&gt;# manually time shift&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;jpn_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utc_now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;jpn_delta&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;utc_now&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 12, 40, 49, 347568)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_now&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;utc_now&lt;/span&gt;
&lt;span class="go"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接比較這些算出來的時間，不意外不相等，因為預設的 tzinfo 是空的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 20, 40, 49, 347568, tzinfo=datetime.timezone(datetime.timedelta(0, 28800)))&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe_now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;utc_now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;jpn_now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;jpn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tpe_now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;給了各地的時區的 tzinfo 之後，可以看到 datetime 在做比較的時候是有考慮時區位移的。&lt;/p&gt;
&lt;p&gt;接著再來看一下pytz 與內建 datetime.timezone 的相容程度。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;pytz_utc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;pytz_tpe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jpn_now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;jpn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;datetime.datetime(2015, 9, 29, 12, 40, 49, 347568, tzinfo=&amp;lt;UTC&amp;gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;pytz_tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpe_now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;utc_now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;比較跟轉換都沒有問題，可以放心轉換。&lt;/p&gt;
&lt;h3 id="python-sqlite-adapter"&gt;讓 Python 內建 SQLite adapter 支援時區&lt;/h3&gt;
&lt;p&gt;看了一下 &lt;a href="https://bugs.python.org/issue19065"&gt;Python issue 19065&lt;/a&gt;，之所以沒有解決其實是缺 patch，因為現在的 patch 並不相容 Python 2.x（沒有 datetime.timezone），然後 pysqlite 的維護者並沒有想要支援 timezone 的意思。&lt;/p&gt;
&lt;p&gt;不過那只是內建的 adapter for datetime.datetime object，要自己做也沒問題。參考 issue 裡面提供的解法（在 Github &lt;a href="https://gist.github.com/acdha/6655391"&gt;gist&lt;/a&gt; 上）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# tz_aware_adpater.py&lt;/span&gt;
&lt;span class="c1"&gt;# Adapt from https://gist.github.com/acdha/6655391&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tz_aware_timestamp_adapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;datepart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timepart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datepart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;timepart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;timepart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tz_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timepart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tz_offset&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;00:00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tz_offset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="n"&gt;timepart_full&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timepart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timepart_full&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timepart_full&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;microseconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{:0&amp;lt;6.6}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timepart_full&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;microseconds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;microseconds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;tzinfo&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

&lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_converter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timestamp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tz_aware_timestamp_adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;python3 -i tz_aware_adpater.py&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;test.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;     &lt;span class="n"&gt;detect_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PARSE_DECLTYPES&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PARSE_COLNAMES&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytz&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Asia/Taipei&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;pycontw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pycontw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;&amp;#39;2016-06-03 08:00:00+08:00&amp;#39;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executemany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;INSERT INTO test(dt) VALUES (?)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;pycontw&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pytz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pycontw&lt;/span&gt;&lt;span class="p"&gt;),)]&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;存了兩個帶有時區的時間（兩個時間是相同的）。先從 SQLite 來讀讀看。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;2015-09-29 12:48:16.671538&lt;/span&gt;
&lt;span class="go"&gt;2015-12-31 16:00:00&lt;/span&gt;
&lt;span class="go"&gt;2016-06-03 08:00:00+08:00&lt;/span&gt;
&lt;span class="go"&gt;2016-06-03 00:00:00+00:00&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localtime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;2015-09-29 20:48:16&lt;/span&gt;
&lt;span class="go"&gt;2016-01-01 00:00:00&lt;/span&gt;
&lt;span class="go"&gt;2016-06-03 08:00:00&lt;/span&gt;
&lt;span class="go"&gt;2016-06-03 08:00:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;時區是直接寫到 SQLite 裡面，沒有的話就當成是 UTC 時區。&lt;/p&gt;
&lt;p&gt;再用 Python 讀回來，測一下修改的 adapter。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;dts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SELECT dt FROM test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;dts&lt;/span&gt;
&lt;span class="go"&gt;[(datetime.datetime(2015, 9, 29, 12, 48, 16, 671538),),&lt;/span&gt;
&lt;span class="go"&gt; (datetime.datetime(2015, 12, 31, 16, 0),),&lt;/span&gt;
&lt;span class="go"&gt; (datetime.datetime(2016, 6, 3, 8, 0, tzinfo=datetime.timezone(datetime.timedelta(0, 28800))),),&lt;/span&gt;
&lt;span class="go"&gt; (datetime.datetime(2016, 6, 3, 0, 0, tzinfo=datetime.timezone.utc),)]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]]&lt;/span&gt;
&lt;span class="go"&gt;[datetime.datetime(2016, 6, 3, 8, 0, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;),&lt;/span&gt;
&lt;span class="go"&gt; datetime.datetime(2016, 6, 3, 8, 0, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;讀回來沒有問題，如果要完整處理所有情況（前面兩個 datetime 是 naive 沒有時區）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;utc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="go"&gt;[datetime.datetime(2015, 9, 29, 12, 48, 16, 671538, tzinfo=&amp;lt;UTC&amp;gt;),&lt;/span&gt;
&lt;span class="go"&gt; datetime.datetime(2015, 12, 31, 16, 0, tzinfo=&amp;lt;UTC&amp;gt;),&lt;/span&gt;
&lt;span class="go"&gt; datetime.datetime(2016, 6, 3, 0, 0, tzinfo=&amp;lt;UTC&amp;gt;),&lt;/span&gt;
&lt;span class="go"&gt; datetime.datetime(2016, 6, 3, 0, 0, tzinfo=&amp;lt;UTC&amp;gt;)]&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astimezone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;tpe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromutc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;dts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="go"&gt;[datetime.datetime(2015, 9, 29, 20, 48, 16, 671538, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;),&lt;/span&gt;
&lt;span class="go"&gt; datetime.datetime(2016, 1, 1, 0, 0, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;),&lt;/span&gt;
&lt;span class="go"&gt; datetime.datetime(2016, 6, 3, 8, 0, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;),&lt;/span&gt;
&lt;span class="go"&gt; datetime.datetime(2016, 6, 3, 8, 0, tzinfo=&amp;lt;DstTzInfo &amp;#39;Asia/Taipei&amp;#39; CST+8:00:00 STD&amp;gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;總結&lt;/h3&gt;
&lt;p&gt;時區真的很煩，尤其是很多地方不一定都完整支援時區，最好的情況還是用 UTC 溝通，只有在真的需要時再轉換成當地時間。&lt;/p&gt;
&lt;p&gt;如果大家對時區很有興趣，不久前 &lt;a href="https://www.python.org/dev/peps/pep-0495/"&gt;PEP 495&lt;/a&gt; 已經被接受，沒有意外應該會出現在 Python 3.6 裡面，它處理的是日光節約時間的問題。（感覺在臺灣對日光節約時間完全沒有概念啊）&lt;/p&gt;
&lt;p&gt;不得不說要正確處理時間…很麻煩啊。&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category><category term="datetime"></category><category term="pytz"></category><category term="sqlite"></category><category term="python"></category></entry><entry><title>用 Flask 與 SQLite 架抽籤網站</title><link href="https://blog.liang2.tw/posts/2015/09/flask-draw-member/" rel="alternate"></link><published>2015-09-28T12:00:00-05:00</published><updated>2022-02-18T19:58:57-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-09-28:/posts/2015/09/flask-draw-member/</id><summary type="html">&lt;p&gt;為了實驗室的專題生而寫。&lt;/p&gt;
&lt;p&gt;目標其實是 Django + Django ORM + PostgreSQL，不過一次接觸太多會有反效果，先操作比較簡單的才好上手。所以這邊講 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;為了實驗室的專題生而寫。&lt;/p&gt;
&lt;p&gt;目標其實是 Django + Django ORM + PostgreSQL，不過一次接觸太多會有反效果，先操作比較簡單的才好上手。所以這邊講的並不是 best practice，但使用最少（底層）的知識與工具。如果一開始讓太多套件（像 SQLAlchemy）做掉了細節部份，反而不太能掌握到重要的概念以及為什麼需要這些套件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇文章非常長，應該沒辦法幾分鐘內讀完。對象是初學者學習簡單網站架設。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這個專案的目標：因為大家 meeting 的時候都不問問題，教授需要一個抽籤點人問問題的工具。我們實驗室有分成幾個組別，所以抽籤的時候也要能針對單個組別抽。&lt;/p&gt;
&lt;p&gt;以下使用 &lt;a href="https://zh.wikipedia.org/wiki/LoveLive!"&gt;LoveLive!&lt;/a&gt; 還有 &lt;a href="https://zh.wikipedia.org/wiki/K-ON！輕音部"&gt;K-ON!&lt;/a&gt; 的成員來當例子。&lt;strong&gt;先聲明我兩個動畫都沒有看過，如果有什麼名字打錯請告訴我，絕對不是故意的。&lt;/strong&gt;（2016-06-14 更新：我把兩個動畫都看完了！）&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;資料設計&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;網站架構規劃&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;實作環境設定&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python"&gt;Python 環境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flaskjinja2"&gt;安裝 Flask、Jinja2 等套件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sqlite-database"&gt;SQLite Database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#csv"&gt;把 CSV 寫進資料庫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flask"&gt;Flask 基本架構&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flask-sqlite"&gt;Flask 與 SQLite 資料庫讀取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#first-view-first-template"&gt;First view, first template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;抽籤功能&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#get-vs-post"&gt;GET vs POST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#form"&gt;Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#request-form-post-handling-in-flask"&gt;Request (Form / POST) handling in Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#demo"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-on-templates"&gt;More on templates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;歷史記錄&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#datetime"&gt;時間處理用 datetime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#whats-next"&gt;What&amp;rsquo;s Next&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#static-files-and-better-theme"&gt;Static files and better theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-how-web-works"&gt;More how web works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#object-relational-model-orm"&gt;Object Relational Model (ORM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#django"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;總結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#details"&gt;Details&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#sqlite-table-info"&gt;SQLite table info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sqlite-foreign-key-check"&gt;SQLite foreign key check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;重新讀入資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#datetime-in-sqlite-and-python"&gt;Datetime in SQLite and Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="_1"&gt;資料設計&lt;/h3&gt;
&lt;p&gt;我們先假設所有檔案都放在同個資料夾裡，估且叫 &lt;code&gt;draw_member&lt;/code&gt;。之後沒有額外說明的話，都是在這個目錄下操作。&lt;/p&gt;
&lt;p&gt;原始資料用 CSV 格式來儲存，有「名字」以及「團體」兩個欄位。不過考慮到可能會把檔案匯出，在原始檔案多加一個「最近被抽到的日期」欄位，希望最近被抽到的會比其他人再被抽到的機會低一點。&lt;/p&gt;
&lt;p&gt;這個 CSV 檔案命名為 &lt;code&gt;members.csv&lt;/code&gt;。一開始沒有人被抽到，所以最後一欄都先設成空的&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;，第一行是每一欄欄位的名稱。如果從資料庫匯出，這欄位就會有值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;名字&amp;quot;,&amp;quot;團體&amp;quot;,&amp;quot;最近被抽到的日期&amp;quot;
&amp;quot;高坂 穂乃果&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;絢瀬 絵里&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;南 ことり&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;園田 海未&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;星空 凛&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;西木野 真姫&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;東條 希&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;小泉 花陽&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;矢澤 にこ&amp;quot;,&amp;quot;μ&amp;#39;s&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;平沢 唯&amp;quot;,&amp;quot;K-ON!&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;秋山 澪&amp;quot;,&amp;quot;K-ON!&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;田井中 律&amp;quot;,&amp;quot;K-ON!&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;琴吹 紬&amp;quot;,&amp;quot;K-ON!&amp;quot;,&amp;quot;&amp;quot;
&amp;quot;中野 梓&amp;quot;,&amp;quot;K-ON!&amp;quot;,&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;首先我們先確定會用 Python 把資料讀出來。在 Python 當中有個叫 &lt;code&gt;csv&lt;/code&gt; 的內建模組（module）可以處理 CSV 的檔案讀寫。在這邊我們選用 &lt;a href="https://docs.python.org/3.5/library/csv.html#csv.DictReader"&gt;csv.DictReader&lt;/a&gt;，它預設會把檔案的第一行當成欄位名稱，然後根據這名稱，每一行都會產生一個 &lt;code&gt;dict&lt;/code&gt; 物件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./members.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以把這段程式碼直接打在 Python REPL 裡或者存成一個檔案後再用 Python 執行它，結果都會是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;高坂 穂乃果&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;絢瀬 絵里&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;南 ことり&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;園田 海未&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;星空 凛&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;西木野 真姫&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;東條 希&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;小泉 花陽&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;矢澤 にこ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;μ&amp;#39;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;平沢 唯&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;K-ON!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;秋山 澪&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;K-ON!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;田井中 律&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;K-ON!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;琴吹 紬&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;K-ON!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;中野 梓&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;K-ON!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果不要直接 &lt;code&gt;print(row)&lt;/code&gt; ，而是稍微整理一下資料再輸出，改成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./members.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; of &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;則輸出結果會是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;高坂 穂乃果 of μ&amp;#39;s
絢瀬 絵里 of μ&amp;#39;s
南 ことり of μ&amp;#39;s
園田 海未 of μ&amp;#39;s
星空 凛 of μ&amp;#39;s
西木野 真姫 of μ&amp;#39;s
東條 希 of μ&amp;#39;s
小泉 花陽 of μ&amp;#39;s
矢澤 にこ of μ&amp;#39;s
平沢 唯 of K-ON!
秋山 澪 of K-ON!
田井中 律 of K-ON!
琴吹 紬 of K-ON!
中野 梓 of K-ON!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就確定我們有辦法把資料用 Python 讀取了。要拿每個欄位的內容也很簡單，像要名字的話，只要用 &lt;code&gt;row['名字']&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="_2"&gt;網站架構規劃&lt;/h3&gt;
&lt;p&gt;這個抽籤網站主要就幾個功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首頁&lt;/strong&gt;可以選擇其中一個團體或所有人去抽籤&lt;ul&gt;
&lt;li&gt;送出之後可以看到結果&lt;/li&gt;
&lt;li&gt;並且把這個抽籤結果更新到歷史記錄裡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;歷史記錄&lt;/strong&gt;列出過去被抽到的記錄&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新成員&lt;/strong&gt;清除所有資料，重新讀入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一頁我們要有個功能表列，方便功能的切換。&lt;/p&gt;
&lt;p&gt;所以資料庫的部份會有兩張表格：&lt;strong&gt;members&lt;/strong&gt; 以及 &lt;strong&gt;draw_histories&lt;/strong&gt; 分別記錄成員以及被抽過的時間。&lt;/p&gt;
&lt;pre style="font-family: Consolas, 'Courier New', monospace"&gt;
    ┌─────────────────────┐
    │ members             │
    ├─────────────────────┤
    │ id          INTEGER │ &lt;─┐
    │ name           TEXT │   │
    │ group_name     TEXT │   │
    └─────────────────────┘   │
                              │
    ┌─────────────────────┐   │
    │ draw_histories      │   │ foreign
    ├─────────────────────┤   │ key
    │ memberid    INTEGER │ ──┘
    │ time       DATETIME │
    └─────────────────────┘
&lt;/pre&gt;

&lt;p&gt;Table &lt;strong&gt;members&lt;/strong&gt; 應該很好理解，一個欄位是名字 name，一個是團體名稱 group_name。其中 id 這個欄位是程式內部在使用的，它會在讀入資料的時候自動產生。&lt;/p&gt;
&lt;p&gt;Table &lt;strong&gt;draw_histories&lt;/strong&gt; 記錄每次抽籤發生的時間 time 還有誰被抽到 memberid，可以發現 memberid 是用成員的 id，因此我們多加一個限制是這欄位的值應該要在 members 裡的 id 中出現過。&lt;/p&gt;
&lt;h3 id="_3"&gt;實作環境設定&lt;/h3&gt;
&lt;p&gt;我們選用 &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 架設 server，因為它一開始用相當簡單。資料的部份會讀到 &lt;a href="https://www.sqlite.org/"&gt;SQLite&lt;/a&gt; 資料庫。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Flask&lt;/em&gt; is a microframework for Python based on Werkzeug, Jinja 2 and good intentions. (Flask official site)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SQLite&lt;/em&gt; is a software library that implements a self-contained, serverless, zero-configuration, transactional SQL database engine. (SQLite official site)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="python"&gt;Python 環境&lt;/h4&gt;
&lt;p&gt;使用 &lt;a href="https://www.python.org/downloads/"&gt;Python 3.5&lt;/a&gt;。理論上 SQLite 就已經裝好了能直接使用。一般在開發 Python 程式的時候會使用虛擬環境，好處虛擬環境安裝的 Python 套件可以獨立管理，不受系統或其他虛擬環境影響。我們用內建的 &lt;a href="https://docs.python.org/3.5/library/venv.html#module-venv"&gt;venv&lt;/a&gt; 建立一個名稱為 &lt;code&gt;VENV&lt;/code&gt; 的虛擬環境：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ python3.5 -m venv VENV
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時候目錄底下就會多一個 &lt;code&gt;VENV&lt;/code&gt; 資料夾，裡面是個完整的 Python 執行結構，就好像在這個路徑安裝 Python 一樣。先暫時不管它怎麼做到虛擬隔離，知道怎麼用就好。使用跟離開分別是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;source&lt;/span&gt; VENV/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;VENV&lt;span class="o"&gt;)&lt;/span&gt; $ which python
&lt;span class="c1"&gt;# /path/to/draw_member/VENV/bin/python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;VENV&lt;span class="o"&gt;)&lt;/span&gt; $ deactivate
$  &lt;span class="c1"&gt;# 前面的 (VENV) 會消失&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="flaskjinja2"&gt;安裝 Flask、Jinja2 等套件&lt;/h4&gt;
&lt;p&gt;Python 使用 pip 管理安裝的套件，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;VENV&lt;span class="o"&gt;)&lt;/span&gt; $ pip install flask jinja2
&lt;span class="c1"&gt;# Collecting flask&lt;/span&gt;
&lt;span class="c1"&gt;# Collecting jinja2&lt;/span&gt;
&lt;span class="c1"&gt;# ... (連帶裝了相關的套件）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這時候如果查看裝了哪些套件就會看到：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;VENV&lt;span class="o"&gt;)&lt;/span&gt; $ pip freeze
&lt;span class="c1"&gt;# Flask==0.10.1&lt;/span&gt;
&lt;span class="c1"&gt;# itsdangerous==0.24&lt;/span&gt;
&lt;span class="c1"&gt;# Jinja2==2.8&lt;/span&gt;
&lt;span class="c1"&gt;# MarkupSafe==0.23&lt;/span&gt;
&lt;span class="c1"&gt;# Werkzeug==0.10.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;為了方便之後把環境安裝在別的電腦上，記得用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把套件版本的資訊都存在一個檔案裡的好處是，下次把要環境架起來就只要&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;就設定完成了。&lt;/p&gt;
&lt;h4 id="sqlite-database"&gt;SQLite Database&lt;/h4&gt;
&lt;p&gt;我們先把 SQLite 每個資料表設定好，這樣之後在寫程式就只要專心讀寫資料就好了。根據前面建的模型，我們可以轉換成 SQL 語法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- create_db.sql&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt; &lt;span class="n"&gt;AUTOINCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;group_name&lt;/span&gt; &lt;span class="nb"&gt;TEXT&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;draw_histories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;memberid&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;time&lt;/span&gt; &lt;span class="n"&gt;DATETIME&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localtime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memberid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把這串 SQL 寫到一個檔案 &lt;code&gt;create_db.sql&lt;/code&gt; 後就可以實際測試一下。我們把兩個成員寫到檔案裡面，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sqlite3 -init create_db.sql test.db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;-- Loading resources from create_db.sql&lt;/span&gt;

&lt;span class="go"&gt;SQLite version 3.8.11.1 2015-07-29 20:00:57&lt;/span&gt;
&lt;span class="go"&gt;Enter &amp;quot;.help&amp;quot; for usage hints.&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;   ...&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt;
&lt;span class="gp"&gt;   ...&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;高坂 穂乃果&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;μ&amp;#39;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="gp"&gt;   ...&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;平沢 唯&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;K-ON!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;id|name|group_name&lt;/span&gt;
&lt;span class="go"&gt;1|高坂 穂乃果|μ&amp;#39;s&lt;/span&gt;
&lt;span class="go"&gt;2|平沢 唯|K-ON!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;sqlite3 -init xxx.sql&lt;/code&gt; 意思是把 &lt;code&gt;xxx.sql&lt;/code&gt; 裡面的 SQL 指令都執行了一遍，所以一進到 SQLite shell 裡面就建立好表格了。&lt;/p&gt;
&lt;p&gt;再來我們模擬幾次抽籤的過程。注意到我們之前有寫 &lt;strong&gt;draw_histories&lt;/strong&gt;.time 的預設值，所以抽籤只要寫是誰就可以了，時間 SQLite 會自動根據指令執行的時間給值。不過我們都試一下吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;draw_histories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memberid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;draw_histories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memberid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;   ...&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2015-09-25 16:30&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以第一次 INSERT 指令抽了果果以及小唯各一次。第二次 INSERT 再抽了一次小唯，這次還有額外指定時間為的 9 月 25 號下午 4 點半。關於 SQLite 裡 &lt;code&gt;datetime&lt;/code&gt; 的更多使用方式可以參考&lt;a href="https://sqlite.org/lang_datefunc.html"&gt;官網說明文件&lt;/a&gt;，我們的例子只要這樣就足夠了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;draw_histories&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;memberid|time&lt;/span&gt;
&lt;span class="go"&gt;1|2015-09-28 16:55:03&lt;/span&gt;
&lt;span class="go"&gt;2|2015-09-28 16:55:03&lt;/span&gt;
&lt;span class="go"&gt;2|2015-09-25 16:30:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;前兩個就是第一次 INSERT 所建立的抽籤歷史，跟你下指令的時間有關。第二次 INSERT 有給定時間，所以記錄永遠是 9 月 25 號下午。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;draw_histories&lt;/strong&gt; 只儲存了 member_id，我們可以做一個比較複雜的查詢，把成員的名字跟所屬團體一起列出來。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;draw_time&lt;/span&gt;
&lt;span class="gp"&gt;   ...&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;draw_histories&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;
&lt;span class="gp"&gt;   ...&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memberid&lt;/span&gt;
&lt;span class="gp"&gt;   ...&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt; &lt;span class="k"&gt;ASC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;id|name|group_name|draw_time&lt;/span&gt;
&lt;span class="go"&gt;2|平沢 唯|K-ON!|2015-09-25 16:30:00&lt;/span&gt;
&lt;span class="go"&gt;1|高坂 穂乃果|μ&amp;#39;s|2015-09-28 16:55:03&lt;/span&gt;
&lt;span class="go"&gt;2|平沢 唯|K-ON!|2015-09-28 16:55:03&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="csv"&gt;把 CSV 寫進資料庫&lt;/h3&gt;
&lt;p&gt;我們就把之後要用的資料庫取名為 &lt;code&gt;members.db&lt;/code&gt;。我們先把初始的資料寫進資料庫裡。&lt;/p&gt;
&lt;p&gt;這邊只有多一個在 Python 裡操作 SQLite 的步驟。透過 Python 內建的 &lt;a href="https://docs.python.org/3.5/library/sqlite3.html"&gt;sqlite&lt;/a&gt; module 就可以控制資料庫存取。先確定有這些檔案了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;members.csv&lt;/code&gt;: 所有成員資料&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_db.sql&lt;/code&gt;: 資料庫 schema&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先 import 用到的 module&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把成員資料從 CSV 讀進來，跟之前一樣，只是我們稍微整理一下格式，存在 &lt;code&gt;members&lt;/code&gt; 這個變數。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./members.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;
&lt;span class="go"&gt;[(&amp;#39;高坂 穂乃果&amp;#39;, &amp;quot;μ&amp;#39;s&amp;quot;),&lt;/span&gt;
&lt;span class="go"&gt; (&amp;#39;絢瀬 絵里&amp;#39;, &amp;quot;μ&amp;#39;s&amp;quot;),&lt;/span&gt;
&lt;span class="go"&gt; (&amp;#39;南 ことり&amp;#39;, &amp;quot;μ&amp;#39;s&amp;quot;),&lt;/span&gt;
&lt;span class="go"&gt; (&amp;#39;園田 海未&amp;#39;, &amp;quot;μ&amp;#39;s&amp;quot;),&lt;/span&gt;
&lt;span class="go"&gt; # ...&lt;/span&gt;
&lt;span class="go"&gt; (&amp;#39;中野 梓&amp;#39;, &amp;#39;K-ON!&amp;#39;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接著是新的部份，要先用 &lt;code&gt;sqlite3.connect()&lt;/code&gt; 建立 SQLite database 連線，然後再用這個連線去下 SQL 指令。首先要把 table 都建立出來：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create_db.sql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;create_db_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;members.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executescript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_db_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;db.executescript('...')&lt;/code&gt; 可以執行一系列的 SQL 指令（注意指令間要有分號）。另外使用 &lt;code&gt;with db: ...&lt;/code&gt; 作用是會 sqlite3 module 會自動幫我們把中間的 SQL 指令送出&lt;sup id="fnref:sqlite3 auto commit"&gt;&lt;a class="footnote-ref" href="#fn:sqlite3 auto commit"&gt;2&lt;/a&gt;&lt;/sup&gt;，等同於：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executescript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_db_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來把讀進來的 &lt;code&gt;members&lt;/code&gt; 變數寫到資料表裡面。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executemany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="s1"&gt;&amp;#39;INSERT INTO  members (name, group_name) VALUES (?, ?)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="n"&gt;members&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;試著把資料讀出來，確定真的存進去了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SELECT * FROM members LIMIT 3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;(1, &amp;#39;高坂 穂乃果&amp;#39;, &amp;quot;μ&amp;#39;s&amp;quot;)&lt;/span&gt;
&lt;span class="go"&gt;(2, &amp;#39;絢瀬 絵里&amp;#39;, &amp;quot;μ&amp;#39;s&amp;quot;)&lt;/span&gt;
&lt;span class="go"&gt;(3, &amp;#39;南 ことり&amp;#39;, &amp;quot;μ&amp;#39;s&amp;quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到了這邊我們資料的部份沒問題了，接下來就要處理網站流程本身。&lt;/p&gt;
&lt;h3 id="flask"&gt;Flask 基本架構&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 的 web server 可以把所有功能都寫在一個檔案，在這邊就以 &lt;code&gt;draw_member.py&lt;/code&gt; 為例子。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上就是最基本的 Flask server 架構。先來測試看看，都已經等待一千六百多字了。先把 server 跑起來，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;VENV&lt;span class="o"&gt;)&lt;/span&gt; $ python draw_member.py
 * Running on http://127.0.0.1:5000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
 * Restarting with stat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再來可以開瀏覽器訪問 &lt;a href="http://localhost:5000/"&gt;http://localhost:5000/&lt;/a&gt;，或者用 command line 來訪問：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ curl &lt;span class="s1"&gt;&amp;#39;http://localhost:5000/&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;會看到 server 回傳「Hello World!」。太感動了！底下先說明整個流程與 code 的關係。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app&lt;/code&gt; 是整個 Flask application 的核心物件，可以看到最後我們會呼叫它的 &lt;code&gt;.run()&lt;/code&gt; 來產生一個可以動的 web server。&lt;code&gt;debug=True&lt;/code&gt; 表示如果 server 有錯誤的時候 Flask 會提供我們完整的錯誤訊息，包含錯誤是在哪個 Python function 裡產生的，錯誤時各個變數的值等等。因為這樣會也會讓有心人士知道網站是怎麼運行的，變正式網站（上 production）時會把這個選項關掉。&lt;/p&gt;
&lt;p&gt;我們定義了一個 &lt;code&gt;index&lt;/code&gt; function 並且用 decorator 把這個函式綁定在 &lt;code&gt;/&lt;/code&gt; 路徑也就是首頁上。使用者訪問 &lt;code&gt;/&lt;/code&gt; 就會跑到這個 function 裡來。&lt;/p&gt;
&lt;h3 id="flask-sqlite"&gt;Flask 與 SQLite 資料庫讀取&lt;/h3&gt;
&lt;p&gt;我們先把資料庫相關的函式都先寫好，這邊基本上參照 &lt;a href="http://flask.pocoo.org/docs/0.10/patterns/sqlite3/#using-sqlite-3-with-flask"&gt;Flask 官網 SQLite 使用方式&lt;/a&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlite3&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;SQLITE_DB_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;members.db&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SQLITE_DB_SCHEMA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;create_db.sql&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MEMBER_CSV_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;members.csv&amp;#39;&lt;/span&gt;


&lt;span class="c1"&gt;# SQLite3-related operations&lt;/span&gt;
&lt;span class="c1"&gt;# See SQLite3 usage pattern from Flask official doc&lt;/span&gt;
&lt;span class="c1"&gt;# http://flask.pocoo.org/docs/0.10/patterns/sqlite3/&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SQLITE_DB_PATH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Enable foreign key check&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PRAGMA foreign_keys = ON&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;teardown_appcontext&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_database&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一下子多了很多 code，如果太複雜可以先當作就是這樣吧。&lt;/p&gt;
&lt;p&gt;需要了解的部份，第一是 &lt;code&gt;g&lt;/code&gt; 這個變數裡可以放很多需要傳來傳去的變數，所以就把建立好的資料庫連線放在 &lt;code&gt;g._database&lt;/code&gt;。平常如果要用這個連線的話，就用 &lt;code&gt;db = get_db()&lt;/code&gt; 去拿。&lt;/p&gt;
&lt;p&gt;第二是我們把資料的路徑等等，都寫成變數放在程式碼的最開頭。這是個好習慣，把常數跟程式分開來，管理才方便&lt;sup id="fnref:flask-config"&gt;&lt;a class="footnote-ref" href="#fn:flask-config"&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h3 id="first-view-first-template"&gt;First view, first template&lt;/h3&gt;
&lt;p&gt;先來做首頁，把 HTML 放在 &lt;code&gt;templates/index.html&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;成員抽籤&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;來抽出快樂的夥伴吧！&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;功能列&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;首頁（抽籤）&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;歷史記錄&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;清除記錄、更新成員資料&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這只是個單純的首頁，有個標題，還有個功能列，但暫時都沒有功能。我們修改一下 &lt;code&gt;draw_member.py&lt;/code&gt; 裡定義的 index 讓：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;馬上來執行看看，用一樣的方式。不過之前執行的那個可能沒有結束，記得一個 port 只能有一個服務，所以要不是用舊的（Flask 很聰明，在 &lt;code&gt;debug=True&lt;/code&gt; 時知道檔案被更新時就會用新的），要不是就關掉再重開一個新的。&lt;/p&gt;
&lt;p&gt;打開瀏覽器訪問 &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt; 應該會出現底下的畫面。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/flask-draw-member/pics/flask_helloworld.png"/&gt;
  &lt;p class="caption"&gt;Flask Hello World&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id="_4"&gt;抽籤功能&lt;/h3&gt;
&lt;p&gt;接下來要實作抽籤的功能啦，照前面說的，我們在首頁會設一個團體列表，使用者就會選擇某個團體去抽籤。&lt;/p&gt;
&lt;p&gt;在實作之前要來背景介紹一下，要先講一下 GET 與 POST 的差異。&lt;/p&gt;
&lt;h4 id="get-vs-post"&gt;GET vs POST&lt;/h4&gt;
&lt;p&gt;使用者平常在訪問網站時，該人輸入一個網站、點一個超連址，這時候瀏覽器會發送一個 GET request 到對應的 server 以及路徑。瀏覽器（通常）就會回傳一個對應的 HTML 檔案，瀏覽器就會負責把它顯示在畫面上。&lt;/p&gt;
&lt;p&gt;但當使用者跟網站有更多互動的時候，常常是要把使用者的資訊送給網站時，像帳號登入、填問卷表單，或者在這邊的選擇某個團體去抽籤，這時候就會透過 POST。&lt;/p&gt;
&lt;p&gt;更多的 GET/POST 以及其他的 HTTP request，可以參考&lt;a href="https://archer1609wp.wordpress.com/2014/03/02/httppost%E8%88%87get/"&gt;一頁式介紹（中）&lt;/a&gt;或&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;非常完整的介紹在 Mozilla Developer Network (MDN)（英）&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="form"&gt;Form&lt;/h4&gt;
&lt;p&gt;最常見的 POST 就是搭配&lt;a href="https://developer.mozilla.org/en/docs/Web/HTML/Element/form"&gt;表單 (form)&lt;/a&gt; 使用。像登入要填帳號密碼、問卷問題與回答，就很常用 form 實作。Form 裡面有很多種 input，代表使用者能填的欄位，類型可能是單選、複選、單行、多行、密文等。&lt;/p&gt;
&lt;p&gt;我們就先看一下 form 實際的長相吧。改寫 &lt;code&gt;templates/index.html&lt;/code&gt;，加上一個抽籤選團體的 form。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;h1&amp;gt;來抽出快樂的夥伴吧！&amp;lt;/h1&amp;gt;&amp;lt;!-- 本來有的 --&amp;gt;
&amp;lt;p&amp;gt;選擇要被抽的團體&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;quot;/draw&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
  &amp;lt;label for=&amp;quot;group_name&amp;quot;&amp;gt;團隊名稱：&amp;lt;/label&amp;gt;
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;group_name&amp;quot; value=&amp;quot;μ&amp;#39;s&amp;quot;&amp;gt;μ&amp;#39;s
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;group_name&amp;quot; value=&amp;quot;K-ON!&amp;quot;&amp;gt;K-ON!
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;group_name&amp;quot; value=&amp;quot;ALL&amp;quot; checked&amp;gt;（全）
  &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;!-- 這是分隔線 --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基本上加在 body 裡面就可以。這個 form 包含了一個標籤，指定是給名為 &lt;code&gt;group_name&lt;/code&gt; 的 input。底下接四個 input tags 但實際上只有兩大個。&lt;/p&gt;
&lt;p&gt;第一大個是團體的單選選項共三個 input，注意到他們的 &lt;code&gt;name&lt;/code&gt; 都是 &lt;code&gt;group_name&lt;/code&gt; 但 &lt;code&gt;value&lt;/code&gt; 不同，後面接著他們顯示的字。其中「（全）」它多了一個 &lt;code&gt;checked&lt;/code&gt; 表示預設選擇這個選項。&lt;/p&gt;
&lt;p&gt;另一大個是 &lt;code&gt;type=submit&lt;/code&gt; 的 input，他就是送出的表單的按鈕。&lt;/p&gt;
&lt;p&gt;再來注意 form tag 本身。&lt;code&gt;method="post"&lt;/code&gt; 應該很好理解，表示要送出 POST request；&lt;code&gt;action="/draw"&lt;/code&gt; 表示這個 POST 要發到 &lt;code&gt;/draw&lt;/code&gt; 這個路徑。&lt;/p&gt;
&lt;p&gt;同樣，form 底下也很多細節，歡迎再去 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Forms"&gt;MDN&lt;/a&gt; 了解。&lt;/p&gt;
&lt;h4 id="request-form-post-handling-in-flask"&gt;Request (Form / POST) handling in Flask&lt;/h4&gt;
&lt;p&gt;所以我們馬上來寫處理 &lt;code&gt;/draw&lt;/code&gt; POST 的 view 吧。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/draw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Get the database connection&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Draw member ids from given group&lt;/span&gt;
    &lt;span class="c1"&gt;# If ALL is given then draw from all members&lt;/span&gt;
    &lt;span class="n"&gt;group_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;group_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;valid_members_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SELECT id FROM members &amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_members_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;valid_members_sql&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;WHERE group_name = ?&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_members_sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;valid_member_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# If no valid members return 404 (unlikely)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;valid_member_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;err_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;p&amp;gt;No members in group &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;lt;/p&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;group_name&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;err_msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;

    &lt;span class="c1"&gt;# Randomly choice a member&lt;/span&gt;
    &lt;span class="n"&gt;lucky_member_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_member_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Obtain the lucy member&amp;#39;s information&lt;/span&gt;
    &lt;span class="n"&gt;member_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member_group_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;SELECT name, group_name FROM members WHERE id = ?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lucky_member_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;（團體：&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;）&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member_group_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Flask 會把使用者發給 server 的 request 存在 &lt;code&gt;request&lt;/code&gt; 裡面，其實使用者會傳蠻多資訊的，像該人的語言、用的瀏覽器、時間等等，這些都能在 &lt;code&gt;request&lt;/code&gt; 找到。而使用者填好的 form 的內容會存在當中 &lt;code&gt;request.form&lt;/code&gt; 裡，而我們先前定義在 form 中 input name 就會變成這邊的 dict key。&lt;/p&gt;
&lt;p&gt;因此如果要拿使用者決定的 &lt;code&gt;group_name&lt;/code&gt; 時，就會寫成 &lt;code&gt;request.form.get('group_name', 'ALL')&lt;/code&gt;。這相當於 &lt;code&gt;request.form['group_name']&lt;/code&gt; 但在沒有這個 key 時回傳預設值 &lt;code&gt;'ALL'&lt;/code&gt;。正常使用並不會找不到這個 key，但網站開發者永遠不要相信使用者會乖乖回傳這些內容。&lt;/p&gt;
&lt;p&gt;拿了團體名稱之後，就用團體名稱去下查詢的 SQL。同理這名稱可能沒有結果，這時就回傳一個 HTTP status code 為 404 的錯誤訊息。一般情況 4XX 都代表使用者給的資料有問題的。&lt;/p&gt;
&lt;p&gt;拿到了所有成員的 id 後，用了個 &lt;code&gt;random.choice&lt;/code&gt; 隨機抽一個出來。如同字面上的意思，&lt;a href="https://docs.python.org/3.5/library/random.html#random.choice"&gt;random&lt;/a&gt; 是個 Python 內建的 module。再把這個 id 拿去查名字與團體。&lt;/p&gt;
&lt;p&gt;我們總共做了兩個資料庫查詢，第一次把可能的 member id 都傳回來，第二次把抽中的人的名字、團體都拿回來。暫時還沒做寫到歷史的功能，但那個也不難，之後再說。先不做 template，把結果包在 HTML 最基本的 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 元素就傳回來。&lt;/p&gt;
&lt;h4 id="demo"&gt;Demo&lt;/h4&gt;
&lt;p&gt;重新整理首頁，可以看到多了一個表單（廢話）。Flask 的 web server 很聰明，不用重新啟動它，會自動看到檔案有更新做 reload。可以回去比對一下自己寫在 &lt;code&gt;index.html&lt;/code&gt; 裡 HTML 在瀏覽器上呈現的對應關係。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/flask-draw-member/pics/flask_index_form.png"/&gt;
  &lt;p class="caption"&gt;新的首頁，多了一個表單&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;按下 Submit 之後就會跳到抽籤結果（注意 URL 的變化）&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/flask-draw-member/pics/flask_draw_result.png"/&gt;
  &lt;p class="caption"&gt;抽籤結果&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;預計是抽全部，你也可以回到上一頁，選自己想要的團體。&lt;/p&gt;
&lt;p&gt;最重要的功能就完成啦！如果自己程式遇到一些狀況的話，可以看&lt;a href="https://github.com/ccwang002/draw_member/blob/169d81650d8ca649c5484c43c05324885e7cb7fb/draw_member.py"&gt;我寫的完整版本&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="more-on-templates"&gt;More on templates&lt;/h3&gt;
&lt;p&gt;之前我們 &lt;code&gt;render_template&lt;/code&gt; 其實都是傳一個完整的 HTML 內容給它，並沒有用到 template 功能。Template 有幾個用處：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集中重覆用到的片段、結構&lt;/li&gt;
&lt;li&gt;讓一部份 HTML 的內容受變數控制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;馬上來改寫一下吧。我們的功能表應該每一頁都要出現，再來我們希望 &lt;code&gt;/draw&lt;/code&gt; 的頁面也是個完整的 HTML。&lt;/p&gt;
&lt;p&gt;首先先把常用的部份獨立出來，做成 &lt;code&gt;templates/base.html&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;!-- templates/base.html --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;{% block title %}成員抽籤{% endblock title %}&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    {% block content %}{% endblock content %}
    &amp;lt;hr&amp;gt;
    &amp;lt;h3&amp;gt;功能列&amp;lt;/h3&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;首頁（抽籤）&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/history&amp;quot;&amp;gt;歷史記錄&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/reset&amp;quot;&amp;gt;清除記錄、更新成員資料&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;像功能列這種不會變的就很適合放在這邊。而我們的首頁就可以重覆使用這個結構，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;!-- templates/index.html --&amp;gt;
{% extends &amp;quot;base.html&amp;quot; %}

{% block content %}
&amp;lt;h1&amp;gt;來抽出快樂的夥伴吧！&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;選擇要被抽的團體&amp;lt;/p&amp;gt;
&amp;lt;form action=&amp;quot;/draw&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
  &amp;lt;label for=&amp;quot;group_name&amp;quot;&amp;gt;團隊名稱：&amp;lt;/label&amp;gt;
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;group_name&amp;quot; value=&amp;quot;μ&amp;#39;s&amp;quot;&amp;gt;μ&amp;#39;s
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;group_name&amp;quot; value=&amp;quot;K-ON!&amp;quot;&amp;gt;K-ON!
  &amp;lt;input type=&amp;quot;radio&amp;quot; name=&amp;quot;group_name&amp;quot; value=&amp;quot;ALL&amp;quot; checked&amp;gt;（全）
  &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
{% endblock content %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到最大的差異就是我們的 &lt;code&gt;index.html&lt;/code&gt; 變簡單了。它就像物件繼承一樣，&lt;code&gt;{% extends "base.html" %}&lt;/code&gt;，表示先把 &lt;code&gt;base.html&lt;/code&gt; 的內容放進來，而裡面定義了兩個 block：&lt;code&gt;title&lt;/code&gt; 以及 &lt;code&gt;content&lt;/code&gt;。Index 有定義 content 的內容，所以就取代掉原本定義在 base 裡空的 content。  Index 並沒有定義 title，那就會用原本 block 內的值，即「成員抽籤」。&lt;/p&gt;
&lt;p&gt;再來處理 &lt;code&gt;/draw&lt;/code&gt; 的部份，我們除而再利用 &lt;code&gt;base.html&lt;/code&gt; 之外，還要引入 template variable 的概念。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;!-- templates/draw.html --&amp;gt;
{% extends &amp;quot;base.html&amp;quot; %}

{% block title %}抽籤結果{% endblock title %}

{% block content %}
&amp;lt;h1&amp;gt;抽籤結果&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;{{ name }}（團體：{{ group }}）&amp;lt;/p&amp;gt;
{% endblock content %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;特別的是 &lt;code&gt;{{ name }}&lt;/code&gt; 和 &lt;code&gt;{{ group }}&lt;/code&gt;。這語法表示他們的值分別受 &lt;code&gt;name&lt;/code&gt; 和 &lt;code&gt;group&lt;/code&gt; 這兩個變數決定，變數的值在 &lt;code&gt;render_template&lt;/code&gt; 時才會決定。要怎麼把變數的值傳到 template 裡呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/draw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="c1"&gt;# return &amp;#39;&amp;lt;p&amp;gt;%s（團體：%s）&amp;lt;/p&amp;gt;&amp;#39; % (member_name, member_group_name)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;draw.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;member_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;member_group_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;改寫好的 draw 使用 template &lt;code&gt;templates/draw.html&lt;/code&gt;，並在 &lt;code&gt;render_template&lt;/code&gt; 時把變數的值都放進去。&lt;/p&gt;
&lt;p&gt;這時候才重新抽籤可以看到新的 template 的輸出結果，功能表也出現了。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/flask-draw-member/pics/flask_new_draw_result.png"/&gt;
&lt;/div&gt;

&lt;h3 id="_5"&gt;歷史記錄&lt;/h3&gt;
&lt;p&gt;記得要在抽籤的時候把記錄加到 database 裡。因為之前有設好 schema 預設用現在時間當抽籤時間，所以時間的處理完全交給 SQLite。用 SQL 語法 &lt;code&gt;LIMIT 10&lt;/code&gt; 以及 &lt;code&gt;ORDER BY&lt;/code&gt; 選擇最近的十筆，同時在查結果時，也同時查詢 &lt;strong&gt;members&lt;/strong&gt; table 對應的名字與團體。這個專業術語叫 &lt;a href="https://en.wikipedia.org/wiki/Join_%28SQL%29"&gt;JOIN&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;把這個 view 放在 &lt;code&gt;/history&lt;/code&gt; 路徑。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/draw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="c1"&gt;# Update draw history&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;INSERT INTO draw_histories (memberid) VALUES (?)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lucky_member_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="c1"&gt;# Render template&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/history&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;history&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;recent_histories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;SELECT m.name, m.group_name, d.time &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;FROM draw_histories AS d, members as m &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;WHERE m.id == d.memberid &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ORDER BY d.time DESC &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;LIMIT 10&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;history.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;recent_histories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;recent_histories&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同理也要建立對應的 template。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;lt;!-- templates/history.html --&amp;gt;
{% extends &amp;quot;base.html&amp;quot; %}

{% block title %}抽籤歷史{% endblock title %}

{% block content %}
&amp;lt;h1&amp;gt;抽籤歷史（最近 10 筆）&amp;lt;/h1&amp;gt;
&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;名字&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;團體&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;抽中時間&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    {% for history in recent_histories %}
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;{{ history.0 }}&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;{{ history.1 }}&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;{{ history.2 }}&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    {% endfor %}
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
{% endblock content %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這邊用了新的 template 語法 for loop，每次 loop &lt;code&gt;history&lt;/code&gt; 的值都會變，而且還可以再存取它底下的屬性，寫成 Python 就像：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;recent_histories&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Flask 用的 Jinja2 template 功能很多，現在各位已經比較理解 server 的運作了，可以去閱讀一下 &lt;a href="http://jinja.pocoo.org/docs/dev/templates/"&gt;Jinja2 官網文件&lt;/a&gt;看完整的使用方式。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/flask-draw-member/pics/flask_history.png"/&gt;
&lt;/div&gt;

&lt;h4 id="datetime"&gt;時間處理用 datetime&lt;/h4&gt;
&lt;p&gt;如果有注意到的話，我們用的時間從 SQLite 回傳回來其實是字串。想要改寫時間格式怎麼辦？這時候就要用上內建 module &lt;a href="https://docs.python.org/3.5/library/datetime.html#datetime-objects"&gt;datetime&lt;/a&gt; 裡提供的 &lt;code&gt;datetime&lt;/code&gt; 物件。同時我們也順便把本來用 &lt;code&gt;fetchall()&lt;/code&gt; 的結果，改成用 dict 表示每一筆歷史。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/history&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;history&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;SELECT m.name, m.group_name, d.time AS &amp;quot;draw_time [timestamp]&amp;quot; &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;FROM draw_histories AS d, members as m &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;WHERE m.id == d.memberid &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ORDER BY d.time DESC &amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;LIMIT 10&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;recent_histories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;recent_histories&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;draw_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strptime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;{% for history in recent_histories %}
&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;{{ history.name }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ history.group }}&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;{{ history.draw_time.strftime(&amp;quot;%Y 年 %m 月 %d 日 %H 時 %M 分&amp;quot;) }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到 for loop 不再使用 0, 1, 2 去拿每筆歷史各欄位的值，而是用欄位名稱，相當於 &lt;code&gt;history['name']&lt;/code&gt;。這樣的做法比較好，因為用數字一下就忘了，隨便調整一下 view 的內容順序就不一定是這樣了；單獨讀 template 也能懂每個欄位的意思。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/flask-draw-member/pics/flask_history_zh.png"/&gt;
&lt;/div&gt;

&lt;h3 id="whats-next"&gt;What&amp;rsquo;s Next&lt;/h3&gt;
&lt;h3 id="static-files-and-better-theme"&gt;Static files and better theme&lt;/h3&gt;
&lt;p&gt;我們只用了 HTML template。想要讓網站看起來更漂亮，就要寫 CSS 與 Javascript (JS)。有像 Bootstrap、PureCSS、Semantic UI 這類的「framework」，套用之後能在短時間畫出美觀實用的版面。&lt;/p&gt;
&lt;p&gt;而 CSS、JS，以及站上大大小的其他檔案都必需要從 server 傳送到用戶端上，這邊就是 static files 的處理。&lt;/p&gt;
&lt;h3 id="more-how-web-works"&gt;More how web works&lt;/h3&gt;
&lt;p&gt;除了 HTTP GET、POST 之外，還有 HTTPS、session、cookie 等很常見的技術。&lt;/p&gt;
&lt;h3 id="object-relational-model-orm"&gt;Object Relational Model (ORM)&lt;/h3&gt;
&lt;p&gt;我們只舉了純寫 SQL 的例子，但當專案變複雜的時候，純 SQL 管理上越來越複雜。ORM 是一種解決的方案。&lt;/p&gt;
&lt;h3 id="django"&gt;Django&lt;/h3&gt;
&lt;p&gt;當然可以繼續把 Flask 研究下去，它也是個很好的 web framework。不過我們主要的 code base 是 Django。所以希望大家在了解一個 web server (app) 長得像怎樣之後，就可以開始學習 Django。Django 與 Flask 最大的設計不同就是 Django 一開始就提供了很多模組與功能，感覺很「肥」，而 Flask 只提供了必要的功能&lt;/p&gt;
&lt;h3 id="_6"&gt;總結&lt;/h3&gt;
&lt;p&gt;這樣就是一個完整的抽籤的網站了。其實架網站的主要知識也差不多是這些，再來就是細節以及知識的加強。&lt;/p&gt;
&lt;p&gt;做好的成品我也放在 &lt;a href="https://github.com/ccwang002/draw_member"&gt;Github&lt;/a&gt; 上了，裡面的 commit log 記錄了幾個重要的步驟，所以想要看看每一步的結果可以用 &lt;code&gt;git checkout&lt;/code&gt; 回到每個記錄點，例如想要看抽籤功能寫完，用上 template 的版本就可以到 &lt;code&gt;git checkout f39fc1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;PS: 沒想到會寫這麼長啊……&lt;/p&gt;
&lt;h3 id="details"&gt;Details&lt;/h3&gt;
&lt;p&gt;底下記了很多技術細節，有興趣再看吧。&lt;/p&gt;
&lt;h4 id="sqlite-table-info"&gt;SQLite table info&lt;/h4&gt;
&lt;p&gt;除了用 &lt;code&gt;.schema&lt;/code&gt; 去看每個 TABLE 建立時的指令之外，也可以用 &lt;code&gt;PRAGMA table_info&lt;/code&gt; 去看某個 table 每個欄位的設定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="go"&gt;-- Run `sqlite -init create_db.sql`&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;mode&lt;/span&gt; &lt;span class="k"&gt;column&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;PRAGMA&lt;/span&gt; &lt;span class="n"&gt;table_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="go"&gt;cid  name         type       notnul  dflt_value                    pk&lt;/span&gt;
&lt;span class="go"&gt;---  -----------  ---------  ------  ----------------------------  --&lt;/span&gt;
&lt;span class="go"&gt;0    id           INTEGER    0                                     1&lt;/span&gt;
&lt;span class="go"&gt;1    name         TEXT       1                                     0&lt;/span&gt;
&lt;span class="go"&gt;2    group_name   TEXT       0                                     0&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;PRAGMA&lt;/span&gt; &lt;span class="n"&gt;table_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;draw_histories&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="go"&gt;cid  name         type       notnul  dflt_value                    pk&lt;/span&gt;
&lt;span class="go"&gt;---  -----------  ---------  ------  ----------------------------  --&lt;/span&gt;
&lt;span class="go"&gt;0    memberid     INTEGER    0                                     0&lt;/span&gt;
&lt;span class="go"&gt;1    draw_time    DATETIME   0       datetime(&amp;#39;now&amp;#39;, &amp;#39;localtime&amp;#39;)  0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="sqlite-foreign-key-check"&gt;SQLite foreign key check&lt;/h4&gt;
&lt;p&gt;SQLite3 在比較新版才會去處理 foreign key 限制的功能，參考&lt;a href="https://www.sqlite.org/foreignkeys.html#fk_enable"&gt;官網的說明&lt;/a&gt;，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;PRAGMA&lt;/span&gt; &lt;span class="n"&gt;foreign_keys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果是 0 的話表示 SQLite 並不會去檢查 foreign key。這可以手動打開檢查。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;PRAGMA&lt;/span&gt; &lt;span class="n"&gt;foreign_keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;PRAGMA&lt;/span&gt; &lt;span class="n"&gt;foreign_keys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="go"&gt;1&lt;/span&gt;
&lt;span class="gp"&gt;sqlite&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;draw_histories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memberid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="go"&gt;Error: FOREIGN KEY constraint failed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_7"&gt;重新讀入資料&lt;/h4&gt;
&lt;p&gt;我們先包好一個 function &lt;code&gt;reset_db&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# draw_members.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reset_db&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SQLITE_DB_SCHEMA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;create_db_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Reset database&lt;/span&gt;
    &lt;span class="c1"&gt;# Note that CREATE/DROP table are *immediately* committed&lt;/span&gt;
    &lt;span class="c1"&gt;# even inside a transaction&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DROP TABLE IF EXISTS draw_histories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DROP TABLE IF EXISTS members&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executescript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_db_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Read members CSV data&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MEMBER_CSV_PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;csv_reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;名字&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;團體&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;csv_reader&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Write members into databse&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;executemany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;INSERT INTO members (name, group_name) VALUES (?, ?)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;members&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;reset_db()&lt;/code&gt; 會 DROP 掉舊的 database ，然後再用剛剛介紹的方法再把資料從 CSV 讀進來。&lt;/p&gt;
&lt;p&gt;所以這個 function 要怎麼使用？&lt;/p&gt;
&lt;p&gt;一個是像之前一樣綁定一個路徑 &lt;code&gt;@app.route('/reset')&lt;/code&gt;；另一個方式我們可以透過 python shell 達到。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;draw_member&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reset_db&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;reset_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="datetime-in-sqlite-and-python"&gt;Datetime in SQLite and Python&lt;/h4&gt;
&lt;p&gt;這篇文章太長了，寫到&lt;a href="../datetime-sqlite/#datetime-sqlite"&gt;下一篇去&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;2016-06-14 更新：增加使用 &lt;code&gt;datetime.datetime&lt;/code&gt; 的說明避免跟 module 名稱混淆 (credit: 馬國薰)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;在資料處理上其實會有個 NA 的值來區分「空」以及「空值」的概念。不過這用 Python 內建的 &lt;code&gt;csv.reader&lt;/code&gt; 處理會太複雜就先算了。&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:sqlite3 auto commit"&gt;
&lt;p&gt;參考&lt;a href="https://docs.python.org/3.5/library/sqlite3.html#using-the-connection-as-a-context-manager"&gt;官方說明文件&lt;/a&gt;，它是在進入 &lt;code&gt;with db: ...&lt;/code&gt; code block 時開啟一個 transaction，並在正常離開的時候自動 commit。如果中間遇到沒有處理的 Exception 時，就會自動 roll back。&amp;#160;&lt;a class="footnote-backref" href="#fnref:sqlite3 auto commit" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:flask-config"&gt;
&lt;p&gt;其實 Flask 相關的設定通常放在 &lt;code&gt;app.config&lt;/code&gt; 裡面，不過我們的例子沒差。&amp;#160;&lt;a class="footnote-backref" href="#fnref:flask-config" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="flask"></category><category term="sqlite"></category><category term="jinja2"></category><category term="python"></category></entry><entry><title>清除 ^H</title><link href="https://blog.liang2.tw/posts/2015/09/remove-%5EH/" rel="alternate"></link><published>2015-09-27T02:28:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-09-27:/posts/2015/09/remove-^H/</id><summary type="html">&lt;p&gt;中文輸入我用嘸蝦米，在打中英文切換時候，很容易打出 &lt;code&gt;\x08&lt;/code&gt; 這東西，在 vim 就會顯示成 &lt;code&gt;^H&lt;/code&gt;，功能是 &lt;kbd&gt;Backspace&lt;/kbd&gt;，但在一般 GUI 環境裡，可能就 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;中文輸入我用嘸蝦米，在打中英文切換時候，很容易打出 &lt;code&gt;\x08&lt;/code&gt; 這東西，在 vim 就會顯示成 &lt;code&gt;^H&lt;/code&gt;，功能是 &lt;kbd&gt;Backspace&lt;/kbd&gt;，但在一般 GUI 環境裡，可能就會因為它而把前面的字吃掉。&lt;/p&gt;
&lt;p&gt;因此今天寫了個小腳本可以把清掉當目錄底下的文字檔的 &lt;code&gt;^H&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ag -l &lt;span class="s1"&gt;&amp;#39;\x08&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/\x08//&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;ag&lt;/a&gt; 能夠換成比較慢但內建就有的 grep，參數兩者是相容的。&lt;/p&gt;
&lt;p&gt;如果要順便印出改了哪些檔案的話：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Found ^H in the following files:&amp;#39;&lt;/span&gt;
ag -l &lt;span class="s1"&gt;&amp;#39;\x08&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee /dev/fd/2 &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/\x08//&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用 tee 把 stdout 導向到 stderr 還蠻有趣的，以前都不知道這樣用。&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category></entry><entry><title>使用 Zotero 管理文獻書目</title><link href="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/" rel="alternate"></link><published>2015-09-26T00:00:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-09-26:/posts/2015/09/ref-management-zotero/</id><summary type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Use Zotero to sync references, webpages, and everything.&lt;/p&gt;
&lt;p&gt;一開始會想要收集 reference 無非是做研究。寫論文、平常報告進度需要放上 citation，而在學術界最常就是 cite 別 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Use Zotero to sync references, webpages, and everything.&lt;/p&gt;
&lt;p&gt;一開始會想要收集 reference 無非是做研究。寫論文、平常報告進度需要放上 citation，而在學術界最常就是 cite 別人的期刊。期刊 citation 有它一定的格式，而且每個期刊用的格式不同，手打容易錯，也很難維護。所以最好的方式就是把期刊完整的資訊存在資料庫，然後引用的時候再插到文件裡面。&lt;/p&gt;
&lt;p&gt;整個問題就變成怎麼管理這些期刊資訊。&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#bibtex-is-for-latex"&gt;BibTex is for LaTeX&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#bibdesk"&gt;BibDesk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#endnote-is-for-word"&gt;EndNote is for Word&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zotero-bridges-the-both-world"&gt;Zotero bridges the both world&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#zotfile"&gt;Zotfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-sync-data-storage"&gt;How to sync data storage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;總結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="bibtex-is-for-latex"&gt;BibTex is for LaTeX&lt;/h3&gt;
&lt;p&gt;在 &lt;a href="https://www.latex-project.org/"&gt;LaTeX&lt;/a&gt; 當中可以利用 &lt;a href="http://www.bibtex.org/"&gt;BibTeX&lt;/a&gt;（或更新的 &lt;a href="https://www.ctan.org/pkg/biblatex"&gt;BibLaTeX&lt;/a&gt;）提供的流程處理 citation 與管理 reference（即 &lt;a href="https://en.wikibooks.org/wiki/LaTeX/Bibliography_Management"&gt;Bibliography 管理&lt;/a&gt;）。他把所有 reference 集中在一個純文字的檔案，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;@article&lt;span class="nb"&gt;{&lt;/span&gt;Calin:2006aa,
    Author = &lt;span class="nb"&gt;{&lt;/span&gt;Calin, George A. and Croce, Carlo M.&lt;span class="nb"&gt;}&lt;/span&gt;,
    Journal = &lt;span class="nb"&gt;{&lt;/span&gt;Nat Rev Cancer&lt;span class="nb"&gt;}&lt;/span&gt;,
    Month = &lt;span class="nb"&gt;{&lt;/span&gt;11&lt;span class="nb"&gt;}&lt;/span&gt;,
    Number = &lt;span class="nb"&gt;{&lt;/span&gt;11&lt;span class="nb"&gt;}&lt;/span&gt;,
    Pages = &lt;span class="nb"&gt;{&lt;/span&gt;857--866&lt;span class="nb"&gt;}&lt;/span&gt;,
    Title = &lt;span class="nb"&gt;{&lt;/span&gt;MicroRNA signatures in human cancers&lt;span class="nb"&gt;}&lt;/span&gt;,
    Volume = &lt;span class="nb"&gt;{&lt;/span&gt;6&lt;span class="nb"&gt;}&lt;/span&gt;,
    Year = &lt;span class="nb"&gt;{&lt;/span&gt;2006&lt;span class="nb"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每篇文章會有一個 cite key，在內文用到的時候就可以引用，而 BibTeX 就會根據現在定義的 style 去放 citation 以及在文末加上對應的 reference。&lt;/p&gt;
&lt;h4 id="bibdesk"&gt;BibDesk&lt;/h4&gt;
&lt;p&gt;真正讓 BibTeX 能在日常生活中很好使用，有一部份要歸功於像 &lt;a href="http://bibdesk.sourceforge.net/"&gt;BibDesk&lt;/a&gt; 這樣的圖形工具。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bibdesk.sourceforge.net/"&gt;BibDesk&lt;/a&gt; 是個 OSX 的應用程式，包含在 &lt;a href="https://tug.org/mactex/"&gt;MacTex&lt;/a&gt; distribution 裡面。除了能自動從匯入來自網站或不同格式的 citation 之外，還有檔案附件的功能，能把例如論文的 PDF、Supplementary files 自動跟對應的條目做連接，重新命名並放在一個架構化的資料夾。重新命名跟歸檔的方式都能自訂，例如可以照 期刊名稱/年份 去分類，然後把這個資料夾放在 Dropbox 上就完成了自動同步。&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/bibdesk_usage.png"/&gt;
  &lt;p class="caption center"&gt;&lt;span class="fig"&gt;BibDesk 使用畫面&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;這樣解決了幾乎所有寫 paper 會碰到的問題。&lt;/p&gt;
&lt;p&gt;平常會有個超級大的 BibTeX 檔，裡面有所有各式各樣的 reference。要寫 paper 的時候就把相關的 paper 拿出來 export 成一個小的檔案，然後把一些條目裡不相關的資訊拿掉，就不用再去想文獻引用的部份。我有好幾年都是這樣管理 reference 的。&lt;/p&gt;
&lt;h3 id="endnote-is-for-word"&gt;EndNote is for Word&lt;/h3&gt;
&lt;p&gt;不過不是所有人都用 LaTeX 寫 paper，例如我們實驗室就只有我一個人用 LaTeX，其他人都用 Word。Word 上面就沒這麼簡單又好用的管理工具了。最多人用的是 EndNote。它是付費的，但因為我是公立大學的學生，所以謝謝各位納稅人，讓我能免費使用它（鞠躬）。&lt;/p&gt;
&lt;p&gt;EndNote 做到的功能跟 BibTeX 一樣，用了它之後在 word 裡面就不用再管理書目的格式。不過我平常都是從別的地方把 reference export 再丟進 EndNote 裡，所以也不清楚它有什麼別的功能。&lt;/p&gt;
&lt;p&gt;噢，他有個好處就是在 OSX 和在 Windows 上都一樣好用。&lt;/p&gt;
&lt;h3 id="zotero-bridges-the-both-world"&gt;Zotero bridges the both world&lt;/h3&gt;
&lt;p&gt;BibDesk (BibTeX) 真的很方便，讓我有時候想要管理一些很經典的技術文章，想要存一些有用的不論是 PDF、影片、網站，都想要放到 BibDesk 裡面。但這些地方都沒有提供 BibTex citation format 讓人直接複製貼上，而且它的語法也沒有設計要解決這麼多來源，所以寫起來很卡、很花時間。&lt;/p&gt;
&lt;p&gt;另一方面，現在查資料都是用瀏覽器，看到一篇論文，如果要 Export citation、打開 BibDesk、Import citation、Download PDF(s)、Link PDF(s) 這一連串動作也很麻煩。&lt;/p&gt;
&lt;p&gt;所以就有了 &lt;a href="https://www.zotero.org/"&gt;Zotero&lt;/a&gt; [zoh-TAIR-oh] 這整合在瀏覽器的工具。目前支援 Firefox、Chrome、Safari，也有提供 Plugin 給 Word 或 LibreOffice 使用。所以它應該足夠取代前面的工具，雖然我並沒有結合 Word 使用過。&lt;/p&gt;
&lt;p&gt;基本畫面蠻簡單的，大概所有的書目管理軟體都差不多，只是它是整合在 Browser 當中，&lt;/p&gt;
&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/zotero.png"/&gt;
  &lt;p class="caption center"&gt;&lt;span class="fig"&gt;Zotero 使用畫面&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;使用很簡單，就兩個按鈕 &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/zotero_icon.png" style="height: 1.6em;"/&gt;，左邊打開 Zotero 視窗，右邊把當前網頁存進自己的 library 裡，它右下角就會出現處理的訊息，如果是期刊網站而且有 full text PDF 的權限，就會一起把 PDF 都存起來。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/zotero_saving.png"/&gt;
&lt;/div&gt;

&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/zotero_citation.png"/&gt;
&lt;/div&gt;

&lt;p&gt;平常要放到論文裡時，我還是會先匯出到 BibTeX 或 EndNote。不過它額外還有好用的功能，能把 citation 輸出成 RTF/HTML 的 bibliography，這可以直接貼在 Powerpoint 做投影片很方便。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Torsten Thomas, Jack Gilbert &amp;amp; Folker Meyer. Metagenomics - a guide from sampling to data analysis. &lt;em&gt;Microbial Informatics and Experimentation&lt;/em&gt; &lt;strong&gt;2&lt;/strong&gt;, 3 (2012).&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Zotero 有提供免費 300MB 讓使用者同步 library，這對於單純 citation 本身已經很足夠了，它也支援同步到自己架設的 WebDAV。&lt;/p&gt;
&lt;p&gt;PS: Zotero 採用 AGPL v3 授權，原始碼在 &lt;a href="https://github.com/zotero/zotero"&gt;Github&lt;/a&gt; 上。&lt;/p&gt;
&lt;h4 id="zotfile"&gt;Zotfile&lt;/h4&gt;
&lt;p&gt;Zotero 內建的 PDF attachment 功能不如 BibDesk 這麼完整，因此有 &lt;a href="http://zotfile.com/"&gt;Zotfile&lt;/a&gt; 來額外管理 PDF 檔案的功能。再者 Zotero 的空間有限，會想把 PDF 等大的檔案放在像 Dropbox 的地方，不要都用 Zotero 同步。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/zotfile_file_location.png"/&gt;
  &lt;p class="caption left"&gt;自訂 (PDF) 檔案存放路徑，底下可以再設定子目錄。在這邊是會按照&lt;code&gt;期刊名/年分&lt;/code&gt;去分目錄。&lt;/p&gt;
&lt;/div&gt;

&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/zotfile_rename_setting.png"/&gt;
  &lt;p class="caption"&gt;自訂檔案命名規則&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;不過如果是同步到 Dropbox 的話，可能每台電腦的路徑都不一樣，例如 OSX 可能是 &lt;code&gt;/Users/me/Dropbox&lt;/code&gt;，但 Debian 可能是 &lt;code&gt;/home/me/Dropbox&lt;/code&gt;，這時候存放的路徑就要改成相對路徑。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/zotero_file_location.png"/&gt;
  &lt;p class="caption"&gt;Zotero Advanced 設定裡修改 library 相關檔案的路徑。&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;這邊要額外說明一下 Linked Attachment Base Directory 以及 Data Directory 的差異。像 PDF 這類如果被 Zotfile 所管理的檔案，或是自己手動選「Attach Link &amp;hellip;」的檔案，他使用的是 linked attachment，icon 會有個連結的符號 &lt;img src="https://blog.liang2.tw/posts/2015/09/ref-management-zotero/pics/zotfile_fileicon.png" style="height: 1.6em;"/&gt;。其他像 Webpage Snapshot 或是預設的 PDF 檔都是放在 Data Directory。&lt;/p&gt;
&lt;h4 id="how-to-sync-data-storage"&gt;How to sync data storage&lt;/h4&gt;
&lt;p&gt;如果要進一步讓 data storage 也用 Dropbox 同步的話，參考官網關於 &lt;a href="https://www.zotero.org/support/sync"&gt;sync 的介紹&lt;/a&gt;，OSX 上 Zotero Firefox 的資料會存放在&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/Library/Application Support/Firefox/Profiles/xxxxxxxx.default/zotero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中 data storage 就在底下的 &lt;code&gt;storage&lt;/code&gt; 資料夾。官網建議不要把 Zotero 的 SQLite database 等都同步在 Dropbox 上，所以只要把這個資料移到 Dropbox 再 soft link 回來就可以了。&lt;/p&gt;
&lt;h3 id="_1"&gt;總結&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.zotero.org/"&gt;Zotero&lt;/a&gt; 是個實用並且跟瀏覽器整合的文獻（書目）管理工具。但它也能處理像網頁等其他網路上也很常見的格式，也能與既有的工具、文件編輯軟體結合，並有同步功能，非常適合作為外部記憶庫。&lt;/p&gt;
&lt;p&gt;（應該要用英文寫的，什麼時候才會有第一篇英文 blog post QAQ）&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category><category term="zotero"></category></entry><entry><title>PNG Optimizer</title><link href="https://blog.liang2.tw/posts/2015/09/png-optim/" rel="alternate"></link><published>2015-09-22T00:00:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-09-22:/posts/2015/09/png-optim/</id><summary type="html">&lt;p&gt;部落格剛成立總是特別興奮，測了一下瀏覽像這樣的網站要用多少頻寬。首頁能壓在 600KB 左右，因為文章 summary 裡面暫時還沒圖 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;部落格剛成立總是特別興奮，測了一下瀏覽像這樣的網站要用多少頻寬。首頁能壓在 600KB 左右，因為文章 summary 裡面暫時還沒圖。不過像部落格設定這篇文章，裡面有幾張螢幕截圖的就要花快 2MB 傳。&lt;/p&gt;
&lt;p&gt;就想了一下圖檔有什麼壓縮方式。如果是 JPG 的話，&lt;a href="https://github.com/tjko/jpegoptim"&gt;jpegoptim&lt;/a&gt; 簡單又有效；如果是 PNG 的話，以前都是用 &lt;a href="http://optipng.sourceforge.net/"&gt;OptiPNG&lt;/a&gt;，但效果有限，而且是無損壓縮。在螢幕截圖的情況，我倒不介意幾個像素的顏色稍微不一樣（其實人眼無法分辨）&lt;/p&gt;
&lt;p&gt;於是，需要比較看看市面找得到的幾種 PNG 壓縮方式。很碰巧找到 &lt;a href="http://css-ig.net/png-tools-overview.html"&gt;http://css-ig.net/png-tools-overview.html&lt;/a&gt; 專講 PNG 優化的比較，就挑了幾款來試。&lt;/p&gt;
&lt;p&gt;直接把結果整理成下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Filename&lt;/th&gt;
&lt;th align="right"&gt;Original size&lt;/th&gt;
&lt;th align="right"&gt;&lt;a href="http://optipng.sourceforge.net/"&gt;OptiPNG&lt;/a&gt; (lossless)&lt;/th&gt;
&lt;th align="right"&gt;&lt;a href="https://github.com/google/zopfli"&gt;Zopfli&lt;/a&gt; (lossless)&lt;/th&gt;
&lt;th align="right"&gt;&lt;a href="https://pngquant.org/"&gt;pngquant&lt;/a&gt; (lossy)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="../blog-internals/pics/blog_desktop.png"&gt;blog_desktop.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;180K&lt;/td&gt;
&lt;td align="right"&gt;108K&lt;/td&gt;
&lt;td align="right"&gt;100K&lt;/td&gt;
&lt;td align="right"&gt;56K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="../blog-internals/pics/blog_mobile.png"&gt;blog_mobile.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;72K&lt;/td&gt;
&lt;td align="right"&gt;52K&lt;/td&gt;
&lt;td align="right"&gt;44K&lt;/td&gt;
&lt;td align="right"&gt;28K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="../blog-internals/pics/justfont_setting.png"&gt;justfont_setting.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;272K&lt;/td&gt;
&lt;td align="right"&gt;196K&lt;/td&gt;
&lt;td align="right"&gt;164K&lt;/td&gt;
&lt;td align="right"&gt;84K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="../blog-internals/pics/oldsite.png"&gt;oldsite.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;604K&lt;/td&gt;
&lt;td align="right"&gt;536K&lt;/td&gt;
&lt;td align="right"&gt;492K&lt;/td&gt;
&lt;td align="right"&gt;288K&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://blog.liang2.tw/posts/2015/09/png-optim/pics/oldsite_full.png"&gt;oldsite_full.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;816K&lt;/td&gt;
&lt;td align="right"&gt;684K&lt;/td&gt;
&lt;td align="right"&gt;644K&lt;/td&gt;
&lt;td align="right"&gt;376K&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="optipng"&gt;OptiPNG&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://optipng.sourceforge.net/"&gt;OptiPNG&lt;/a&gt; 還是有部份效果，不過他跑不快。&lt;/p&gt;
&lt;h3 id="zopfli-zopflipng"&gt;Zopfli (Zopflipng)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/google/zopfli"&gt;Zopfli&lt;/a&gt; 是 Google 開發的壓縮演算法，相容於 deflate, gzip, zlib 格式。也因此能用在 PNG 上面。他也是 lossless compression。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Zopfli Compression Algorithm is a compression library programmed in C to perform very good, but slow, deflate or zlib compression.
(&lt;a href="https://github.com/google/zopfli"&gt;Zopfli Readme&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這個 &lt;a href="https://github.com/google/zopfli/blob/master/README.zopflipng"&gt;Zopflipng&lt;/a&gt; 也是同個 repo 維護。自己編譯簡單，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/google/zopfli.git
make zopflipng
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果要一口氣壓縮一堆 PNG，可以這樣使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;zopflipng --lossy_transparent --prefix *.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;速度也蠻慢的，有個 &lt;code&gt;-q&lt;/code&gt; 選項可以加速。但壓縮效率比 OptiPNG 還好。&lt;/p&gt;
&lt;p&gt;PS 剛好今天早上看到 Google 又出了另一個壓縮演算法 &lt;a href="https://github.com/google/brotli"&gt;Brotli&lt;/a&gt;，但這個與 deflate 不相容，應該不能用在 PNG 上面。&lt;/p&gt;
&lt;h3 id="pngquant"&gt;pngquant&lt;/h3&gt;
&lt;p&gt;想要有損的 PNG 可以用 &lt;a href="https://pngquant.org/"&gt;pngquant&lt;/a&gt;。看官網有特別強調在透明度的資訊會被保留，並能像 JPEG 一樣設定 quality。一般 quality 容許越低壓縮比都會越高。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pngquant -f --ext=.png --quality=70-85 --skip-if-larger *.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到 pngquant 能很容易達到 50% 以下的壓縮比。就我的例子看不太出現螢幕截圖哪裡失真了，而且失真了……也不會怎麼樣啦。&lt;/p&gt;
&lt;h3 id="pngquant-zopflipng"&gt;pngquant + Zopflipng&lt;/h3&gt;
&lt;p&gt;看了一下相關的討論，pngquant 還有再被壓縮的空間，所以最後再套上 Zopflipng 還可以再變小，還蠻驚人的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Filename&lt;/th&gt;
&lt;th align="right"&gt;Orig. size&lt;/th&gt;
&lt;th align="right"&gt;pngquant&lt;/th&gt;
&lt;th align="right"&gt;pngquant + Zopfli&lt;/th&gt;
&lt;th align="right"&gt;Compress ratio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="../blog-internals/pics/blog_desktop.png"&gt;blog_desktop.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;180K&lt;/td&gt;
&lt;td align="right"&gt;56K&lt;/td&gt;
&lt;td align="right"&gt;60K&lt;/td&gt;
&lt;td align="right"&gt;0.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="../blog-internals/pics/blog_mobile.png"&gt;blog_mobile.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;72K&lt;/td&gt;
&lt;td align="right"&gt;28K&lt;/td&gt;
&lt;td align="right"&gt;28K&lt;/td&gt;
&lt;td align="right"&gt;0.39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="../blog-internals/pics/justfont_setting.png"&gt;justfont_setting.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;272K&lt;/td&gt;
&lt;td align="right"&gt;84K&lt;/td&gt;
&lt;td align="right"&gt;76K&lt;/td&gt;
&lt;td align="right"&gt;0.28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="../blog-internals/pics/oldsite.png"&gt;oldsite.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;604K&lt;/td&gt;
&lt;td align="right"&gt;288K&lt;/td&gt;
&lt;td align="right"&gt;268K&lt;/td&gt;
&lt;td align="right"&gt;0.44&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;a href="https://blog.liang2.tw/posts/2015/09/png-optim/pics/oldsite_full.png"&gt;oldsite_full.png&lt;/a&gt;&lt;/td&gt;
&lt;td align="right"&gt;816K&lt;/td&gt;
&lt;td align="right"&gt;376K&lt;/td&gt;
&lt;td align="right"&gt;348K&lt;/td&gt;
&lt;td align="right"&gt;0.43&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="truepng"&gt;沒有測的 TruePNG&lt;/h3&gt;
&lt;p&gt;在原始網站中有提到 &lt;a href="http://css-ig.net/articles/truepng"&gt;TruePNG&lt;/a&gt; 表現很好，但它不是 open source 而且好像只能在 Windows 上跑，那就算了。&lt;/p&gt;
&lt;h3 id="_1"&gt;結論&lt;/h3&gt;
&lt;p&gt;以後沒事截圖都會用 pngquant 壓縮一下，完全不能有色差的考慮從 OptiPNG 改為 Zopfli。&lt;/p&gt;</content><category term="Coding"></category><category term="zh"></category><category term="png"></category></entry><entry><title>設定部落格筆記</title><link href="https://blog.liang2.tw/posts/2015/09/blog-internals/" rel="alternate"></link><published>2015-09-21T00:00:00-05:00</published><updated>2021-03-02T10:49:49-06:00</updated><author><name>Liang-Bo Wang</name></author><id>tag:blog.liang2.tw,2015-09-21:/posts/2015/09/blog-internals/</id><summary type="html">&lt;p&gt;Blog 對我來說，最重要的就是書寫的舒適度。&lt;/p&gt;
&lt;p&gt;一開始在設定 github CNAME 的時候就訂為 &lt;code&gt;blog.liang2.tw&lt;/code&gt;，但一直以來都只是個一頁式的自我介 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Blog 對我來說，最重要的就是書寫的舒適度。&lt;/p&gt;
&lt;p&gt;一開始在設定 github CNAME 的時候就訂為 &lt;code&gt;blog.liang2.tw&lt;/code&gt;，但一直以來都只是個一頁式的自我介紹&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;，用 &lt;a href="http://semantic-ui.com/"&gt;SemanticUI&lt;/a&gt; 手刻而成。不過部落格如果每篇文章都還要手刻的話，大概就不會有力氣再寫內容了。&lt;/p&gt;
&lt;p&gt;整理了一下有幾個目標：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只考慮用 static site 因為不想維護 server，而且 blog 也沒什要炫的，現在光用前端就可以做到很多互動功能&lt;/li&gt;
&lt;li&gt;最好 site generator 是用 Python 實作，這樣想要調整它的功能時，比較懂怎麼改 &lt;/li&gt;
&lt;li&gt;能支援 markdown 和 reStructuredText 最好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;篩完之後選項也沒幾個：&lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt;、&lt;a href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;，但 Sphinx 可能對 blog 開發的功能比較少，最多人用的大概就 Pelican，所以就決定用它了。&lt;/p&gt;
&lt;p&gt;整理起來也做了不少調整，就列點吧：&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#pelican"&gt;Pelican 簡介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#all-is-about-the-theme"&gt;All is about the theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;字型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#webfont"&gt;中文 webfont&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;中文排版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#figure-caption"&gt;Figure caption&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown-or-rst"&gt;Markdown or rst?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#to-do"&gt;To do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#edit-2015-09-22"&gt;EDIT (2015-09-22)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#edit-2015-09-23"&gt;EDIT (2015-09-23)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 id="pelican"&gt;Pelican 簡介&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/"&gt;Pelican&lt;/a&gt; 結論來說不難理解，而且要自訂 blog theme 也不會很複雜。首先跟 Sphinx 一樣，用內建的 &lt;code&gt;pelican-quickstart&lt;/code&gt; 預設值就能架好一個可以動的。目錄大概長這樣&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;my_blog/
├── content/
│   ├── blog_post_1.md
│   └── blog_post_2.rst
├── output/
├── develop_server.sh*
├── Makefile
├── fabfile.py
├── pelicanconf.py
├── publishconf.py
└── requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Blog source 都放在 content 底下，設定檔分成 local 用的 &lt;code&gt;pelicanconf.py&lt;/code&gt; 以及 deploy 用的 &lt;code&gt;publishconf.py&lt;/code&gt;。並且提供了像 Fabric、Make、shell script 等自動化腳本把 source 用 theme template render 成一個靜態網站，&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;預設會輸出到 &lt;code&gt;output/&lt;/code&gt;，到時候 deploy 就把這個資料夾的內容丟到 server 上。&lt;/p&gt;
&lt;p&gt;每篇文章可以用 markdown 或者 reStructuredText(rst) 來寫，概念上像這樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;---
Title: Hello World
Date: 2016-01-16 18:00
Tags: world, programming
Category: test
&lt;span class="gu"&gt;Slug: hello-world&lt;/span&gt;
&lt;span class="gu"&gt;---&lt;/span&gt;

Hello [World]

[&lt;span class="nl"&gt;World&lt;/span&gt;]: &lt;span class="na"&gt;https://en.wikipedia.org/wiki/World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;Hello World&lt;/span&gt;
&lt;span class="gh"&gt;##############&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; 2016-01-16 18:00
&lt;span class="nc"&gt;:tags:&lt;/span&gt; world, programming
&lt;span class="nc"&gt;:category:&lt;/span&gt; test
&lt;span class="nc"&gt;:slug:&lt;/span&gt; hello-world

Hello World_

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="nt"&gt;_World:&lt;/span&gt; https://en.wikipedia.org/wiki/World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣已經設定好了標題、分類、標籤、發布日期還有 slug（有點像文章的 ID）算很完整了。最低要求至少有標題。&lt;/p&gt;
&lt;p&gt;最後調整了一下 static file 的路徑。我把文章按年月分開，每個子資料夾裡有當月的圖、檔案等等。URL 也是以年月為單位。其實最理想的應該是有個 hash 之類的東西 &lt;code&gt;/posts/2015/09/abcd/&lt;/code&gt; 等同於 &lt;code&gt;/posts/2015/09/abcd-my-post/&lt;/code&gt; 比較好分享。找了一下好像沒這功能，不過沒有它影響也不嚴重，暫且不理。&lt;/p&gt;
&lt;h3 id="all-is-about-the-theme"&gt;All is about the theme&lt;/h3&gt;
&lt;p&gt;一開始最花時間就是找個好主題了。內建的主題實用性不差，但初次看結構太複雜，再來我喜歡更簡潔的版面，也希望有寫好 responsive layout。&lt;/p&gt;
&lt;p&gt;Pelican 大部份的主題都集中在 &lt;a href="http://pelicanthemes.com/"&gt;http://pelicanthemes.com/&lt;/a&gt;，有縮圖很好挑選，而且 theme 跟內容是分開的，換 theme 只是改 config 裡 &lt;code&gt;THEME&lt;/code&gt; 這變數而已，不喜歡就換。選了一陣子挑到 &lt;a href="https://github.com/alexandrevicenzi/flex"&gt;Flex&lt;/a&gt;，他不是我最喜歡的版型，我比較喜歡單欄式置中，但意外只有少數主題滿足上述條件。&lt;/p&gt;
&lt;p&gt;Theme template 用 Jinja2，一開始只要調整 &lt;code&gt;base&lt;/code&gt;、&lt;code&gt;index&lt;/code&gt;、&lt;code&gt;article&lt;/code&gt;、&lt;code&gt;page&lt;/code&gt; 這幾頁跟 blog 最相關的就能改變主要的外觀。好在兩欄式的網頁 code 讀起來也很舒適。看了一下只要把 responsive 調整一下，讓手機內文寬度夠、很大的螢幕不要滿版整體看起來就差不多。大致上 theme 就這樣定下來了。&lt;/p&gt;
&lt;p&gt;細部的 CSS 修正，Flex 有用 &lt;a href="http://lesscss.org/"&gt;LESS&lt;/a&gt; 和 &lt;a href="http://gulpjs.com/"&gt;gulp&lt;/a&gt; 處理前端的設定。LESS 變數跟 nesting rules 不會讓 CSS 變得很髒；每次改完跑個 gulp 就有新的 &lt;code&gt;style.min.css&lt;/code&gt; 很方便。&lt;/p&gt;
&lt;p&gt;唯一討厭左側的大頭照，有夠煩的，而且還要增加 54KB 的流量。還再想該放什麼來關掉它，放初音好了。&lt;/p&gt;
&lt;h3 id="_1"&gt;字型&lt;/h3&gt;
&lt;p&gt;因為自用 OSX，有時候都會忘了在 Windows 上的字體有多悲哀。&lt;/p&gt;
&lt;p&gt;Flex 內建用 Google webfont 來處理英文字體，為了引言還有完整性多加了一組 serif 字體 &lt;a href="https://www.google.com/fonts/specimen/Crimson+Text"&gt;Crimson Text&lt;/a&gt;。我喜歡這種 Garamond 類的古典襯線字。剛剛發現它是&lt;a href="https://github.com/skosch/Crimson"&gt;開源的 (SIL 1.1)&lt;/a&gt;，nice。（大陸網友表示：……）&lt;/p&gt;
&lt;h4 id="webfont"&gt;中文 webfont&lt;/h4&gt;
&lt;p&gt;麻煩的就是中文字型。直接放棄系統內建，但最後有把 Noto Sans CJK 和 Source Hans Sans 加進來當備用。一直都有想嘗試 &lt;a href="http://justfont.com"&gt;justfont&lt;/a&gt; 推出的 webfont 功能。它運作時會嵌入一個 javascript，看這頁網頁用到哪些中文字，才去要這些中文字的字型來加速載入。使用上就跟 Google webfont 一樣，官網教學考慮了很多使用情況，其實沒做什麼設定就好了，我以為要調很多東西才看得到效果，最後只改了 &lt;code&gt;font-family&lt;/code&gt; 就完工。他的設定也能保留原本英文字的字型。&lt;/p&gt;
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/blog-internals/pics/justfont_setting.png"/&gt;
  &lt;p class="caption center"&gt;&lt;span class="fig"&gt;Justfont 設定&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;免費的試用沒問題之後就刷下去了。說真的免費只能綁兩個字型，設定好內文以及內文粗體 quota 就用完了，現在 100,000 page views/year 大約 NTD 350/year 也不貴。既然付費了當然要試試信黑體，電腦版的到現在還買不起啊。設了兩個字重，一樣加了一套楷體當引言用。楷體也選了比較秀氣的 cwTeX 楷。&lt;/p&gt;
&lt;p&gt;也許未來會試試看仿宋體，但我有點擔心螢幕顯示的效果（用 Retina 表示解析度無感），而且 justfont 提供的（仿）宋體也沒有比信黑體更喜歡，這實驗暫且擱置。&lt;/p&gt;
&lt;h4 id="_2"&gt;中文排版&lt;/h4&gt;
&lt;p&gt;受到 COSCUP 2015 Bobby Tung 給的演講&lt;a href="http://www.slideshare.net/bobby3302/w3c-51661297"&gt;《中文排版需求以及我在W3C看到的事情》&lt;/a&gt;所感召，覺得如果自己不一開始好好做網頁中文排版，之後肯定更懶得改。&lt;/p&gt;
&lt;p&gt;但最後還是有所妥協啦（跪）。&lt;/p&gt;
&lt;p&gt;首先段落前後還是有留白，這主要是兼顧英文排版，因為不知道怎麼在不同語言套不同的版型，英文段落是前後留大間距。再來我在純文字的時候也很習慣段落前後空一行，感覺視覺上這樣比較舒適（也許是行高不夠……）。 &lt;del&gt;&lt;code&gt;margin&lt;/code&gt; 也是設為 &lt;code&gt;1em&lt;/code&gt;。&lt;/del&gt;（EDIT: 見文末）&lt;/p&gt;
&lt;p&gt;段落首行縮排最後也沒有放，主因是文句都蠻短的，有點怪；再來 markdown parser 會把我的全形空白吃掉，難以理解（但 rst 不會），真要加只能用&lt;code&gt;&amp;amp;#x3000;&lt;/code&gt;硬加。中英交雜的段落中文字會無法對齊，不過就暫時算了，現在中英文的字重能一樣已經很感動了。&lt;/p&gt;
&lt;p&gt;300 的中文字的確有點細，我把字調大了成 18px，還特別拿給我爸媽看，確定他們看得到這些字 XD &lt;/p&gt;
&lt;p&gt;做到這裡其實還蠻滿意了，長得像這樣：&lt;/p&gt;
&lt;div class="figure align-center" style="width: 250px"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/blog-internals/pics/blog_mobile.png"/&gt;
  &lt;p class="caption center"&gt;&lt;span class="fig"&gt;手機上的樣子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;div class="figure"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/blog-internals/pics/blog_desktop.png"/&gt;
  &lt;p class="caption center"&gt;&lt;span class="fig"&gt;電腦螢幕的樣子&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id="figure-caption"&gt;Figure caption&lt;/h3&gt;
&lt;p&gt;圖的下面還蠻常會放一些圖說、reference 之類。範例上面就有。在 markdown 不容易達成這效果，因為它的語法沒這麼複雜；但 rst 本來就有支援這樣的語法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; fig

&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; {filename}pics.jpg
    &lt;span class="nc"&gt;:align:&lt;/span&gt; center

    &lt;span class="na"&gt;:fig:&lt;/span&gt;&lt;span class="nv"&gt;`Figure 1:`&lt;/span&gt; The figure caption.

    The legend consists of all elements after the caption.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這樣就會變成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;figure align-center&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{filename}pics.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;caption&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fig&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Figure 1:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; The figure caption&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;legend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The legend consists of all elements after the caption.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 markdown 基本上就手打上面那一串 HTML，其實也還好，只是醜了一點。真的寫得很煩時再想寫 plugin 來做這件事。&lt;/p&gt;
&lt;h3 id="markdown-or-rst"&gt;Markdown or rst?&lt;/h3&gt;
&lt;p&gt;日常的編輯應該還是以 markdown 為主，看看精美的 &lt;a href="http://macdown.uranusjr.com/"&gt;Macdown&lt;/a&gt; 編輯器如此好用。但如果是很複雜的檔案（分析有公式有圖表什麼的）可能就會考慮 rst；rst 缺點就是語法有點複雜，而且很多語法仰賴句中空白，使得不適用中文，然後我的 vim linter 會一直抱怨它有很多沒看過的 directives。&lt;/p&gt;
&lt;p&gt;不過很高興 Pelican 把兩者整合的很好，兩個都能用就能視情況轉換，但 template 也不用寫兩份。&lt;/p&gt;
&lt;h3 id="to-do"&gt;To do&lt;/h3&gt;
&lt;p&gt;這之外還加上了 LaTeX MathJax、Smartypants 等小細節，不過整體來說 blog 客製化就完成了。也許未來用到什麼再加吧。&lt;/p&gt;
&lt;p&gt;目前想到的一些問題：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;標題字重：本來是跟內文同字重，但感覺長文會抓不到段落，先改成粗體，希望短文不要因為這樣變得很混亂。&lt;/li&gt;
&lt;li&gt;Jupyter notebook include：還沒有試直接嵌入 nb 的功能，我想應該也是調整 CSS 那類的工（前端好累好難啊…）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="(https://github.com/getpelican/pelican-plugins)"&gt;Pelican plugin&lt;/a&gt; 裡面包含了很多樣的套件，我猜很多遇到的問題，前人都解掉了吧？……吧 xdd&lt;/p&gt;
&lt;h3 id="edit-2015-09-22"&gt;EDIT (2015-09-22)&lt;/h3&gt;
&lt;p&gt;看來看去，又調整了很多東西。&lt;/p&gt;
&lt;p&gt;首先，字體大小調小成 16px 又調回 18px。會選擇 16px 是因為我發現在 13&amp;#34; 筆電上閱讀會變得很擠。調回來是因為在大螢幕上看真的太小了，自己都需要放大來看。而且發現本來 13&amp;#34; 上很擠的問題並不是字體，而是一行文字的字數。&lt;/p&gt;
&lt;p&gt;一行文字太多會影響到閱讀的效率。PTT 一行最多 39 個中文字，但應該很少文章是打滿的，大約都打個五到八成寬，也就是在 20-32 個中文字。英文的話大約在 12-15 個字。我自己調了很多版本也差不多是這個數字。&lt;/p&gt;
&lt;p&gt;所以理想的文章寬度要滿足中、英文的字數。中文字寬度是固定的，所以在決定一行有多少個中文字之後，就要想辦法調整英文字體讓一行英文字數剛好。原本使用的 Source Pro Sans 稍微窄了一點，會讓純英文的頁面看起來有點擠，字重 400 的時候就好多了，但中文就變得不適合內文。最後換成 Lato，也是很普及的字體，不過其實沒寬多少。如果還是覺得很擠就只好換成 Open Sans 了，但我覺得它就有點鬆散。&lt;/p&gt;
&lt;p&gt;最後內文寬 738px (41em) 或 828px (46em)，實際一行最大為 612px (34em)。一行最多 34 個中文字、大約 14 個英文字（80 個字元）；程式碼一行最多只能放 74 個字元，短了一點點但還可以接受。&lt;/p&gt;
&lt;p&gt;意外的小發現，在內文變窄之後，還可以加上右側的 sidenote，像是 &lt;a href="http://www.daveliepmann.com/tufte-css/"&gt;Tufte CSS&lt;/a&gt; 這樣，有時會比 footnote 好用，但可能又變回內容太擠的狀態。&lt;/p&gt;
&lt;p&gt;最後是在段落前後距離調整，把標題接內文的間距變小了，但段落間的間距調大。學到了一些以前不會的 CSS 語法，像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代表選取相鄰的 p 元素，這樣可以避免直接改 p 的 margin 讓 p 與 h&lt;em&gt;、ul、pre 等間距太寬的狀況。&lt;/em&gt;&lt;em&gt;前端真的太神妙了。&lt;/em&gt;*&lt;/p&gt;
&lt;h3 id="edit-2015-09-23"&gt;EDIT (2015-09-23)&lt;/h3&gt;
&lt;p&gt;另外 smartypants 有時候有點煩，像是表達 13 吋時&lt;/p&gt;
&lt;p class="center"&gt;&lt;span style="font-size: 4em; line-height: 1em;"&gt;13" vs 13&amp;#34;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;不把 &lt;code&gt;"&lt;/code&gt;（QUOTATION MARK &lt;code&gt;\u0022&lt;/code&gt;）直接寫成 &lt;code&gt;&amp;amp;#34;&lt;/code&gt; 就會被轉換成左邊那樣 &lt;code&gt;”&lt;/code&gt;（RIGHT DOUBLE QUOTATION MARK &lt;code&gt;\u201D&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;也把表格的格式加上，仿造 bootstrap 表格 overflow 時會變成 block 可以滑動著看。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;以前部落格的長相：
&lt;div class="figure align-center"&gt;
  &lt;img src="https://blog.liang2.tw/posts/2015/09/blog-internals/pics/oldsite.png"/&gt;
&lt;/div&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Coding"></category><category term="zh"></category><category term="pelican"></category><category term="blog"></category><category term="python"></category></entry></feed>